
nucleo_f411re_uart2_printf_uart6_bt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006558  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080066f8  080066f8  000076f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006894  08006894  00008078  2**0
                  CONTENTS
  4 .ARM          00000008  08006894  08006894  00007894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800689c  0800689c  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800689c  0800689c  0000789c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068a0  080068a0  000078a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080068a4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000078  0800691c  00008078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  0800691c  000083d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f73  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000251d  00000000  00000000  0001901b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0001b538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d65  00000000  00000000  0001c638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c2f  00000000  00000000  0001d39d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136f0  00000000  00000000  00034fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092e7a  00000000  00000000  000486bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db536  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005460  00000000  00000000  000db57c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000e09dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080066e0 	.word	0x080066e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080066e0 	.word	0x080066e0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80005aa:	4a38      	ldr	r2, [pc, #224]	@ (800068c <HD44780_Init+0xec>)
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80005b0:	4b37      	ldr	r3, [pc, #220]	@ (8000690 <HD44780_Init+0xf0>)
 80005b2:	2208      	movs	r2, #8
 80005b4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80005b6:	4b37      	ldr	r3, [pc, #220]	@ (8000694 <HD44780_Init+0xf4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80005bc:	4b33      	ldr	r3, [pc, #204]	@ (800068c <HD44780_Init+0xec>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d907      	bls.n	80005d4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80005c4:	4b33      	ldr	r3, [pc, #204]	@ (8000694 <HD44780_Init+0xf4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	f043 0308 	orr.w	r3, r3, #8
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b31      	ldr	r3, [pc, #196]	@ (8000694 <HD44780_Init+0xf4>)
 80005d0:	701a      	strb	r2, [r3, #0]
 80005d2:	e006      	b.n	80005e2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80005d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000694 <HD44780_Init+0xf4>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	f043 0304 	orr.w	r3, r3, #4
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	4b2d      	ldr	r3, [pc, #180]	@ (8000694 <HD44780_Init+0xf4>)
 80005e0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80005e2:	f000 f985 	bl	80008f0 <DelayInit>
  HAL_Delay(50);
 80005e6:	2032      	movs	r0, #50	@ 0x32
 80005e8:	f001 f9e8 	bl	80019bc <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80005ec:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <HD44780_Init+0xf0>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 f943 	bl	800087c <ExpanderWrite>
  HAL_Delay(1000);
 80005f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005fa:	f001 f9df 	bl	80019bc <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80005fe:	2030      	movs	r0, #48	@ 0x30
 8000600:	f000 f92b 	bl	800085a <Write4Bits>
  DelayUS(4500);
 8000604:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000608:	f000 f99c 	bl	8000944 <DelayUS>

  Write4Bits(0x03 << 4);
 800060c:	2030      	movs	r0, #48	@ 0x30
 800060e:	f000 f924 	bl	800085a <Write4Bits>
  DelayUS(4500);
 8000612:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000616:	f000 f995 	bl	8000944 <DelayUS>

  Write4Bits(0x03 << 4);
 800061a:	2030      	movs	r0, #48	@ 0x30
 800061c:	f000 f91d 	bl	800085a <Write4Bits>
  DelayUS(4500);
 8000620:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000624:	f000 f98e 	bl	8000944 <DelayUS>

  Write4Bits(0x02 << 4);
 8000628:	2020      	movs	r0, #32
 800062a:	f000 f916 	bl	800085a <Write4Bits>
  DelayUS(100);
 800062e:	2064      	movs	r0, #100	@ 0x64
 8000630:	f000 f988 	bl	8000944 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000634:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <HD44780_Init+0xf4>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	f043 0320 	orr.w	r3, r3, #32
 800063c:	b2db      	uxtb	r3, r3
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f8ce 	bl	80007e0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000644:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <HD44780_Init+0xf8>)
 8000646:	2204      	movs	r2, #4
 8000648:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800064a:	f000 f875 	bl	8000738 <HD44780_Display>
  HD44780_Clear();
 800064e:	f000 f82b 	bl	80006a8 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000652:	4b12      	ldr	r3, [pc, #72]	@ (800069c <HD44780_Init+0xfc>)
 8000654:	2202      	movs	r2, #2
 8000656:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000658:	4b10      	ldr	r3, [pc, #64]	@ (800069c <HD44780_Init+0xfc>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	f043 0304 	orr.w	r3, r3, #4
 8000660:	b2db      	uxtb	r3, r3
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f8bc 	bl	80007e0 <SendCommand>
  DelayUS(4500);
 8000668:	f241 1094 	movw	r0, #4500	@ 0x1194
 800066c:	f000 f96a 	bl	8000944 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000670:	490b      	ldr	r1, [pc, #44]	@ (80006a0 <HD44780_Init+0x100>)
 8000672:	2000      	movs	r0, #0
 8000674:	f000 f876 	bl	8000764 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000678:	490a      	ldr	r1, [pc, #40]	@ (80006a4 <HD44780_Init+0x104>)
 800067a:	2001      	movs	r0, #1
 800067c:	f000 f872 	bl	8000764 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000680:	f000 f81d 	bl	80006be <HD44780_Home>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000097 	.word	0x20000097
 8000690:	20000098 	.word	0x20000098
 8000694:	20000094 	.word	0x20000094
 8000698:	20000095 	.word	0x20000095
 800069c:	20000096 	.word	0x20000096
 80006a0:	20000000 	.word	0x20000000
 80006a4:	20000008 	.word	0x20000008

080006a8 <HD44780_Clear>:

void HD44780_Clear()
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f000 f897 	bl	80007e0 <SendCommand>
  DelayUS(2000);
 80006b2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006b6:	f000 f945 	bl	8000944 <DelayUS>
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}

080006be <HD44780_Home>:

void HD44780_Home()
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80006c2:	2002      	movs	r0, #2
 80006c4:	f000 f88c 	bl	80007e0 <SendCommand>
  DelayUS(2000);
 80006c8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006cc:	f000 f93a 	bl	8000944 <DelayUS>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b087      	sub	sp, #28
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <HD44780_SetCursor+0x5c>)
 80006e6:	f107 0408 	add.w	r4, r7, #8
 80006ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80006f0:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <HD44780_SetCursor+0x60>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	79ba      	ldrb	r2, [r7, #6]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d303      	bcc.n	8000702 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <HD44780_SetCursor+0x60>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	3b01      	subs	r3, #1
 8000700:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	3318      	adds	r3, #24
 8000708:	443b      	add	r3, r7
 800070a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	4413      	add	r3, r2
 8000714:	b2db      	uxtb	r3, r3
 8000716:	b25b      	sxtb	r3, r3
 8000718:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800071c:	b25b      	sxtb	r3, r3
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4618      	mov	r0, r3
 8000722:	f000 f85d 	bl	80007e0 <SendCommand>
}
 8000726:	bf00      	nop
 8000728:	371c      	adds	r7, #28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd90      	pop	{r4, r7, pc}
 800072e:	bf00      	nop
 8000730:	080066f8 	.word	0x080066f8
 8000734:	20000097 	.word	0x20000097

08000738 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <HD44780_Display+0x28>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <HD44780_Display+0x28>)
 8000748:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800074a:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <HD44780_Display+0x28>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	f043 0308 	orr.w	r3, r3, #8
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f843 	bl	80007e0 <SendCommand>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000095 	.word	0x20000095

08000764 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	6039      	str	r1, [r7, #0]
 800076e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	f003 0307 	and.w	r3, r3, #7
 8000776:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	b25b      	sxtb	r3, r3
 800077e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000782:	b25b      	sxtb	r3, r3
 8000784:	b2db      	uxtb	r3, r3
 8000786:	4618      	mov	r0, r3
 8000788:	f000 f82a 	bl	80007e0 <SendCommand>
  for (int i=0; i<8; i++)
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	e009      	b.n	80007a6 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	683a      	ldr	r2, [r7, #0]
 8000796:	4413      	add	r3, r2
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f82e 	bl	80007fc <SendChar>
  for (int i=0; i<8; i++)
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	3301      	adds	r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	2b07      	cmp	r3, #7
 80007aa:	ddf2      	ble.n	8000792 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80007ac:	bf00      	nop
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80007be:	e006      	b.n	80007ce <HD44780_PrintStr+0x18>
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	607a      	str	r2, [r7, #4]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 f817 	bl	80007fc <SendChar>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d1f4      	bne.n	80007c0 <HD44780_PrintStr+0xa>
}
 80007d6:	bf00      	nop
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f812 	bl	8000818 <Send>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <SendChar>:

static void SendChar(uint8_t ch)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	2101      	movs	r1, #1
 800080a:	4618      	mov	r0, r3
 800080c:	f000 f804 	bl	8000818 <Send>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	460a      	mov	r2, r1
 8000822:	71fb      	strb	r3, [r7, #7]
 8000824:	4613      	mov	r3, r2
 8000826:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	f023 030f 	bic.w	r3, r3, #15
 800082e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	011b      	lsls	r3, r3, #4
 8000834:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000836:	7bfa      	ldrb	r2, [r7, #15]
 8000838:	79bb      	ldrb	r3, [r7, #6]
 800083a:	4313      	orrs	r3, r2
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f80b 	bl	800085a <Write4Bits>
  Write4Bits((lownib)|mode);
 8000844:	7bba      	ldrb	r2, [r7, #14]
 8000846:	79bb      	ldrb	r3, [r7, #6]
 8000848:	4313      	orrs	r3, r2
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f000 f804 	bl	800085a <Write4Bits>
}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f808 	bl	800087c <ExpanderWrite>
  PulseEnable(value);
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f820 	bl	80008b4 <PulseEnable>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af02      	add	r7, sp, #8
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <ExpanderWrite+0x30>)
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	4313      	orrs	r3, r2
 800088e:	b2db      	uxtb	r3, r3
 8000890:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000892:	f107 020f 	add.w	r2, r7, #15
 8000896:	230a      	movs	r3, #10
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2301      	movs	r3, #1
 800089c:	214e      	movs	r1, #78	@ 0x4e
 800089e:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <ExpanderWrite+0x34>)
 80008a0:	f001 fd36 	bl	8002310 <HAL_I2C_Master_Transmit>
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000098 	.word	0x20000098
 80008b0:	2000009c 	.word	0x2000009c

080008b4 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ffd8 	bl	800087c <ExpanderWrite>
  DelayUS(20);
 80008cc:	2014      	movs	r0, #20
 80008ce:	f000 f839 	bl	8000944 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	f023 0304 	bic.w	r3, r3, #4
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ffce 	bl	800087c <ExpanderWrite>
  DelayUS(20);
 80008e0:	2014      	movs	r0, #20
 80008e2:	f000 f82f 	bl	8000944 <DelayUS>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <DelayInit>:

static void DelayInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80008f4:	4b11      	ldr	r3, [pc, #68]	@ (800093c <DelayInit+0x4c>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	4a10      	ldr	r2, [pc, #64]	@ (800093c <DelayInit+0x4c>)
 80008fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80008fe:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000900:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <DelayInit+0x4c>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	4a0d      	ldr	r2, [pc, #52]	@ (800093c <DelayInit+0x4c>)
 8000906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800090a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800090c:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <DelayInit+0x50>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0b      	ldr	r2, [pc, #44]	@ (8000940 <DelayInit+0x50>)
 8000912:	f023 0301 	bic.w	r3, r3, #1
 8000916:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000918:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <DelayInit+0x50>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a08      	ldr	r2, [pc, #32]	@ (8000940 <DelayInit+0x50>)
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <DelayInit+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800092a:	bf00      	nop
  __ASM volatile ("NOP");
 800092c:	bf00      	nop
  __ASM volatile ("NOP");
 800092e:	bf00      	nop
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000edf0 	.word	0xe000edf0
 8000940:	e0001000 	.word	0xe0001000

08000944 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800094c:	4b0e      	ldr	r3, [pc, #56]	@ (8000988 <DelayUS+0x44>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a0e      	ldr	r2, [pc, #56]	@ (800098c <DelayUS+0x48>)
 8000952:	fba2 2303 	umull	r2, r3, r2, r3
 8000956:	0c9a      	lsrs	r2, r3, #18
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	fb02 f303 	mul.w	r3, r2, r3
 800095e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000960:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <DelayUS+0x4c>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000966:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <DelayUS+0x4c>)
 8000968:	685a      	ldr	r2, [r3, #4]
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	429a      	cmp	r2, r3
 8000976:	d8f6      	bhi.n	8000966 <DelayUS+0x22>
}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	371c      	adds	r7, #28
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000010 	.word	0x20000010
 800098c:	431bde83 	.word	0x431bde83
 8000990:	e0001000 	.word	0xe0001000

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000998:	f000 ff9e 	bl	80018d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099c:	f000 f85c 	bl	8000a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a0:	f000 fa2c 	bl	8000dfc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009a4:	f000 f9d6 	bl	8000d54 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80009a8:	f000 f9fe 	bl	8000da8 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 80009ac:	f000 f8ec 	bl	8000b88 <MX_TIM2_Init>
  MX_I2C1_Init();
 80009b0:	f000 f8bc 	bl	8000b2c <MX_I2C1_Init>
  MX_TIM4_Init();
 80009b4:	f000 f974 	bl	8000ca0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx2char,1);
 80009b8:	2201      	movs	r2, #1
 80009ba:	491c      	ldr	r1, [pc, #112]	@ (8000a2c <main+0x98>)
 80009bc:	481c      	ldr	r0, [pc, #112]	@ (8000a30 <main+0x9c>)
 80009be:	f003 fcc8 	bl	8004352 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &btchar,1);
 80009c2:	2201      	movs	r2, #1
 80009c4:	491b      	ldr	r1, [pc, #108]	@ (8000a34 <main+0xa0>)
 80009c6:	481c      	ldr	r0, [pc, #112]	@ (8000a38 <main+0xa4>)
 80009c8:	f003 fcc3 	bl	8004352 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80009cc:	2100      	movs	r1, #0
 80009ce:	481b      	ldr	r0, [pc, #108]	@ (8000a3c <main+0xa8>)
 80009d0:	f002 fd2e 	bl	8003430 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80009d4:	2104      	movs	r1, #4
 80009d6:	4819      	ldr	r0, [pc, #100]	@ (8000a3c <main+0xa8>)
 80009d8:	f002 fd2a 	bl	8003430 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80009dc:	2108      	movs	r1, #8
 80009de:	4817      	ldr	r0, [pc, #92]	@ (8000a3c <main+0xa8>)
 80009e0:	f002 fd26 	bl	8003430 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80009e4:	2104      	movs	r1, #4
 80009e6:	4816      	ldr	r0, [pc, #88]	@ (8000a40 <main+0xac>)
 80009e8:	f002 fd22 	bl	8003430 <HAL_TIM_PWM_Start>
  printf("start main2()\r\n");
 80009ec:	4815      	ldr	r0, [pc, #84]	@ (8000a44 <main+0xb0>)
 80009ee:	f004 fd55 	bl	800549c <puts>
  HD44780_Init(2);
 80009f2:	2002      	movs	r0, #2
 80009f4:	f7ff fdd4 	bl	80005a0 <HD44780_Init>
  HD44780_Clear();
 80009f8:	f7ff fe56 	bl	80006a8 <HD44780_Clear>
  while (1)
    {

    	if(rx2Flag)
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <main+0xb4>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d006      	beq.n	8000a14 <main+0x80>
    	  		  {
				printf("recv2 : %s\r\n",rx2Data);
 8000a06:	4911      	ldr	r1, [pc, #68]	@ (8000a4c <main+0xb8>)
 8000a08:	4811      	ldr	r0, [pc, #68]	@ (8000a50 <main+0xbc>)
 8000a0a:	f004 fcdf 	bl	80053cc <iprintf>
				rx2Flag =0;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <main+0xb4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
		//	    HAL_UART_Transmit(&huart6, (uint8_t *)buf, strlen(buf), 0xFFFF);
			}
			if(btFlag)
 8000a14:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <main+0xc0>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0ee      	beq.n	80009fc <main+0x68>
			{
	//		printf("bt : %s\r\n",btData);
				btFlag =0;
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <main+0xc0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
				bluetooth_Event();
 8000a24:	f000 fa58 	bl	8000ed8 <bluetooth_Event>
    	if(rx2Flag)
 8000a28:	e7e8      	b.n	80009fc <main+0x68>
 8000a2a:	bf00      	nop
 8000a2c:	20000210 	.word	0x20000210
 8000a30:	20000180 	.word	0x20000180
 8000a34:	20000247 	.word	0x20000247
 8000a38:	200001c8 	.word	0x200001c8
 8000a3c:	200000f0 	.word	0x200000f0
 8000a40:	20000138 	.word	0x20000138
 8000a44:	08006708 	.word	0x08006708
 8000a48:	20000211 	.word	0x20000211
 8000a4c:	20000214 	.word	0x20000214
 8000a50:	08006718 	.word	0x08006718
 8000a54:	20000246 	.word	0x20000246

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b094      	sub	sp, #80	@ 0x50
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 0320 	add.w	r3, r7, #32
 8000a62:	2230      	movs	r2, #48	@ 0x30
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f004 fe18 	bl	800569c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	4b28      	ldr	r3, [pc, #160]	@ (8000b24 <SystemClock_Config+0xcc>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a84:	4a27      	ldr	r2, [pc, #156]	@ (8000b24 <SystemClock_Config+0xcc>)
 8000a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8c:	4b25      	ldr	r3, [pc, #148]	@ (8000b24 <SystemClock_Config+0xcc>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	4b22      	ldr	r3, [pc, #136]	@ (8000b28 <SystemClock_Config+0xd0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a21      	ldr	r2, [pc, #132]	@ (8000b28 <SystemClock_Config+0xd0>)
 8000aa2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <SystemClock_Config+0xd0>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ab8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000acc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ad0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ada:	f107 0320 	add.w	r3, r7, #32
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 ff70 	bl	80029c4 <HAL_RCC_OscConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000aea:	f000 fbdb 	bl	80012a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aee:	230f      	movs	r3, #15
 8000af0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af2:	2302      	movs	r3, #2
 8000af4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000afa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000afe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2102      	movs	r1, #2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 f9d2 	bl	8002eb4 <HAL_RCC_ClockConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b16:	f000 fbc5 	bl	80012a4 <Error_Handler>
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3750      	adds	r7, #80	@ 0x50
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40007000 	.word	0x40007000

08000b2c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b30:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b32:	4a13      	ldr	r2, [pc, #76]	@ (8000b80 <MX_I2C1_Init+0x54>)
 8000b34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b38:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <MX_I2C1_Init+0x58>)
 8000b3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b50:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b68:	4804      	ldr	r0, [pc, #16]	@ (8000b7c <MX_I2C1_Init+0x50>)
 8000b6a:	f001 fa8d 	bl	8002088 <HAL_I2C_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b74:	f000 fb96 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	2000009c 	.word	0x2000009c
 8000b80:	40005400 	.word	0x40005400
 8000b84:	000186a0 	.word	0x000186a0

08000b88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08e      	sub	sp, #56	@ 0x38
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9c:	f107 0320 	add.w	r3, r7, #32
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
 8000bb4:	615a      	str	r2, [r3, #20]
 8000bb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb8:	4b38      	ldr	r3, [pc, #224]	@ (8000c9c <MX_TIM2_Init+0x114>)
 8000bba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000bc0:	4b36      	ldr	r3, [pc, #216]	@ (8000c9c <MX_TIM2_Init+0x114>)
 8000bc2:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000bc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b34      	ldr	r3, [pc, #208]	@ (8000c9c <MX_TIM2_Init+0x114>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000bce:	4b33      	ldr	r3, [pc, #204]	@ (8000c9c <MX_TIM2_Init+0x114>)
 8000bd0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd6:	4b31      	ldr	r3, [pc, #196]	@ (8000c9c <MX_TIM2_Init+0x114>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8000c9c <MX_TIM2_Init+0x114>)
 8000bde:	2280      	movs	r2, #128	@ 0x80
 8000be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be2:	482e      	ldr	r0, [pc, #184]	@ (8000c9c <MX_TIM2_Init+0x114>)
 8000be4:	f002 fb86 	bl	80032f4 <HAL_TIM_Base_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000bee:	f000 fb59 	bl	80012a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4827      	ldr	r0, [pc, #156]	@ (8000c9c <MX_TIM2_Init+0x114>)
 8000c00:	f002 fe78 	bl	80038f4 <HAL_TIM_ConfigClockSource>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c0a:	f000 fb4b 	bl	80012a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c0e:	4823      	ldr	r0, [pc, #140]	@ (8000c9c <MX_TIM2_Init+0x114>)
 8000c10:	f002 fbbf 	bl	8003392 <HAL_TIM_PWM_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c1a:	f000 fb43 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481b      	ldr	r0, [pc, #108]	@ (8000c9c <MX_TIM2_Init+0x114>)
 8000c2e:	f003 fa33 	bl	8004098 <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c38:	f000 fb34 	bl	80012a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3c:	2360      	movs	r3, #96	@ 0x60
 8000c3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4619      	mov	r1, r3
 8000c52:	4812      	ldr	r0, [pc, #72]	@ (8000c9c <MX_TIM2_Init+0x114>)
 8000c54:	f002 fd8c 	bl	8003770 <HAL_TIM_PWM_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000c5e:	f000 fb21 	bl	80012a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2204      	movs	r2, #4
 8000c66:	4619      	mov	r1, r3
 8000c68:	480c      	ldr	r0, [pc, #48]	@ (8000c9c <MX_TIM2_Init+0x114>)
 8000c6a:	f002 fd81 	bl	8003770 <HAL_TIM_PWM_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000c74:	f000 fb16 	bl	80012a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4807      	ldr	r0, [pc, #28]	@ (8000c9c <MX_TIM2_Init+0x114>)
 8000c80:	f002 fd76 	bl	8003770 <HAL_TIM_PWM_ConfigChannel>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000c8a:	f000 fb0b 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c8e:	4803      	ldr	r0, [pc, #12]	@ (8000c9c <MX_TIM2_Init+0x114>)
 8000c90:	f000 fbc6 	bl	8001420 <HAL_TIM_MspPostInit>

}
 8000c94:	bf00      	nop
 8000c96:	3738      	adds	r7, #56	@ 0x38
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200000f0 	.word	0x200000f0

08000ca0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca6:	f107 0320 	add.w	r3, r7, #32
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cc2:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <MX_TIM4_Init+0xac>)
 8000cc4:	4a22      	ldr	r2, [pc, #136]	@ (8000d50 <MX_TIM4_Init+0xb0>)
 8000cc6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1680-1;
 8000cc8:	4b20      	ldr	r3, [pc, #128]	@ (8000d4c <MX_TIM4_Init+0xac>)
 8000cca:	f240 628f 	movw	r2, #1679	@ 0x68f
 8000cce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d4c <MX_TIM4_Init+0xac>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d4c <MX_TIM4_Init+0xac>)
 8000cd8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cdc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cde:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <MX_TIM4_Init+0xac>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ce4:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <MX_TIM4_Init+0xac>)
 8000ce6:	2280      	movs	r2, #128	@ 0x80
 8000ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cea:	4818      	ldr	r0, [pc, #96]	@ (8000d4c <MX_TIM4_Init+0xac>)
 8000cec:	f002 fb51 	bl	8003392 <HAL_TIM_PWM_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000cf6:	f000 fad5 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d02:	f107 0320 	add.w	r3, r7, #32
 8000d06:	4619      	mov	r1, r3
 8000d08:	4810      	ldr	r0, [pc, #64]	@ (8000d4c <MX_TIM4_Init+0xac>)
 8000d0a:	f003 f9c5 	bl	8004098 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000d14:	f000 fac6 	bl	80012a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d18:	2360      	movs	r3, #96	@ 0x60
 8000d1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4807      	ldr	r0, [pc, #28]	@ (8000d4c <MX_TIM4_Init+0xac>)
 8000d30:	f002 fd1e 	bl	8003770 <HAL_TIM_PWM_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000d3a:	f000 fab3 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d3e:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <MX_TIM4_Init+0xac>)
 8000d40:	f000 fb6e 	bl	8001420 <HAL_TIM_MspPostInit>

}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	@ 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000138 	.word	0x20000138
 8000d50:	40000800 	.word	0x40000800

08000d54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	@ (8000da4 <MX_USART2_UART_Init+0x50>)
 8000d5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d78:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d8c:	f003 fa06 	bl	800419c <HAL_UART_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d96:	f000 fa85 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000180 	.word	0x20000180
 8000da4:	40004400 	.word	0x40004400

08000da8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <MX_USART6_UART_Init+0x4c>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	@ (8000df8 <MX_USART6_UART_Init+0x50>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000db2:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <MX_USART6_UART_Init+0x4c>)
 8000db4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000db8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <MX_USART6_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <MX_USART6_UART_Init+0x4c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <MX_USART6_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <MX_USART6_UART_Init+0x4c>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <MX_USART6_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <MX_USART6_UART_Init+0x4c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000dde:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <MX_USART6_UART_Init+0x4c>)
 8000de0:	f003 f9dc 	bl	800419c <HAL_UART_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000dea:	f000 fa5b 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200001c8 	.word	0x200001c8
 8000df8:	40011400 	.word	0x40011400

08000dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	@ 0x28
 8000e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	4b2d      	ldr	r3, [pc, #180]	@ (8000ecc <MX_GPIO_Init+0xd0>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8000ecc <MX_GPIO_Init+0xd0>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e22:	4b2a      	ldr	r3, [pc, #168]	@ (8000ecc <MX_GPIO_Init+0xd0>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b26      	ldr	r3, [pc, #152]	@ (8000ecc <MX_GPIO_Init+0xd0>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a25      	ldr	r2, [pc, #148]	@ (8000ecc <MX_GPIO_Init+0xd0>)
 8000e38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b23      	ldr	r3, [pc, #140]	@ (8000ecc <MX_GPIO_Init+0xd0>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ecc <MX_GPIO_Init+0xd0>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a1e      	ldr	r2, [pc, #120]	@ (8000ecc <MX_GPIO_Init+0xd0>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <MX_GPIO_Init+0xd0>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <MX_GPIO_Init+0xd0>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a17      	ldr	r2, [pc, #92]	@ (8000ecc <MX_GPIO_Init+0xd0>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <MX_GPIO_Init+0xd0>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2120      	movs	r1, #32
 8000e86:	4812      	ldr	r0, [pc, #72]	@ (8000ed0 <MX_GPIO_Init+0xd4>)
 8000e88:	f001 f8e4 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e92:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480c      	ldr	r0, [pc, #48]	@ (8000ed4 <MX_GPIO_Init+0xd8>)
 8000ea4:	f000 ff52 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ea8:	2320      	movs	r3, #32
 8000eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4804      	ldr	r0, [pc, #16]	@ (8000ed0 <MX_GPIO_Init+0xd4>)
 8000ec0:	f000 ff44 	bl	8001d4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	@ 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000
 8000ed4:	40020800 	.word	0x40020800

08000ed8 <bluetooth_Event>:
void MX_GPIO_LED_OFF(int pin)
{
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
}
void bluetooth_Event()
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b0a4      	sub	sp, #144	@ 0x90
 8000edc:	af02      	add	r7, sp, #8
  int i=0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8000ee4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  char recvBuf[CMD_SIZE]={0};
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000ef8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000efc:	222e      	movs	r2, #46	@ 0x2e
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f004 fbcb 	bl	800569c <memset>
  char sendBuf[CMD_SIZE]={0};
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	222e      	movs	r2, #46	@ 0x2e
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f004 fbc2 	bl	800569c <memset>
  strcpy(recvBuf,btData);
 8000f18:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f1c:	497b      	ldr	r1, [pc, #492]	@ (800110c <bluetooth_Event+0x234>)
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f004 fc93 	bl	800584a <strcpy>

  printf("btData : %s\r\n",btData);
 8000f24:	4979      	ldr	r1, [pc, #484]	@ (800110c <bluetooth_Event+0x234>)
 8000f26:	487a      	ldr	r0, [pc, #488]	@ (8001110 <bluetooth_Event+0x238>)
 8000f28:	f004 fa50 	bl	80053cc <iprintf>

  pToken = strtok(recvBuf,"[@]");
 8000f2c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f30:	4978      	ldr	r1, [pc, #480]	@ (8001114 <bluetooth_Event+0x23c>)
 8000f32:	4618      	mov	r0, r3
 8000f34:	f004 fbba 	bl	80056ac <strtok>
 8000f38:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 8000f3c:	e017      	b.n	8000f6e <bluetooth_Event+0x96>
  {
    pArray[i] =  pToken;
 8000f3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	3388      	adds	r3, #136	@ 0x88
 8000f46:	443b      	add	r3, r7
 8000f48:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000f4c:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 8000f50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f54:	3301      	adds	r3, #1
 8000f56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000f5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	dc0a      	bgt.n	8000f78 <bluetooth_Event+0xa0>
      break;
    pToken = strtok(NULL,"[@]");
 8000f62:	496c      	ldr	r1, [pc, #432]	@ (8001114 <bluetooth_Event+0x23c>)
 8000f64:	2000      	movs	r0, #0
 8000f66:	f004 fba1 	bl	80056ac <strtok>
 8000f6a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 8000f6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1e3      	bne.n	8000f3e <bluetooth_Event+0x66>
 8000f76:	e000      	b.n	8000f7a <bluetooth_Event+0xa2>
      break;
 8000f78:	bf00      	nop
  }

  if(!strcmp(pArray[1],"RED"))
 8000f7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f7c:	4966      	ldr	r1, [pc, #408]	@ (8001118 <bluetooth_Event+0x240>)
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff f92e 	bl	80001e0 <strcmp>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d12c      	bne.n	8000fe4 <bluetooth_Event+0x10c>
  {
  	if(!strcmp(pArray[2],"ON"))
 8000f8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f8c:	4963      	ldr	r1, [pc, #396]	@ (800111c <bluetooth_Event+0x244>)
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff f926 	bl	80001e0 <strcmp>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d116      	bne.n	8000fc8 <bluetooth_Event+0xf0>
		{
  		Set_RGB_Color(255,0,0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	20ff      	movs	r0, #255	@ 0xff
 8000fa0:	f000 f962 	bl	8001268 <Set_RGB_Color>
  		HD44780_Clear();
 8000fa4:	f7ff fb80 	bl	80006a8 <HD44780_Clear>
  		HD44780_SetCursor(0,0);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2000      	movs	r0, #0
 8000fac:	f7ff fb92 	bl	80006d4 <HD44780_SetCursor>
  		HD44780_PrintStr("WARNING!!!");
 8000fb0:	485b      	ldr	r0, [pc, #364]	@ (8001120 <bluetooth_Event+0x248>)
 8000fb2:	f7ff fc00 	bl	80007b6 <HD44780_PrintStr>
  		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 100);
 8000fb6:	4b5b      	ldr	r3, [pc, #364]	@ (8001124 <bluetooth_Event+0x24c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2264      	movs	r2, #100	@ 0x64
 8000fbc:	639a      	str	r2, [r3, #56]	@ 0x38
  		HAL_Delay(1000);
 8000fbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fc2:	f000 fcfb 	bl	80019bc <HAL_Delay>
 8000fc6:	e087      	b.n	80010d8 <bluetooth_Event+0x200>
		}
		else if(!strcmp(pArray[2],"OFF"))
 8000fc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fca:	4957      	ldr	r1, [pc, #348]	@ (8001128 <bluetooth_Event+0x250>)
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff f907 	bl	80001e0 <strcmp>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d17f      	bne.n	80010d8 <bluetooth_Event+0x200>
		{
			Set_RGB_Color(0,0,0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f000 f943 	bl	8001268 <Set_RGB_Color>
 8000fe2:	e079      	b.n	80010d8 <bluetooth_Event+0x200>
		}
  }
  else if(!strcmp(pArray[1],"YELLOW"))
 8000fe4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fe6:	4951      	ldr	r1, [pc, #324]	@ (800112c <bluetooth_Event+0x254>)
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff f8f9 	bl	80001e0 <strcmp>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d12c      	bne.n	800104e <bluetooth_Event+0x176>
    {
    	if(!strcmp(pArray[2],"ON"))
 8000ff4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ff6:	4949      	ldr	r1, [pc, #292]	@ (800111c <bluetooth_Event+0x244>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff f8f1 	bl	80001e0 <strcmp>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d116      	bne.n	8001032 <bluetooth_Event+0x15a>
  		{
    		Set_RGB_Color(255,50,0);
 8001004:	2200      	movs	r2, #0
 8001006:	2132      	movs	r1, #50	@ 0x32
 8001008:	20ff      	movs	r0, #255	@ 0xff
 800100a:	f000 f92d 	bl	8001268 <Set_RGB_Color>
    		HD44780_Clear();
 800100e:	f7ff fb4b 	bl	80006a8 <HD44780_Clear>
    		HD44780_SetCursor(0,0);
 8001012:	2100      	movs	r1, #0
 8001014:	2000      	movs	r0, #0
 8001016:	f7ff fb5d 	bl	80006d4 <HD44780_SetCursor>
    		HD44780_PrintStr("So So");
 800101a:	4845      	ldr	r0, [pc, #276]	@ (8001130 <bluetooth_Event+0x258>)
 800101c:	f7ff fbcb 	bl	80007b6 <HD44780_PrintStr>
    		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 75);
 8001020:	4b40      	ldr	r3, [pc, #256]	@ (8001124 <bluetooth_Event+0x24c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	224b      	movs	r2, #75	@ 0x4b
 8001026:	639a      	str	r2, [r3, #56]	@ 0x38
    		HAL_Delay(1000);
 8001028:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800102c:	f000 fcc6 	bl	80019bc <HAL_Delay>
 8001030:	e052      	b.n	80010d8 <bluetooth_Event+0x200>
  		}
  		else if(!strcmp(pArray[2],"OFF"))
 8001032:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001034:	493c      	ldr	r1, [pc, #240]	@ (8001128 <bluetooth_Event+0x250>)
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff f8d2 	bl	80001e0 <strcmp>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d14a      	bne.n	80010d8 <bluetooth_Event+0x200>
  		{
  			Set_RGB_Color(0,0,0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	2000      	movs	r0, #0
 8001048:	f000 f90e 	bl	8001268 <Set_RGB_Color>
 800104c:	e044      	b.n	80010d8 <bluetooth_Event+0x200>
  		}
    }
  else if(!strcmp(pArray[1],"GREEN"))
 800104e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001050:	4938      	ldr	r1, [pc, #224]	@ (8001134 <bluetooth_Event+0x25c>)
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff f8c4 	bl	80001e0 <strcmp>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d12c      	bne.n	80010b8 <bluetooth_Event+0x1e0>
      {
      	if(!strcmp(pArray[2],"ON"))
 800105e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001060:	492e      	ldr	r1, [pc, #184]	@ (800111c <bluetooth_Event+0x244>)
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff f8bc 	bl	80001e0 <strcmp>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d116      	bne.n	800109c <bluetooth_Event+0x1c4>
    		{
      		Set_RGB_Color(0,0,255);
 800106e:	22ff      	movs	r2, #255	@ 0xff
 8001070:	2100      	movs	r1, #0
 8001072:	2000      	movs	r0, #0
 8001074:	f000 f8f8 	bl	8001268 <Set_RGB_Color>
      		HD44780_Clear();
 8001078:	f7ff fb16 	bl	80006a8 <HD44780_Clear>
      		HD44780_SetCursor(0,0);
 800107c:	2100      	movs	r1, #0
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff fb28 	bl	80006d4 <HD44780_SetCursor>
      		HD44780_PrintStr("GOOD");
 8001084:	482c      	ldr	r0, [pc, #176]	@ (8001138 <bluetooth_Event+0x260>)
 8001086:	f7ff fb96 	bl	80007b6 <HD44780_PrintStr>
      		__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, 50);
 800108a:	4b26      	ldr	r3, [pc, #152]	@ (8001124 <bluetooth_Event+0x24c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2232      	movs	r2, #50	@ 0x32
 8001090:	639a      	str	r2, [r3, #56]	@ 0x38
      		HAL_Delay(1000);
 8001092:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001096:	f000 fc91 	bl	80019bc <HAL_Delay>
 800109a:	e01d      	b.n	80010d8 <bluetooth_Event+0x200>
    		}
    		else if(!strcmp(pArray[2],"OFF"))
 800109c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800109e:	4922      	ldr	r1, [pc, #136]	@ (8001128 <bluetooth_Event+0x250>)
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f89d 	bl	80001e0 <strcmp>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d115      	bne.n	80010d8 <bluetooth_Event+0x200>
    		{
    			Set_RGB_Color(0,0,0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	2000      	movs	r0, #0
 80010b2:	f000 f8d9 	bl	8001268 <Set_RGB_Color>
 80010b6:	e00f      	b.n	80010d8 <bluetooth_Event+0x200>
    		}
      }
  else if(!strncmp(pArray[1]," New conn",sizeof(" New conn")))
 80010b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010ba:	4920      	ldr	r1, [pc, #128]	@ (800113c <bluetooth_Event+0x264>)
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f88f 	bl	80001e0 <strcmp>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d01d      	beq.n	8001104 <bluetooth_Event+0x22c>
  {
      return;
  }
  else if(!strncmp(pArray[1]," Already log",sizeof(" Already log")))
 80010c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80010ca:	491d      	ldr	r1, [pc, #116]	@ (8001140 <bluetooth_Event+0x268>)
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff f887 	bl	80001e0 <strcmp>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
  {
      return;
  }
  else
      return;
 80010d6:	e016      	b.n	8001106 <bluetooth_Event+0x22e>

  sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 80010d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80010da:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80010dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80010de:	1d38      	adds	r0, r7, #4
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	460b      	mov	r3, r1
 80010e4:	4917      	ldr	r1, [pc, #92]	@ (8001144 <bluetooth_Event+0x26c>)
 80010e6:	f004 f9e1 	bl	80054ac <siprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), 0xFFFF);
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f881 	bl	80001f4 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	1d39      	adds	r1, r7, #4
 80010f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010fc:	4812      	ldr	r0, [pc, #72]	@ (8001148 <bluetooth_Event+0x270>)
 80010fe:	f003 f89d 	bl	800423c <HAL_UART_Transmit>
 8001102:	e000      	b.n	8001106 <bluetooth_Event+0x22e>
      return;
 8001104:	bf00      	nop

}
 8001106:	3788      	adds	r7, #136	@ 0x88
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000248 	.word	0x20000248
 8001110:	08006728 	.word	0x08006728
 8001114:	08006738 	.word	0x08006738
 8001118:	0800673c 	.word	0x0800673c
 800111c:	08006740 	.word	0x08006740
 8001120:	08006744 	.word	0x08006744
 8001124:	20000138 	.word	0x20000138
 8001128:	08006750 	.word	0x08006750
 800112c:	08006754 	.word	0x08006754
 8001130:	0800675c 	.word	0x0800675c
 8001134:	08006764 	.word	0x08006764
 8001138:	0800676c 	.word	0x0800676c
 800113c:	08006774 	.word	0x08006774
 8001140:	08006780 	.word	0x08006780
 8001144:	08006790 	.word	0x08006790
 8001148:	200001c8 	.word	0x200001c8

0800114c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001154:	1d39      	adds	r1, r7, #4
 8001156:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800115a:	2201      	movs	r2, #1
 800115c:	4803      	ldr	r0, [pc, #12]	@ (800116c <__io_putchar+0x20>)
 800115e:	f003 f86d 	bl	800423c <HAL_UART_Transmit>

  return ch;
 8001162:	687b      	ldr	r3, [r7, #4]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000180 	.word	0x20000180

08001170 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a2e      	ldr	r2, [pc, #184]	@ (8001238 <HAL_UART_RxCpltCallback+0xc8>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d128      	bne.n	80011d4 <HAL_UART_RxCpltCallback+0x64>
    {
    	static int i=0;
    	rx2Data[i] = rx2char;
 8001182:	4b2e      	ldr	r3, [pc, #184]	@ (800123c <HAL_UART_RxCpltCallback+0xcc>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a2e      	ldr	r2, [pc, #184]	@ (8001240 <HAL_UART_RxCpltCallback+0xd0>)
 8001188:	7811      	ldrb	r1, [r2, #0]
 800118a:	4a2e      	ldr	r2, [pc, #184]	@ (8001244 <HAL_UART_RxCpltCallback+0xd4>)
 800118c:	54d1      	strb	r1, [r2, r3]
    	if((rx2Data[i] == '\r')||(btData[i] == '\n'))
 800118e:	4b2b      	ldr	r3, [pc, #172]	@ (800123c <HAL_UART_RxCpltCallback+0xcc>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a2c      	ldr	r2, [pc, #176]	@ (8001244 <HAL_UART_RxCpltCallback+0xd4>)
 8001194:	5cd3      	ldrb	r3, [r2, r3]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b0d      	cmp	r3, #13
 800119a:	d005      	beq.n	80011a8 <HAL_UART_RxCpltCallback+0x38>
 800119c:	4b27      	ldr	r3, [pc, #156]	@ (800123c <HAL_UART_RxCpltCallback+0xcc>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a29      	ldr	r2, [pc, #164]	@ (8001248 <HAL_UART_RxCpltCallback+0xd8>)
 80011a2:	5cd3      	ldrb	r3, [r2, r3]
 80011a4:	2b0a      	cmp	r3, #10
 80011a6:	d10b      	bne.n	80011c0 <HAL_UART_RxCpltCallback+0x50>
    	{
    		rx2Data[i] = '\0';
 80011a8:	4b24      	ldr	r3, [pc, #144]	@ (800123c <HAL_UART_RxCpltCallback+0xcc>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a25      	ldr	r2, [pc, #148]	@ (8001244 <HAL_UART_RxCpltCallback+0xd4>)
 80011ae:	2100      	movs	r1, #0
 80011b0:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 80011b2:	4b26      	ldr	r3, [pc, #152]	@ (800124c <HAL_UART_RxCpltCallback+0xdc>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
    		i = 0;
 80011b8:	4b20      	ldr	r3, [pc, #128]	@ (800123c <HAL_UART_RxCpltCallback+0xcc>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	e004      	b.n	80011ca <HAL_UART_RxCpltCallback+0x5a>
    	}
    	else
    	{
    		i++;
 80011c0:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <HAL_UART_RxCpltCallback+0xcc>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	4a1d      	ldr	r2, [pc, #116]	@ (800123c <HAL_UART_RxCpltCallback+0xcc>)
 80011c8:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart2, &rx2char,1);
 80011ca:	2201      	movs	r2, #1
 80011cc:	491c      	ldr	r1, [pc, #112]	@ (8001240 <HAL_UART_RxCpltCallback+0xd0>)
 80011ce:	4820      	ldr	r0, [pc, #128]	@ (8001250 <HAL_UART_RxCpltCallback+0xe0>)
 80011d0:	f003 f8bf 	bl	8004352 <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART6)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001254 <HAL_UART_RxCpltCallback+0xe4>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d127      	bne.n	800122e <HAL_UART_RxCpltCallback+0xbe>
    {
    	static int i=0;
    	btData[i] = btchar;
 80011de:	4b1e      	ldr	r3, [pc, #120]	@ (8001258 <HAL_UART_RxCpltCallback+0xe8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a1e      	ldr	r2, [pc, #120]	@ (800125c <HAL_UART_RxCpltCallback+0xec>)
 80011e4:	7811      	ldrb	r1, [r2, #0]
 80011e6:	4a18      	ldr	r2, [pc, #96]	@ (8001248 <HAL_UART_RxCpltCallback+0xd8>)
 80011e8:	54d1      	strb	r1, [r2, r3]
    	if((btData[i] == '\n') || btData[i] == '\r')
 80011ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <HAL_UART_RxCpltCallback+0xe8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a16      	ldr	r2, [pc, #88]	@ (8001248 <HAL_UART_RxCpltCallback+0xd8>)
 80011f0:	5cd3      	ldrb	r3, [r2, r3]
 80011f2:	2b0a      	cmp	r3, #10
 80011f4:	d005      	beq.n	8001202 <HAL_UART_RxCpltCallback+0x92>
 80011f6:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <HAL_UART_RxCpltCallback+0xe8>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a13      	ldr	r2, [pc, #76]	@ (8001248 <HAL_UART_RxCpltCallback+0xd8>)
 80011fc:	5cd3      	ldrb	r3, [r2, r3]
 80011fe:	2b0d      	cmp	r3, #13
 8001200:	d10b      	bne.n	800121a <HAL_UART_RxCpltCallback+0xaa>
    	{
    		btData[i] = '\0';
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HAL_UART_RxCpltCallback+0xe8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a10      	ldr	r2, [pc, #64]	@ (8001248 <HAL_UART_RxCpltCallback+0xd8>)
 8001208:	2100      	movs	r1, #0
 800120a:	54d1      	strb	r1, [r2, r3]
    		btFlag = 1;
 800120c:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <HAL_UART_RxCpltCallback+0xf0>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8001212:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <HAL_UART_RxCpltCallback+0xe8>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	e004      	b.n	8001224 <HAL_UART_RxCpltCallback+0xb4>
    	}
    	else
    	{
    		i++;
 800121a:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <HAL_UART_RxCpltCallback+0xe8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	4a0d      	ldr	r2, [pc, #52]	@ (8001258 <HAL_UART_RxCpltCallback+0xe8>)
 8001222:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart6, &btchar,1);
 8001224:	2201      	movs	r2, #1
 8001226:	490d      	ldr	r1, [pc, #52]	@ (800125c <HAL_UART_RxCpltCallback+0xec>)
 8001228:	480e      	ldr	r0, [pc, #56]	@ (8001264 <HAL_UART_RxCpltCallback+0xf4>)
 800122a:	f003 f892 	bl	8004352 <HAL_UART_Receive_IT>
    }
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40004400 	.word	0x40004400
 800123c:	2000027c 	.word	0x2000027c
 8001240:	20000210 	.word	0x20000210
 8001244:	20000214 	.word	0x20000214
 8001248:	20000248 	.word	0x20000248
 800124c:	20000211 	.word	0x20000211
 8001250:	20000180 	.word	0x20000180
 8001254:	40011400 	.word	0x40011400
 8001258:	20000280 	.word	0x20000280
 800125c:	20000247 	.word	0x20000247
 8001260:	20000246 	.word	0x20000246
 8001264:	200001c8 	.word	0x200001c8

08001268 <Set_RGB_Color>:

void Set_RGB_Color(uint8_t red, uint8_t green, uint8_t blue) {
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
 8001272:	460b      	mov	r3, r1
 8001274:	71bb      	strb	r3, [r7, #6]
 8001276:	4613      	mov	r3, r2
 8001278:	717b      	strb	r3, [r7, #5]
    // red, green, blue 값�? 0-255 범위
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, red);
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <Set_RGB_Color+0x38>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	79fa      	ldrb	r2, [r7, #7]
 8001280:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, green);
 8001282:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <Set_RGB_Color+0x38>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	79ba      	ldrb	r2, [r7, #6]
 8001288:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, blue);
 800128a:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <Set_RGB_Color+0x38>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	797a      	ldrb	r2, [r7, #5]
 8001290:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	200000f0 	.word	0x200000f0

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <Error_Handler+0x8>

080012b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <HAL_MspInit+0x4c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012be:	4a0f      	ldr	r2, [pc, #60]	@ (80012fc <HAL_MspInit+0x4c>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <HAL_MspInit+0x4c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <HAL_MspInit+0x4c>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	4a08      	ldr	r2, [pc, #32]	@ (80012fc <HAL_MspInit+0x4c>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e2:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <HAL_MspInit+0x4c>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012ee:	2007      	movs	r0, #7
 80012f0:	f000 fc58 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800

08001300 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a19      	ldr	r2, [pc, #100]	@ (8001384 <HAL_I2C_MspInit+0x84>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d12c      	bne.n	800137c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <HAL_I2C_MspInit+0x88>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a17      	ldr	r2, [pc, #92]	@ (8001388 <HAL_I2C_MspInit+0x88>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <HAL_I2C_MspInit+0x88>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800133e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001344:	2312      	movs	r3, #18
 8001346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001350:	2304      	movs	r3, #4
 8001352:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	480c      	ldr	r0, [pc, #48]	@ (800138c <HAL_I2C_MspInit+0x8c>)
 800135c:	f000 fcf6 	bl	8001d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <HAL_I2C_MspInit+0x88>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	4a07      	ldr	r2, [pc, #28]	@ (8001388 <HAL_I2C_MspInit+0x88>)
 800136a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800136e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001370:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <HAL_I2C_MspInit+0x88>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800137c:	bf00      	nop
 800137e:	3728      	adds	r7, #40	@ 0x28
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40005400 	.word	0x40005400
 8001388:	40023800 	.word	0x40023800
 800138c:	40020400 	.word	0x40020400

08001390 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013a0:	d10d      	bne.n	80013be <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <HAL_TIM_Base_MspInit+0x3c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013aa:	4a08      	ldr	r2, [pc, #32]	@ (80013cc <HAL_TIM_Base_MspInit+0x3c>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_TIM_Base_MspInit+0x3c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001418 <HAL_TIM_PWM_MspInit+0x48>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d115      	bne.n	800140e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <HAL_TIM_PWM_MspInit+0x4c>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	4a0c      	ldr	r2, [pc, #48]	@ (800141c <HAL_TIM_PWM_MspInit+0x4c>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f2:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <HAL_TIM_PWM_MspInit+0x4c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	201e      	movs	r0, #30
 8001404:	f000 fbd9 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001408:	201e      	movs	r0, #30
 800140a:	f000 fbf2 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40000800 	.word	0x40000800
 800141c:	40023800 	.word	0x40023800

08001420 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	@ 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001440:	d13d      	bne.n	80014be <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b31      	ldr	r3, [pc, #196]	@ (800150c <HAL_TIM_MspPostInit+0xec>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	4a30      	ldr	r2, [pc, #192]	@ (800150c <HAL_TIM_MspPostInit+0xec>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6313      	str	r3, [r2, #48]	@ 0x30
 8001452:	4b2e      	ldr	r3, [pc, #184]	@ (800150c <HAL_TIM_MspPostInit+0xec>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b2a      	ldr	r3, [pc, #168]	@ (800150c <HAL_TIM_MspPostInit+0xec>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	4a29      	ldr	r2, [pc, #164]	@ (800150c <HAL_TIM_MspPostInit+0xec>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	6313      	str	r3, [r2, #48]	@ 0x30
 800146e:	4b27      	ldr	r3, [pc, #156]	@ (800150c <HAL_TIM_MspPostInit+0xec>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800147a:	2303      	movs	r3, #3
 800147c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800148a:	2301      	movs	r3, #1
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	481e      	ldr	r0, [pc, #120]	@ (8001510 <HAL_TIM_MspPostInit+0xf0>)
 8001496:	f000 fc59 	bl	8001d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800149a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014ac:	2301      	movs	r3, #1
 80014ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4619      	mov	r1, r3
 80014b6:	4817      	ldr	r0, [pc, #92]	@ (8001514 <HAL_TIM_MspPostInit+0xf4>)
 80014b8:	f000 fc48 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80014bc:	e022      	b.n	8001504 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a15      	ldr	r2, [pc, #84]	@ (8001518 <HAL_TIM_MspPostInit+0xf8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d11d      	bne.n	8001504 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <HAL_TIM_MspPostInit+0xec>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d0:	4a0e      	ldr	r2, [pc, #56]	@ (800150c <HAL_TIM_MspPostInit+0xec>)
 80014d2:	f043 0302 	orr.w	r3, r3, #2
 80014d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d8:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <HAL_TIM_MspPostInit+0xec>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014e4:	2380      	movs	r3, #128	@ 0x80
 80014e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014f4:	2302      	movs	r3, #2
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	4805      	ldr	r0, [pc, #20]	@ (8001514 <HAL_TIM_MspPostInit+0xf4>)
 8001500:	f000 fc24 	bl	8001d4c <HAL_GPIO_Init>
}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	@ 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40023800 	.word	0x40023800
 8001510:	40020000 	.word	0x40020000
 8001514:	40020400 	.word	0x40020400
 8001518:	40000800 	.word	0x40000800

0800151c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	@ 0x30
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a3a      	ldr	r2, [pc, #232]	@ (8001624 <HAL_UART_MspInit+0x108>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d134      	bne.n	80015a8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	4b39      	ldr	r3, [pc, #228]	@ (8001628 <HAL_UART_MspInit+0x10c>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	4a38      	ldr	r2, [pc, #224]	@ (8001628 <HAL_UART_MspInit+0x10c>)
 8001548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800154c:	6413      	str	r3, [r2, #64]	@ 0x40
 800154e:	4b36      	ldr	r3, [pc, #216]	@ (8001628 <HAL_UART_MspInit+0x10c>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	4b32      	ldr	r3, [pc, #200]	@ (8001628 <HAL_UART_MspInit+0x10c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	4a31      	ldr	r2, [pc, #196]	@ (8001628 <HAL_UART_MspInit+0x10c>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	@ 0x30
 800156a:	4b2f      	ldr	r3, [pc, #188]	@ (8001628 <HAL_UART_MspInit+0x10c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001576:	230c      	movs	r3, #12
 8001578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001586:	2307      	movs	r3, #7
 8001588:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	4826      	ldr	r0, [pc, #152]	@ (800162c <HAL_UART_MspInit+0x110>)
 8001592:	f000 fbdb 	bl	8001d4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	2026      	movs	r0, #38	@ 0x26
 800159c:	f000 fb0d 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015a0:	2026      	movs	r0, #38	@ 0x26
 80015a2:	f000 fb26 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80015a6:	e038      	b.n	800161a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a20      	ldr	r2, [pc, #128]	@ (8001630 <HAL_UART_MspInit+0x114>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d133      	bne.n	800161a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <HAL_UART_MspInit+0x10c>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001628 <HAL_UART_MspInit+0x10c>)
 80015bc:	f043 0320 	orr.w	r3, r3, #32
 80015c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015c2:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <HAL_UART_MspInit+0x10c>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c6:	f003 0320 	and.w	r3, r3, #32
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <HAL_UART_MspInit+0x10c>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	4a14      	ldr	r2, [pc, #80]	@ (8001628 <HAL_UART_MspInit+0x10c>)
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015de:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <HAL_UART_MspInit+0x10c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ea:	23c0      	movs	r3, #192	@ 0xc0
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80015fa:	2308      	movs	r3, #8
 80015fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	4619      	mov	r1, r3
 8001604:	480b      	ldr	r0, [pc, #44]	@ (8001634 <HAL_UART_MspInit+0x118>)
 8001606:	f000 fba1 	bl	8001d4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2047      	movs	r0, #71	@ 0x47
 8001610:	f000 fad3 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001614:	2047      	movs	r0, #71	@ 0x47
 8001616:	f000 faec 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
}
 800161a:	bf00      	nop
 800161c:	3730      	adds	r7, #48	@ 0x30
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40004400 	.word	0x40004400
 8001628:	40023800 	.word	0x40023800
 800162c:	40020000 	.word	0x40020000
 8001630:	40011400 	.word	0x40011400
 8001634:	40020800 	.word	0x40020800

08001638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <NMI_Handler+0x4>

08001640 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <MemManage_Handler+0x4>

08001650 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <UsageFault_Handler+0x4>

08001660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168e:	f000 f975 	bl	800197c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <TIM4_IRQHandler+0x10>)
 800169e:	f001 ff77 	bl	8003590 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000138 	.word	0x20000138

080016ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <USART2_IRQHandler+0x10>)
 80016b2:	f002 fe73 	bl	800439c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000180 	.word	0x20000180

080016c0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80016c4:	4802      	ldr	r0, [pc, #8]	@ (80016d0 <USART6_IRQHandler+0x10>)
 80016c6:	f002 fe69 	bl	800439c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200001c8 	.word	0x200001c8

080016d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return 1;
 80016d8:	2301      	movs	r3, #1
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_kill>:

int _kill(int pid, int sig)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ee:	f004 f87f 	bl	80057f0 <__errno>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2216      	movs	r2, #22
 80016f6:	601a      	str	r2, [r3, #0]
  return -1;
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <_exit>:

void _exit (int status)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ffe7 	bl	80016e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001716:	bf00      	nop
 8001718:	e7fd      	b.n	8001716 <_exit+0x12>

0800171a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	e00a      	b.n	8001742 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800172c:	f3af 8000 	nop.w
 8001730:	4601      	mov	r1, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	60ba      	str	r2, [r7, #8]
 8001738:	b2ca      	uxtb	r2, r1
 800173a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	3301      	adds	r3, #1
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	429a      	cmp	r2, r3
 8001748:	dbf0      	blt.n	800172c <_read+0x12>
  }

  return len;
 800174a:	687b      	ldr	r3, [r7, #4]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	e009      	b.n	800177a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	60ba      	str	r2, [r7, #8]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fcec 	bl	800114c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	3301      	adds	r3, #1
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	429a      	cmp	r2, r3
 8001780:	dbf1      	blt.n	8001766 <_write+0x12>
  }
  return len;
 8001782:	687b      	ldr	r3, [r7, #4]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <_close>:

int _close(int file)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001794:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017b4:	605a      	str	r2, [r3, #4]
  return 0;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <_isatty>:

int _isatty(int file)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017cc:	2301      	movs	r3, #1
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017da:	b480      	push	{r7}
 80017dc:	b085      	sub	sp, #20
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017fc:	4a14      	ldr	r2, [pc, #80]	@ (8001850 <_sbrk+0x5c>)
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <_sbrk+0x60>)
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <_sbrk+0x64>)
 8001812:	4a12      	ldr	r2, [pc, #72]	@ (800185c <_sbrk+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001824:	f003 ffe4 	bl	80057f0 <__errno>
 8001828:	4603      	mov	r3, r0
 800182a:	220c      	movs	r2, #12
 800182c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	e009      	b.n	8001848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183a:	4b07      	ldr	r3, [pc, #28]	@ (8001858 <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	4a05      	ldr	r2, [pc, #20]	@ (8001858 <_sbrk+0x64>)
 8001844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20020000 	.word	0x20020000
 8001854:	00000400 	.word	0x00000400
 8001858:	20000284 	.word	0x20000284
 800185c:	200003d8 	.word	0x200003d8

08001860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001864:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <SystemInit+0x20>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800186a:	4a05      	ldr	r2, [pc, #20]	@ (8001880 <SystemInit+0x20>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001884:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001888:	f7ff ffea 	bl	8001860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800188c:	480c      	ldr	r0, [pc, #48]	@ (80018c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800188e:	490d      	ldr	r1, [pc, #52]	@ (80018c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001890:	4a0d      	ldr	r2, [pc, #52]	@ (80018c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001894:	e002      	b.n	800189c <LoopCopyDataInit>

08001896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189a:	3304      	adds	r3, #4

0800189c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800189c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a0:	d3f9      	bcc.n	8001896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a2:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018a4:	4c0a      	ldr	r4, [pc, #40]	@ (80018d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a8:	e001      	b.n	80018ae <LoopFillZerobss>

080018aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ac:	3204      	adds	r2, #4

080018ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b0:	d3fb      	bcc.n	80018aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b2:	f003 ffa3 	bl	80057fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b6:	f7ff f86d 	bl	8000994 <main>
  bx  lr    
 80018ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80018c8:	080068a4 	.word	0x080068a4
  ldr r2, =_sbss
 80018cc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80018d0:	200003d8 	.word	0x200003d8

080018d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d4:	e7fe      	b.n	80018d4 <ADC_IRQHandler>
	...

080018d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <HAL_Init+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001918 <HAL_Init+0x40>)
 80018e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <HAL_Init+0x40>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001918 <HAL_Init+0x40>)
 80018ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f4:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a07      	ldr	r2, [pc, #28]	@ (8001918 <HAL_Init+0x40>)
 80018fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001900:	2003      	movs	r0, #3
 8001902:	f000 f94f 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001906:	2000      	movs	r0, #0
 8001908:	f000 f808 	bl	800191c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800190c:	f7ff fcd0 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023c00 	.word	0x40023c00

0800191c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001924:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <HAL_InitTick+0x54>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b12      	ldr	r3, [pc, #72]	@ (8001974 <HAL_InitTick+0x58>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4619      	mov	r1, r3
 800192e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001932:	fbb3 f3f1 	udiv	r3, r3, r1
 8001936:	fbb2 f3f3 	udiv	r3, r2, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f967 	bl	8001c0e <HAL_SYSTICK_Config>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e00e      	b.n	8001968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b0f      	cmp	r3, #15
 800194e:	d80a      	bhi.n	8001966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001950:	2200      	movs	r2, #0
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f000 f92f 	bl	8001bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800195c:	4a06      	ldr	r2, [pc, #24]	@ (8001978 <HAL_InitTick+0x5c>)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	e000      	b.n	8001968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000010 	.word	0x20000010
 8001974:	20000018 	.word	0x20000018
 8001978:	20000014 	.word	0x20000014

0800197c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <HAL_IncTick+0x20>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <HAL_IncTick+0x24>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4413      	add	r3, r2
 800198c:	4a04      	ldr	r2, [pc, #16]	@ (80019a0 <HAL_IncTick+0x24>)
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000018 	.word	0x20000018
 80019a0:	20000288 	.word	0x20000288

080019a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return uwTick;
 80019a8:	4b03      	ldr	r3, [pc, #12]	@ (80019b8 <HAL_GetTick+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000288 	.word	0x20000288

080019bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c4:	f7ff ffee 	bl	80019a4 <HAL_GetTick>
 80019c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d4:	d005      	beq.n	80019e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <HAL_Delay+0x44>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019e2:	bf00      	nop
 80019e4:	f7ff ffde 	bl	80019a4 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d8f7      	bhi.n	80019e4 <HAL_Delay+0x28>
  {
  }
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000018 	.word	0x20000018

08001a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a14:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a20:	4013      	ands	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a36:	4a04      	ldr	r2, [pc, #16]	@ (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	60d3      	str	r3, [r2, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a50:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <__NVIC_GetPriorityGrouping+0x18>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	0a1b      	lsrs	r3, r3, #8
 8001a56:	f003 0307 	and.w	r3, r3, #7
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	db0b      	blt.n	8001a92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	f003 021f 	and.w	r2, r3, #31
 8001a80:	4907      	ldr	r1, [pc, #28]	@ (8001aa0 <__NVIC_EnableIRQ+0x38>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	2001      	movs	r0, #1
 8001a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000e100 	.word	0xe000e100

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	@ (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	@ (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	@ 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	@ 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f7ff ff8e 	bl	8001aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff29 	bl	8001a04 <__NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff3e 	bl	8001a4c <__NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff8e 	bl	8001af8 <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5d 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff31 	bl	8001a68 <__NVIC_EnableIRQ>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffa2 	bl	8001b60 <SysTick_Config>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c32:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c34:	f7ff feb6 	bl	80019a4 <HAL_GetTick>
 8001c38:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d008      	beq.n	8001c58 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2280      	movs	r2, #128	@ 0x80
 8001c4a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e052      	b.n	8001cfe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0216 	bic.w	r2, r2, #22
 8001c66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c76:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d103      	bne.n	8001c88 <HAL_DMA_Abort+0x62>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d007      	beq.n	8001c98 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0208 	bic.w	r2, r2, #8
 8001c96:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca8:	e013      	b.n	8001cd2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001caa:	f7ff fe7b 	bl	80019a4 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b05      	cmp	r3, #5
 8001cb6:	d90c      	bls.n	8001cd2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e015      	b.n	8001cfe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1e4      	bne.n	8001caa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce4:	223f      	movs	r2, #63	@ 0x3f
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d004      	beq.n	8001d24 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2280      	movs	r2, #128	@ 0x80
 8001d1e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e00c      	b.n	8001d3e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2205      	movs	r2, #5
 8001d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	@ 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e159      	b.n	800201c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	f040 8148 	bne.w	8002016 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d005      	beq.n	8001d9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d130      	bne.n	8001e00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 0201 	and.w	r2, r3, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d017      	beq.n	8001e3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d123      	bne.n	8001e90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	08da      	lsrs	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80a2 	beq.w	8002016 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b57      	ldr	r3, [pc, #348]	@ (8002034 <HAL_GPIO_Init+0x2e8>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eda:	4a56      	ldr	r2, [pc, #344]	@ (8002034 <HAL_GPIO_Init+0x2e8>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ee2:	4b54      	ldr	r3, [pc, #336]	@ (8002034 <HAL_GPIO_Init+0x2e8>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eee:	4a52      	ldr	r2, [pc, #328]	@ (8002038 <HAL_GPIO_Init+0x2ec>)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a49      	ldr	r2, [pc, #292]	@ (800203c <HAL_GPIO_Init+0x2f0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d019      	beq.n	8001f4e <HAL_GPIO_Init+0x202>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a48      	ldr	r2, [pc, #288]	@ (8002040 <HAL_GPIO_Init+0x2f4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <HAL_GPIO_Init+0x1fe>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a47      	ldr	r2, [pc, #284]	@ (8002044 <HAL_GPIO_Init+0x2f8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00d      	beq.n	8001f46 <HAL_GPIO_Init+0x1fa>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a46      	ldr	r2, [pc, #280]	@ (8002048 <HAL_GPIO_Init+0x2fc>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d007      	beq.n	8001f42 <HAL_GPIO_Init+0x1f6>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a45      	ldr	r2, [pc, #276]	@ (800204c <HAL_GPIO_Init+0x300>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d101      	bne.n	8001f3e <HAL_GPIO_Init+0x1f2>
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	e008      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f3e:	2307      	movs	r3, #7
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f42:	2303      	movs	r3, #3
 8001f44:	e004      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e002      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	f002 0203 	and.w	r2, r2, #3
 8001f56:	0092      	lsls	r2, r2, #2
 8001f58:	4093      	lsls	r3, r2
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f60:	4935      	ldr	r1, [pc, #212]	@ (8002038 <HAL_GPIO_Init+0x2ec>)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	3302      	adds	r3, #2
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f6e:	4b38      	ldr	r3, [pc, #224]	@ (8002050 <HAL_GPIO_Init+0x304>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f92:	4a2f      	ldr	r2, [pc, #188]	@ (8002050 <HAL_GPIO_Init+0x304>)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f98:	4b2d      	ldr	r3, [pc, #180]	@ (8002050 <HAL_GPIO_Init+0x304>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fbc:	4a24      	ldr	r2, [pc, #144]	@ (8002050 <HAL_GPIO_Init+0x304>)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fc2:	4b23      	ldr	r3, [pc, #140]	@ (8002050 <HAL_GPIO_Init+0x304>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8002050 <HAL_GPIO_Init+0x304>)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fec:	4b18      	ldr	r3, [pc, #96]	@ (8002050 <HAL_GPIO_Init+0x304>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002010:	4a0f      	ldr	r2, [pc, #60]	@ (8002050 <HAL_GPIO_Init+0x304>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3301      	adds	r3, #1
 800201a:	61fb      	str	r3, [r7, #28]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	2b0f      	cmp	r3, #15
 8002020:	f67f aea2 	bls.w	8001d68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3724      	adds	r7, #36	@ 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800
 8002038:	40013800 	.word	0x40013800
 800203c:	40020000 	.word	0x40020000
 8002040:	40020400 	.word	0x40020400
 8002044:	40020800 	.word	0x40020800
 8002048:	40020c00 	.word	0x40020c00
 800204c:	40021000 	.word	0x40021000
 8002050:	40013c00 	.word	0x40013c00

08002054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
 8002060:	4613      	mov	r3, r2
 8002062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002064:	787b      	ldrb	r3, [r7, #1]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002070:	e003      	b.n	800207a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002072:	887b      	ldrh	r3, [r7, #2]
 8002074:	041a      	lsls	r2, r3, #16
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	619a      	str	r2, [r3, #24]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e12b      	b.n	80022f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff f926 	bl	8001300 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2224      	movs	r2, #36	@ 0x24
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0201 	bic.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020ec:	f001 f8da 	bl	80032a4 <HAL_RCC_GetPCLK1Freq>
 80020f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4a81      	ldr	r2, [pc, #516]	@ (80022fc <HAL_I2C_Init+0x274>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d807      	bhi.n	800210c <HAL_I2C_Init+0x84>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4a80      	ldr	r2, [pc, #512]	@ (8002300 <HAL_I2C_Init+0x278>)
 8002100:	4293      	cmp	r3, r2
 8002102:	bf94      	ite	ls
 8002104:	2301      	movls	r3, #1
 8002106:	2300      	movhi	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	e006      	b.n	800211a <HAL_I2C_Init+0x92>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4a7d      	ldr	r2, [pc, #500]	@ (8002304 <HAL_I2C_Init+0x27c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	bf94      	ite	ls
 8002114:	2301      	movls	r3, #1
 8002116:	2300      	movhi	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e0e7      	b.n	80022f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4a78      	ldr	r2, [pc, #480]	@ (8002308 <HAL_I2C_Init+0x280>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	0c9b      	lsrs	r3, r3, #18
 800212c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	430a      	orrs	r2, r1
 8002140:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4a6a      	ldr	r2, [pc, #424]	@ (80022fc <HAL_I2C_Init+0x274>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d802      	bhi.n	800215c <HAL_I2C_Init+0xd4>
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	3301      	adds	r3, #1
 800215a:	e009      	b.n	8002170 <HAL_I2C_Init+0xe8>
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002162:	fb02 f303 	mul.w	r3, r2, r3
 8002166:	4a69      	ldr	r2, [pc, #420]	@ (800230c <HAL_I2C_Init+0x284>)
 8002168:	fba2 2303 	umull	r2, r3, r2, r3
 800216c:	099b      	lsrs	r3, r3, #6
 800216e:	3301      	adds	r3, #1
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	430b      	orrs	r3, r1
 8002176:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002182:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	495c      	ldr	r1, [pc, #368]	@ (80022fc <HAL_I2C_Init+0x274>)
 800218c:	428b      	cmp	r3, r1
 800218e:	d819      	bhi.n	80021c4 <HAL_I2C_Init+0x13c>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1e59      	subs	r1, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	fbb1 f3f3 	udiv	r3, r1, r3
 800219e:	1c59      	adds	r1, r3, #1
 80021a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021a4:	400b      	ands	r3, r1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_I2C_Init+0x138>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1e59      	subs	r1, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021b8:	3301      	adds	r3, #1
 80021ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021be:	e051      	b.n	8002264 <HAL_I2C_Init+0x1dc>
 80021c0:	2304      	movs	r3, #4
 80021c2:	e04f      	b.n	8002264 <HAL_I2C_Init+0x1dc>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d111      	bne.n	80021f0 <HAL_I2C_Init+0x168>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1e58      	subs	r0, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	440b      	add	r3, r1
 80021da:	fbb0 f3f3 	udiv	r3, r0, r3
 80021de:	3301      	adds	r3, #1
 80021e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf0c      	ite	eq
 80021e8:	2301      	moveq	r3, #1
 80021ea:	2300      	movne	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	e012      	b.n	8002216 <HAL_I2C_Init+0x18e>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	1e58      	subs	r0, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6859      	ldr	r1, [r3, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	0099      	lsls	r1, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	fbb0 f3f3 	udiv	r3, r0, r3
 8002206:	3301      	adds	r3, #1
 8002208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220c:	2b00      	cmp	r3, #0
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_I2C_Init+0x196>
 800221a:	2301      	movs	r3, #1
 800221c:	e022      	b.n	8002264 <HAL_I2C_Init+0x1dc>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10e      	bne.n	8002244 <HAL_I2C_Init+0x1bc>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1e58      	subs	r0, r3, #1
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6859      	ldr	r1, [r3, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	440b      	add	r3, r1
 8002234:	fbb0 f3f3 	udiv	r3, r0, r3
 8002238:	3301      	adds	r3, #1
 800223a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002242:	e00f      	b.n	8002264 <HAL_I2C_Init+0x1dc>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1e58      	subs	r0, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6859      	ldr	r1, [r3, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	0099      	lsls	r1, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	fbb0 f3f3 	udiv	r3, r0, r3
 800225a:	3301      	adds	r3, #1
 800225c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002260:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	6809      	ldr	r1, [r1, #0]
 8002268:	4313      	orrs	r3, r2
 800226a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69da      	ldr	r2, [r3, #28]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002292:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6911      	ldr	r1, [r2, #16]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68d2      	ldr	r2, [r2, #12]
 800229e:	4311      	orrs	r1, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	430b      	orrs	r3, r1
 80022a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2220      	movs	r2, #32
 80022de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	000186a0 	.word	0x000186a0
 8002300:	001e847f 	.word	0x001e847f
 8002304:	003d08ff 	.word	0x003d08ff
 8002308:	431bde83 	.word	0x431bde83
 800230c:	10624dd3 	.word	0x10624dd3

08002310 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af02      	add	r7, sp, #8
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	607a      	str	r2, [r7, #4]
 800231a:	461a      	mov	r2, r3
 800231c:	460b      	mov	r3, r1
 800231e:	817b      	strh	r3, [r7, #10]
 8002320:	4613      	mov	r3, r2
 8002322:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002324:	f7ff fb3e 	bl	80019a4 <HAL_GetTick>
 8002328:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b20      	cmp	r3, #32
 8002334:	f040 80e0 	bne.w	80024f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	2319      	movs	r3, #25
 800233e:	2201      	movs	r2, #1
 8002340:	4970      	ldr	r1, [pc, #448]	@ (8002504 <HAL_I2C_Master_Transmit+0x1f4>)
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f964 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800234e:	2302      	movs	r3, #2
 8002350:	e0d3      	b.n	80024fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_I2C_Master_Transmit+0x50>
 800235c:	2302      	movs	r3, #2
 800235e:	e0cc      	b.n	80024fa <HAL_I2C_Master_Transmit+0x1ea>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b01      	cmp	r3, #1
 8002374:	d007      	beq.n	8002386 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f042 0201 	orr.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002394:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2221      	movs	r2, #33	@ 0x21
 800239a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2210      	movs	r2, #16
 80023a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	893a      	ldrh	r2, [r7, #8]
 80023b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4a50      	ldr	r2, [pc, #320]	@ (8002508 <HAL_I2C_Master_Transmit+0x1f8>)
 80023c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023c8:	8979      	ldrh	r1, [r7, #10]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	6a3a      	ldr	r2, [r7, #32]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f89c 	bl	800250c <I2C_MasterRequestWrite>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e08d      	b.n	80024fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023f4:	e066      	b.n	80024c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	6a39      	ldr	r1, [r7, #32]
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 fa22 	bl	8002844 <I2C_WaitOnTXEFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00d      	beq.n	8002422 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	2b04      	cmp	r3, #4
 800240c:	d107      	bne.n	800241e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800241c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e06b      	b.n	80024fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002426:	781a      	ldrb	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800243c:	b29b      	uxth	r3, r3
 800243e:	3b01      	subs	r3, #1
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b04      	cmp	r3, #4
 800245e:	d11b      	bne.n	8002498 <HAL_I2C_Master_Transmit+0x188>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002464:	2b00      	cmp	r3, #0
 8002466:	d017      	beq.n	8002498 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	781a      	ldrb	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002482:	b29b      	uxth	r3, r3
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	6a39      	ldr	r1, [r7, #32]
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 fa19 	bl	80028d4 <I2C_WaitOnBTFFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00d      	beq.n	80024c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d107      	bne.n	80024c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e01a      	b.n	80024fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d194      	bne.n	80023f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	e000      	b.n	80024fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024f8:	2302      	movs	r3, #2
  }
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	00100002 	.word	0x00100002
 8002508:	ffff0000 	.word	0xffff0000

0800250c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b088      	sub	sp, #32
 8002510:	af02      	add	r7, sp, #8
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	460b      	mov	r3, r1
 800251a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002520:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d006      	beq.n	8002536 <I2C_MasterRequestWrite+0x2a>
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d003      	beq.n	8002536 <I2C_MasterRequestWrite+0x2a>
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002534:	d108      	bne.n	8002548 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	e00b      	b.n	8002560 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254c:	2b12      	cmp	r3, #18
 800254e:	d107      	bne.n	8002560 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800255e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f84f 	bl	8002610 <I2C_WaitOnFlagUntilTimeout>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00d      	beq.n	8002594 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002586:	d103      	bne.n	8002590 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800258e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e035      	b.n	8002600 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800259c:	d108      	bne.n	80025b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800259e:	897b      	ldrh	r3, [r7, #10]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	461a      	mov	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80025ac:	611a      	str	r2, [r3, #16]
 80025ae:	e01b      	b.n	80025e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80025b0:	897b      	ldrh	r3, [r7, #10]
 80025b2:	11db      	asrs	r3, r3, #7
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f003 0306 	and.w	r3, r3, #6
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f063 030f 	orn	r3, r3, #15
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	490e      	ldr	r1, [pc, #56]	@ (8002608 <I2C_MasterRequestWrite+0xfc>)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f898 	bl	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e010      	b.n	8002600 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025de:	897b      	ldrh	r3, [r7, #10]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	4907      	ldr	r1, [pc, #28]	@ (800260c <I2C_MasterRequestWrite+0x100>)
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f888 	bl	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	00010008 	.word	0x00010008
 800260c:	00010002 	.word	0x00010002

08002610 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	4613      	mov	r3, r2
 800261e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002620:	e048      	b.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d044      	beq.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262a:	f7ff f9bb 	bl	80019a4 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d302      	bcc.n	8002640 <I2C_WaitOnFlagUntilTimeout+0x30>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d139      	bne.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	0c1b      	lsrs	r3, r3, #16
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d10d      	bne.n	8002666 <I2C_WaitOnFlagUntilTimeout+0x56>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	43da      	mvns	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	4013      	ands	r3, r2
 8002656:	b29b      	uxth	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	e00c      	b.n	8002680 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	43da      	mvns	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	4013      	ands	r3, r2
 8002672:	b29b      	uxth	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	429a      	cmp	r2, r3
 8002684:	d116      	bne.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	f043 0220 	orr.w	r2, r3, #32
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e023      	b.n	80026fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	0c1b      	lsrs	r3, r3, #16
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d10d      	bne.n	80026da <I2C_WaitOnFlagUntilTimeout+0xca>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	43da      	mvns	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	4013      	ands	r3, r2
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	e00c      	b.n	80026f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	43da      	mvns	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	4013      	ands	r3, r2
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d093      	beq.n	8002622 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002712:	e071      	b.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002722:	d123      	bne.n	800276c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002732:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800273c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	f043 0204 	orr.w	r2, r3, #4
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e067      	b.n	800283c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002772:	d041      	beq.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002774:	f7ff f916 	bl	80019a4 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	d302      	bcc.n	800278a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d136      	bne.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	0c1b      	lsrs	r3, r3, #16
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b01      	cmp	r3, #1
 8002792:	d10c      	bne.n	80027ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4013      	ands	r3, r2
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bf14      	ite	ne
 80027a6:	2301      	movne	r3, #1
 80027a8:	2300      	moveq	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	e00b      	b.n	80027c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	43da      	mvns	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	4013      	ands	r3, r2
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf14      	ite	ne
 80027c0:	2301      	movne	r3, #1
 80027c2:	2300      	moveq	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d016      	beq.n	80027f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e021      	b.n	800283c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	0c1b      	lsrs	r3, r3, #16
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d10c      	bne.n	800281c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	43da      	mvns	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	4013      	ands	r3, r2
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf14      	ite	ne
 8002814:	2301      	movne	r3, #1
 8002816:	2300      	moveq	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e00b      	b.n	8002834 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4013      	ands	r3, r2
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	bf14      	ite	ne
 800282e:	2301      	movne	r3, #1
 8002830:	2300      	moveq	r3, #0
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	f47f af6d 	bne.w	8002714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002850:	e034      	b.n	80028bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f886 	bl	8002964 <I2C_IsAcknowledgeFailed>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e034      	b.n	80028cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d028      	beq.n	80028bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800286a:	f7ff f89b 	bl	80019a4 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	429a      	cmp	r2, r3
 8002878:	d302      	bcc.n	8002880 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d11d      	bne.n	80028bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800288a:	2b80      	cmp	r3, #128	@ 0x80
 800288c:	d016      	beq.n	80028bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e007      	b.n	80028cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c6:	2b80      	cmp	r3, #128	@ 0x80
 80028c8:	d1c3      	bne.n	8002852 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028e0:	e034      	b.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f83e 	bl	8002964 <I2C_IsAcknowledgeFailed>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e034      	b.n	800295c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d028      	beq.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fa:	f7ff f853 	bl	80019a4 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	429a      	cmp	r2, r3
 8002908:	d302      	bcc.n	8002910 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d11d      	bne.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b04      	cmp	r3, #4
 800291c:	d016      	beq.n	800294c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	f043 0220 	orr.w	r2, r3, #32
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e007      	b.n	800295c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b04      	cmp	r3, #4
 8002958:	d1c3      	bne.n	80028e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800297a:	d11b      	bne.n	80029b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002984:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	f043 0204 	orr.w	r2, r3, #4
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e267      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d075      	beq.n	8002ace <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029e2:	4b88      	ldr	r3, [pc, #544]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d00c      	beq.n	8002a08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ee:	4b85      	ldr	r3, [pc, #532]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d112      	bne.n	8002a20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029fa:	4b82      	ldr	r3, [pc, #520]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a06:	d10b      	bne.n	8002a20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a08:	4b7e      	ldr	r3, [pc, #504]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d05b      	beq.n	8002acc <HAL_RCC_OscConfig+0x108>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d157      	bne.n	8002acc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e242      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a28:	d106      	bne.n	8002a38 <HAL_RCC_OscConfig+0x74>
 8002a2a:	4b76      	ldr	r3, [pc, #472]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a75      	ldr	r2, [pc, #468]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e01d      	b.n	8002a74 <HAL_RCC_OscConfig+0xb0>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a40:	d10c      	bne.n	8002a5c <HAL_RCC_OscConfig+0x98>
 8002a42:	4b70      	ldr	r3, [pc, #448]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a6f      	ldr	r2, [pc, #444]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a6c      	ldr	r2, [pc, #432]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e00b      	b.n	8002a74 <HAL_RCC_OscConfig+0xb0>
 8002a5c:	4b69      	ldr	r3, [pc, #420]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a68      	ldr	r2, [pc, #416]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b66      	ldr	r3, [pc, #408]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a65      	ldr	r2, [pc, #404]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d013      	beq.n	8002aa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7fe ff92 	bl	80019a4 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a84:	f7fe ff8e 	bl	80019a4 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b64      	cmp	r3, #100	@ 0x64
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e207      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	4b5b      	ldr	r3, [pc, #364]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0f0      	beq.n	8002a84 <HAL_RCC_OscConfig+0xc0>
 8002aa2:	e014      	b.n	8002ace <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa4:	f7fe ff7e 	bl	80019a4 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aac:	f7fe ff7a 	bl	80019a4 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b64      	cmp	r3, #100	@ 0x64
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e1f3      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002abe:	4b51      	ldr	r3, [pc, #324]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1f0      	bne.n	8002aac <HAL_RCC_OscConfig+0xe8>
 8002aca:	e000      	b.n	8002ace <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d063      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ada:	4b4a      	ldr	r3, [pc, #296]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00b      	beq.n	8002afe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ae6:	4b47      	ldr	r3, [pc, #284]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d11c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af2:	4b44      	ldr	r3, [pc, #272]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d116      	bne.n	8002b2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002afe:	4b41      	ldr	r3, [pc, #260]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d005      	beq.n	8002b16 <HAL_RCC_OscConfig+0x152>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d001      	beq.n	8002b16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e1c7      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b16:	4b3b      	ldr	r3, [pc, #236]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4937      	ldr	r1, [pc, #220]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2a:	e03a      	b.n	8002ba2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d020      	beq.n	8002b76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b34:	4b34      	ldr	r3, [pc, #208]	@ (8002c08 <HAL_RCC_OscConfig+0x244>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3a:	f7fe ff33 	bl	80019a4 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b42:	f7fe ff2f 	bl	80019a4 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e1a8      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b54:	4b2b      	ldr	r3, [pc, #172]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b60:	4b28      	ldr	r3, [pc, #160]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4925      	ldr	r1, [pc, #148]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	600b      	str	r3, [r1, #0]
 8002b74:	e015      	b.n	8002ba2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b76:	4b24      	ldr	r3, [pc, #144]	@ (8002c08 <HAL_RCC_OscConfig+0x244>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7fe ff12 	bl	80019a4 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b84:	f7fe ff0e 	bl	80019a4 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e187      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b96:	4b1b      	ldr	r3, [pc, #108]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d036      	beq.n	8002c1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d016      	beq.n	8002be4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bb6:	4b15      	ldr	r3, [pc, #84]	@ (8002c0c <HAL_RCC_OscConfig+0x248>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f7fe fef2 	bl	80019a4 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7fe feee 	bl	80019a4 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e167      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c04 <HAL_RCC_OscConfig+0x240>)
 8002bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x200>
 8002be2:	e01b      	b.n	8002c1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be4:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <HAL_RCC_OscConfig+0x248>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bea:	f7fe fedb 	bl	80019a4 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf0:	e00e      	b.n	8002c10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf2:	f7fe fed7 	bl	80019a4 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d907      	bls.n	8002c10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e150      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
 8002c04:	40023800 	.word	0x40023800
 8002c08:	42470000 	.word	0x42470000
 8002c0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c10:	4b88      	ldr	r3, [pc, #544]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002c12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1ea      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 8097 	beq.w	8002d58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2e:	4b81      	ldr	r3, [pc, #516]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10f      	bne.n	8002c5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	4a7c      	ldr	r2, [pc, #496]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c4a:	4b7a      	ldr	r3, [pc, #488]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c56:	2301      	movs	r3, #1
 8002c58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5a:	4b77      	ldr	r3, [pc, #476]	@ (8002e38 <HAL_RCC_OscConfig+0x474>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d118      	bne.n	8002c98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c66:	4b74      	ldr	r3, [pc, #464]	@ (8002e38 <HAL_RCC_OscConfig+0x474>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a73      	ldr	r2, [pc, #460]	@ (8002e38 <HAL_RCC_OscConfig+0x474>)
 8002c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c72:	f7fe fe97 	bl	80019a4 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7a:	f7fe fe93 	bl	80019a4 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e10c      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8c:	4b6a      	ldr	r3, [pc, #424]	@ (8002e38 <HAL_RCC_OscConfig+0x474>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0f0      	beq.n	8002c7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d106      	bne.n	8002cae <HAL_RCC_OscConfig+0x2ea>
 8002ca0:	4b64      	ldr	r3, [pc, #400]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca4:	4a63      	ldr	r2, [pc, #396]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cac:	e01c      	b.n	8002ce8 <HAL_RCC_OscConfig+0x324>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b05      	cmp	r3, #5
 8002cb4:	d10c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x30c>
 8002cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cba:	4a5e      	ldr	r2, [pc, #376]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	f043 0304 	orr.w	r3, r3, #4
 8002cc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc2:	4b5c      	ldr	r3, [pc, #368]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc6:	4a5b      	ldr	r2, [pc, #364]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cce:	e00b      	b.n	8002ce8 <HAL_RCC_OscConfig+0x324>
 8002cd0:	4b58      	ldr	r3, [pc, #352]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd4:	4a57      	ldr	r2, [pc, #348]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cd6:	f023 0301 	bic.w	r3, r3, #1
 8002cda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cdc:	4b55      	ldr	r3, [pc, #340]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce0:	4a54      	ldr	r2, [pc, #336]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	f023 0304 	bic.w	r3, r3, #4
 8002ce6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d015      	beq.n	8002d1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf0:	f7fe fe58 	bl	80019a4 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf8:	f7fe fe54 	bl	80019a4 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e0cb      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0e:	4b49      	ldr	r3, [pc, #292]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0ee      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x334>
 8002d1a:	e014      	b.n	8002d46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1c:	f7fe fe42 	bl	80019a4 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d22:	e00a      	b.n	8002d3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d24:	f7fe fe3e 	bl	80019a4 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e0b5      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1ee      	bne.n	8002d24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d46:	7dfb      	ldrb	r3, [r7, #23]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d105      	bne.n	8002d58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d4c:	4b39      	ldr	r3, [pc, #228]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d50:	4a38      	ldr	r2, [pc, #224]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002d52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80a1 	beq.w	8002ea4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d62:	4b34      	ldr	r3, [pc, #208]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d05c      	beq.n	8002e28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d141      	bne.n	8002dfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d76:	4b31      	ldr	r3, [pc, #196]	@ (8002e3c <HAL_RCC_OscConfig+0x478>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fe12 	bl	80019a4 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fe fe0e 	bl	80019a4 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e087      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d96:	4b27      	ldr	r3, [pc, #156]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69da      	ldr	r2, [r3, #28]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	019b      	lsls	r3, r3, #6
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db8:	085b      	lsrs	r3, r3, #1
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	041b      	lsls	r3, r3, #16
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc4:	061b      	lsls	r3, r3, #24
 8002dc6:	491b      	ldr	r1, [pc, #108]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e3c <HAL_RCC_OscConfig+0x478>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd2:	f7fe fde7 	bl	80019a4 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dda:	f7fe fde3 	bl	80019a4 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e05c      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dec:	4b11      	ldr	r3, [pc, #68]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0x416>
 8002df8:	e054      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfa:	4b10      	ldr	r3, [pc, #64]	@ (8002e3c <HAL_RCC_OscConfig+0x478>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e00:	f7fe fdd0 	bl	80019a4 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e08:	f7fe fdcc 	bl	80019a4 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e045      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1a:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <HAL_RCC_OscConfig+0x470>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x444>
 8002e26:	e03d      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d107      	bne.n	8002e40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e038      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
 8002e34:	40023800 	.word	0x40023800
 8002e38:	40007000 	.word	0x40007000
 8002e3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e40:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb0 <HAL_RCC_OscConfig+0x4ec>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d028      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d121      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d11a      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e70:	4013      	ands	r3, r2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d111      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e86:	085b      	lsrs	r3, r3, #1
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d107      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800

08002eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0cc      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec8:	4b68      	ldr	r3, [pc, #416]	@ (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d90c      	bls.n	8002ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed6:	4b65      	ldr	r3, [pc, #404]	@ (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b63      	ldr	r3, [pc, #396]	@ (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0b8      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d020      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f08:	4b59      	ldr	r3, [pc, #356]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	4a58      	ldr	r2, [pc, #352]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f20:	4b53      	ldr	r3, [pc, #332]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4a52      	ldr	r2, [pc, #328]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f2c:	4b50      	ldr	r3, [pc, #320]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	494d      	ldr	r1, [pc, #308]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d044      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	4b47      	ldr	r3, [pc, #284]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d119      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e07f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d003      	beq.n	8002f72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	4b3f      	ldr	r3, [pc, #252]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d109      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e06f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f82:	4b3b      	ldr	r3, [pc, #236]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e067      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f92:	4b37      	ldr	r3, [pc, #220]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f023 0203 	bic.w	r2, r3, #3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4934      	ldr	r1, [pc, #208]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa4:	f7fe fcfe 	bl	80019a4 <HAL_GetTick>
 8002fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fac:	f7fe fcfa 	bl	80019a4 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e04f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 020c 	and.w	r2, r3, #12
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d1eb      	bne.n	8002fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b25      	ldr	r3, [pc, #148]	@ (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d20c      	bcs.n	8002ffc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b22      	ldr	r3, [pc, #136]	@ (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	4b20      	ldr	r3, [pc, #128]	@ (800306c <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e032      	b.n	8003062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003008:	4b19      	ldr	r3, [pc, #100]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4916      	ldr	r1, [pc, #88]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003026:	4b12      	ldr	r3, [pc, #72]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	490e      	ldr	r1, [pc, #56]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800303a:	f000 f821 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 800303e:	4602      	mov	r2, r0
 8003040:	4b0b      	ldr	r3, [pc, #44]	@ (8003070 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	490a      	ldr	r1, [pc, #40]	@ (8003074 <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	5ccb      	ldrb	r3, [r1, r3]
 800304e:	fa22 f303 	lsr.w	r3, r2, r3
 8003052:	4a09      	ldr	r2, [pc, #36]	@ (8003078 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003056:	4b09      	ldr	r3, [pc, #36]	@ (800307c <HAL_RCC_ClockConfig+0x1c8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fe fc5e 	bl	800191c <HAL_InitTick>

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023c00 	.word	0x40023c00
 8003070:	40023800 	.word	0x40023800
 8003074:	0800679c 	.word	0x0800679c
 8003078:	20000010 	.word	0x20000010
 800307c:	20000014 	.word	0x20000014

08003080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003084:	b094      	sub	sp, #80	@ 0x50
 8003086:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	647b      	str	r3, [r7, #68]	@ 0x44
 800308c:	2300      	movs	r3, #0
 800308e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003090:	2300      	movs	r3, #0
 8003092:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003098:	4b79      	ldr	r3, [pc, #484]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x200>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d00d      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0x40>
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	f200 80e1 	bhi.w	800326c <HAL_RCC_GetSysClockFreq+0x1ec>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0x34>
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d003      	beq.n	80030ba <HAL_RCC_GetSysClockFreq+0x3a>
 80030b2:	e0db      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030b4:	4b73      	ldr	r3, [pc, #460]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x204>)
 80030b6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80030b8:	e0db      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ba:	4b73      	ldr	r3, [pc, #460]	@ (8003288 <HAL_RCC_GetSysClockFreq+0x208>)
 80030bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030be:	e0d8      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x200>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x200>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d063      	beq.n	800319e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	099b      	lsrs	r3, r3, #6
 80030dc:	2200      	movs	r2, #0
 80030de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80030ea:	2300      	movs	r3, #0
 80030ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030f2:	4622      	mov	r2, r4
 80030f4:	462b      	mov	r3, r5
 80030f6:	f04f 0000 	mov.w	r0, #0
 80030fa:	f04f 0100 	mov.w	r1, #0
 80030fe:	0159      	lsls	r1, r3, #5
 8003100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003104:	0150      	lsls	r0, r2, #5
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4621      	mov	r1, r4
 800310c:	1a51      	subs	r1, r2, r1
 800310e:	6139      	str	r1, [r7, #16]
 8003110:	4629      	mov	r1, r5
 8003112:	eb63 0301 	sbc.w	r3, r3, r1
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003124:	4659      	mov	r1, fp
 8003126:	018b      	lsls	r3, r1, #6
 8003128:	4651      	mov	r1, sl
 800312a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800312e:	4651      	mov	r1, sl
 8003130:	018a      	lsls	r2, r1, #6
 8003132:	4651      	mov	r1, sl
 8003134:	ebb2 0801 	subs.w	r8, r2, r1
 8003138:	4659      	mov	r1, fp
 800313a:	eb63 0901 	sbc.w	r9, r3, r1
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800314a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800314e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003152:	4690      	mov	r8, r2
 8003154:	4699      	mov	r9, r3
 8003156:	4623      	mov	r3, r4
 8003158:	eb18 0303 	adds.w	r3, r8, r3
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	462b      	mov	r3, r5
 8003160:	eb49 0303 	adc.w	r3, r9, r3
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003172:	4629      	mov	r1, r5
 8003174:	024b      	lsls	r3, r1, #9
 8003176:	4621      	mov	r1, r4
 8003178:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800317c:	4621      	mov	r1, r4
 800317e:	024a      	lsls	r2, r1, #9
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003186:	2200      	movs	r2, #0
 8003188:	62bb      	str	r3, [r7, #40]	@ 0x28
 800318a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800318c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003190:	f7fd f88e 	bl	80002b0 <__aeabi_uldivmod>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4613      	mov	r3, r2
 800319a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800319c:	e058      	b.n	8003250 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800319e:	4b38      	ldr	r3, [pc, #224]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x200>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	099b      	lsrs	r3, r3, #6
 80031a4:	2200      	movs	r2, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	4611      	mov	r1, r2
 80031aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031ae:	623b      	str	r3, [r7, #32]
 80031b0:	2300      	movs	r3, #0
 80031b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80031b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031b8:	4642      	mov	r2, r8
 80031ba:	464b      	mov	r3, r9
 80031bc:	f04f 0000 	mov.w	r0, #0
 80031c0:	f04f 0100 	mov.w	r1, #0
 80031c4:	0159      	lsls	r1, r3, #5
 80031c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ca:	0150      	lsls	r0, r2, #5
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4641      	mov	r1, r8
 80031d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80031d6:	4649      	mov	r1, r9
 80031d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031f0:	ebb2 040a 	subs.w	r4, r2, sl
 80031f4:	eb63 050b 	sbc.w	r5, r3, fp
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	00eb      	lsls	r3, r5, #3
 8003202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003206:	00e2      	lsls	r2, r4, #3
 8003208:	4614      	mov	r4, r2
 800320a:	461d      	mov	r5, r3
 800320c:	4643      	mov	r3, r8
 800320e:	18e3      	adds	r3, r4, r3
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	464b      	mov	r3, r9
 8003214:	eb45 0303 	adc.w	r3, r5, r3
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003226:	4629      	mov	r1, r5
 8003228:	028b      	lsls	r3, r1, #10
 800322a:	4621      	mov	r1, r4
 800322c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003230:	4621      	mov	r1, r4
 8003232:	028a      	lsls	r2, r1, #10
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800323a:	2200      	movs	r2, #0
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	61fa      	str	r2, [r7, #28]
 8003240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003244:	f7fd f834 	bl	80002b0 <__aeabi_uldivmod>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4613      	mov	r3, r2
 800324e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003250:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <HAL_RCC_GetSysClockFreq+0x200>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	0c1b      	lsrs	r3, r3, #16
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	3301      	adds	r3, #1
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003260:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003264:	fbb2 f3f3 	udiv	r3, r2, r3
 8003268:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800326a:	e002      	b.n	8003272 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800326c:	4b05      	ldr	r3, [pc, #20]	@ (8003284 <HAL_RCC_GetSysClockFreq+0x204>)
 800326e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003272:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003274:	4618      	mov	r0, r3
 8003276:	3750      	adds	r7, #80	@ 0x50
 8003278:	46bd      	mov	sp, r7
 800327a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	00f42400 	.word	0x00f42400
 8003288:	007a1200 	.word	0x007a1200

0800328c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003290:	4b03      	ldr	r3, [pc, #12]	@ (80032a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003292:	681b      	ldr	r3, [r3, #0]
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000010 	.word	0x20000010

080032a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032a8:	f7ff fff0 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80032ac:	4602      	mov	r2, r0
 80032ae:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	0a9b      	lsrs	r3, r3, #10
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	4903      	ldr	r1, [pc, #12]	@ (80032c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ba:	5ccb      	ldrb	r3, [r1, r3]
 80032bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40023800 	.word	0x40023800
 80032c8:	080067ac 	.word	0x080067ac

080032cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032d0:	f7ff ffdc 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80032d4:	4602      	mov	r2, r0
 80032d6:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	0b5b      	lsrs	r3, r3, #13
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	4903      	ldr	r1, [pc, #12]	@ (80032f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032e2:	5ccb      	ldrb	r3, [r1, r3]
 80032e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40023800 	.word	0x40023800
 80032f0:	080067ac 	.word	0x080067ac

080032f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e041      	b.n	800338a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fe f838 	bl	8001390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3304      	adds	r3, #4
 8003330:	4619      	mov	r1, r3
 8003332:	4610      	mov	r0, r2
 8003334:	f000 fbd8 	bl	8003ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e041      	b.n	8003428 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d106      	bne.n	80033be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7fe f809 	bl	80013d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2202      	movs	r2, #2
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3304      	adds	r3, #4
 80033ce:	4619      	mov	r1, r3
 80033d0:	4610      	mov	r0, r2
 80033d2:	f000 fb89 	bl	8003ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <HAL_TIM_PWM_Start+0x24>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	e022      	b.n	800349a <HAL_TIM_PWM_Start+0x6a>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2b04      	cmp	r3, #4
 8003458:	d109      	bne.n	800346e <HAL_TIM_PWM_Start+0x3e>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b01      	cmp	r3, #1
 8003464:	bf14      	ite	ne
 8003466:	2301      	movne	r3, #1
 8003468:	2300      	moveq	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	e015      	b.n	800349a <HAL_TIM_PWM_Start+0x6a>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b08      	cmp	r3, #8
 8003472:	d109      	bne.n	8003488 <HAL_TIM_PWM_Start+0x58>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	bf14      	ite	ne
 8003480:	2301      	movne	r3, #1
 8003482:	2300      	moveq	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	e008      	b.n	800349a <HAL_TIM_PWM_Start+0x6a>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	bf14      	ite	ne
 8003494:	2301      	movne	r3, #1
 8003496:	2300      	moveq	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e068      	b.n	8003574 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d104      	bne.n	80034b2 <HAL_TIM_PWM_Start+0x82>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034b0:	e013      	b.n	80034da <HAL_TIM_PWM_Start+0xaa>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d104      	bne.n	80034c2 <HAL_TIM_PWM_Start+0x92>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034c0:	e00b      	b.n	80034da <HAL_TIM_PWM_Start+0xaa>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d104      	bne.n	80034d2 <HAL_TIM_PWM_Start+0xa2>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034d0:	e003      	b.n	80034da <HAL_TIM_PWM_Start+0xaa>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2201      	movs	r2, #1
 80034e0:	6839      	ldr	r1, [r7, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fdb2 	bl	800404c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a23      	ldr	r2, [pc, #140]	@ (800357c <HAL_TIM_PWM_Start+0x14c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d107      	bne.n	8003502 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003500:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1d      	ldr	r2, [pc, #116]	@ (800357c <HAL_TIM_PWM_Start+0x14c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d018      	beq.n	800353e <HAL_TIM_PWM_Start+0x10e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003514:	d013      	beq.n	800353e <HAL_TIM_PWM_Start+0x10e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a19      	ldr	r2, [pc, #100]	@ (8003580 <HAL_TIM_PWM_Start+0x150>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00e      	beq.n	800353e <HAL_TIM_PWM_Start+0x10e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a17      	ldr	r2, [pc, #92]	@ (8003584 <HAL_TIM_PWM_Start+0x154>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d009      	beq.n	800353e <HAL_TIM_PWM_Start+0x10e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a16      	ldr	r2, [pc, #88]	@ (8003588 <HAL_TIM_PWM_Start+0x158>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d004      	beq.n	800353e <HAL_TIM_PWM_Start+0x10e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a14      	ldr	r2, [pc, #80]	@ (800358c <HAL_TIM_PWM_Start+0x15c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d111      	bne.n	8003562 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b06      	cmp	r3, #6
 800354e:	d010      	beq.n	8003572 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003560:	e007      	b.n	8003572 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40010000 	.word	0x40010000
 8003580:	40000400 	.word	0x40000400
 8003584:	40000800 	.word	0x40000800
 8003588:	40000c00 	.word	0x40000c00
 800358c:	40014000 	.word	0x40014000

08003590 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d020      	beq.n	80035f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01b      	beq.n	80035f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0202 	mvn.w	r2, #2
 80035c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fa65 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 80035e0:	e005      	b.n	80035ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fa57 	bl	8003a96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fa68 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d020      	beq.n	8003640 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01b      	beq.n	8003640 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0204 	mvn.w	r2, #4
 8003610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2202      	movs	r2, #2
 8003616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fa3f 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 800362c:	e005      	b.n	800363a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 fa31 	bl	8003a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fa42 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d020      	beq.n	800368c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01b      	beq.n	800368c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0208 	mvn.w	r2, #8
 800365c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2204      	movs	r2, #4
 8003662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fa19 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 8003678:	e005      	b.n	8003686 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fa0b 	bl	8003a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fa1c 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	2b00      	cmp	r3, #0
 8003694:	d020      	beq.n	80036d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01b      	beq.n	80036d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0210 	mvn.w	r2, #16
 80036a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2208      	movs	r2, #8
 80036ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f9f3 	bl	8003aaa <HAL_TIM_IC_CaptureCallback>
 80036c4:	e005      	b.n	80036d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f9e5 	bl	8003a96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f9f6 	bl	8003abe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00c      	beq.n	80036fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d007      	beq.n	80036fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0201 	mvn.w	r2, #1
 80036f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f9c3 	bl	8003a82 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00c      	beq.n	8003720 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fd34 	bl	8004188 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00c      	beq.n	8003744 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003730:	2b00      	cmp	r3, #0
 8003732:	d007      	beq.n	8003744 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800373c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f9c7 	bl	8003ad2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00c      	beq.n	8003768 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b00      	cmp	r3, #0
 8003756:	d007      	beq.n	8003768 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0220 	mvn.w	r2, #32
 8003760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fd06 	bl	8004174 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003768:	bf00      	nop
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800378a:	2302      	movs	r3, #2
 800378c:	e0ae      	b.n	80038ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b0c      	cmp	r3, #12
 800379a:	f200 809f 	bhi.w	80038dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800379e:	a201      	add	r2, pc, #4	@ (adr r2, 80037a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a4:	080037d9 	.word	0x080037d9
 80037a8:	080038dd 	.word	0x080038dd
 80037ac:	080038dd 	.word	0x080038dd
 80037b0:	080038dd 	.word	0x080038dd
 80037b4:	08003819 	.word	0x08003819
 80037b8:	080038dd 	.word	0x080038dd
 80037bc:	080038dd 	.word	0x080038dd
 80037c0:	080038dd 	.word	0x080038dd
 80037c4:	0800385b 	.word	0x0800385b
 80037c8:	080038dd 	.word	0x080038dd
 80037cc:	080038dd 	.word	0x080038dd
 80037d0:	080038dd 	.word	0x080038dd
 80037d4:	0800389b 	.word	0x0800389b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fa0e 	bl	8003c00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699a      	ldr	r2, [r3, #24]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0208 	orr.w	r2, r2, #8
 80037f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699a      	ldr	r2, [r3, #24]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0204 	bic.w	r2, r2, #4
 8003802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6999      	ldr	r1, [r3, #24]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	619a      	str	r2, [r3, #24]
      break;
 8003816:	e064      	b.n	80038e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fa54 	bl	8003ccc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699a      	ldr	r2, [r3, #24]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6999      	ldr	r1, [r3, #24]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	021a      	lsls	r2, r3, #8
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	619a      	str	r2, [r3, #24]
      break;
 8003858:	e043      	b.n	80038e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68b9      	ldr	r1, [r7, #8]
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fa9f 	bl	8003da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69da      	ldr	r2, [r3, #28]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0208 	orr.w	r2, r2, #8
 8003874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69da      	ldr	r2, [r3, #28]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0204 	bic.w	r2, r2, #4
 8003884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	69d9      	ldr	r1, [r3, #28]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	61da      	str	r2, [r3, #28]
      break;
 8003898:	e023      	b.n	80038e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68b9      	ldr	r1, [r7, #8]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fae9 	bl	8003e78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	69da      	ldr	r2, [r3, #28]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	69da      	ldr	r2, [r3, #28]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	69d9      	ldr	r1, [r3, #28]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	021a      	lsls	r2, r3, #8
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	61da      	str	r2, [r3, #28]
      break;
 80038da:	e002      	b.n	80038e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	75fb      	strb	r3, [r7, #23]
      break;
 80038e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_TIM_ConfigClockSource+0x1c>
 800390c:	2302      	movs	r3, #2
 800390e:	e0b4      	b.n	8003a7a <HAL_TIM_ConfigClockSource+0x186>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800392e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003948:	d03e      	beq.n	80039c8 <HAL_TIM_ConfigClockSource+0xd4>
 800394a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800394e:	f200 8087 	bhi.w	8003a60 <HAL_TIM_ConfigClockSource+0x16c>
 8003952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003956:	f000 8086 	beq.w	8003a66 <HAL_TIM_ConfigClockSource+0x172>
 800395a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800395e:	d87f      	bhi.n	8003a60 <HAL_TIM_ConfigClockSource+0x16c>
 8003960:	2b70      	cmp	r3, #112	@ 0x70
 8003962:	d01a      	beq.n	800399a <HAL_TIM_ConfigClockSource+0xa6>
 8003964:	2b70      	cmp	r3, #112	@ 0x70
 8003966:	d87b      	bhi.n	8003a60 <HAL_TIM_ConfigClockSource+0x16c>
 8003968:	2b60      	cmp	r3, #96	@ 0x60
 800396a:	d050      	beq.n	8003a0e <HAL_TIM_ConfigClockSource+0x11a>
 800396c:	2b60      	cmp	r3, #96	@ 0x60
 800396e:	d877      	bhi.n	8003a60 <HAL_TIM_ConfigClockSource+0x16c>
 8003970:	2b50      	cmp	r3, #80	@ 0x50
 8003972:	d03c      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0xfa>
 8003974:	2b50      	cmp	r3, #80	@ 0x50
 8003976:	d873      	bhi.n	8003a60 <HAL_TIM_ConfigClockSource+0x16c>
 8003978:	2b40      	cmp	r3, #64	@ 0x40
 800397a:	d058      	beq.n	8003a2e <HAL_TIM_ConfigClockSource+0x13a>
 800397c:	2b40      	cmp	r3, #64	@ 0x40
 800397e:	d86f      	bhi.n	8003a60 <HAL_TIM_ConfigClockSource+0x16c>
 8003980:	2b30      	cmp	r3, #48	@ 0x30
 8003982:	d064      	beq.n	8003a4e <HAL_TIM_ConfigClockSource+0x15a>
 8003984:	2b30      	cmp	r3, #48	@ 0x30
 8003986:	d86b      	bhi.n	8003a60 <HAL_TIM_ConfigClockSource+0x16c>
 8003988:	2b20      	cmp	r3, #32
 800398a:	d060      	beq.n	8003a4e <HAL_TIM_ConfigClockSource+0x15a>
 800398c:	2b20      	cmp	r3, #32
 800398e:	d867      	bhi.n	8003a60 <HAL_TIM_ConfigClockSource+0x16c>
 8003990:	2b00      	cmp	r3, #0
 8003992:	d05c      	beq.n	8003a4e <HAL_TIM_ConfigClockSource+0x15a>
 8003994:	2b10      	cmp	r3, #16
 8003996:	d05a      	beq.n	8003a4e <HAL_TIM_ConfigClockSource+0x15a>
 8003998:	e062      	b.n	8003a60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039aa:	f000 fb2f 	bl	800400c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	609a      	str	r2, [r3, #8]
      break;
 80039c6:	e04f      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039d8:	f000 fb18 	bl	800400c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039ea:	609a      	str	r2, [r3, #8]
      break;
 80039ec:	e03c      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fa:	461a      	mov	r2, r3
 80039fc:	f000 fa8c 	bl	8003f18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2150      	movs	r1, #80	@ 0x50
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 fae5 	bl	8003fd6 <TIM_ITRx_SetConfig>
      break;
 8003a0c:	e02c      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f000 faab 	bl	8003f76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2160      	movs	r1, #96	@ 0x60
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fad5 	bl	8003fd6 <TIM_ITRx_SetConfig>
      break;
 8003a2c:	e01c      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	f000 fa6c 	bl	8003f18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2140      	movs	r1, #64	@ 0x40
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fac5 	bl	8003fd6 <TIM_ITRx_SetConfig>
      break;
 8003a4c:	e00c      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4619      	mov	r1, r3
 8003a58:	4610      	mov	r0, r2
 8003a5a:	f000 fabc 	bl	8003fd6 <TIM_ITRx_SetConfig>
      break;
 8003a5e:	e003      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	73fb      	strb	r3, [r7, #15]
      break;
 8003a64:	e000      	b.n	8003a68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
	...

08003ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a3a      	ldr	r2, [pc, #232]	@ (8003be4 <TIM_Base_SetConfig+0xfc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00f      	beq.n	8003b20 <TIM_Base_SetConfig+0x38>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b06:	d00b      	beq.n	8003b20 <TIM_Base_SetConfig+0x38>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a37      	ldr	r2, [pc, #220]	@ (8003be8 <TIM_Base_SetConfig+0x100>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d007      	beq.n	8003b20 <TIM_Base_SetConfig+0x38>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a36      	ldr	r2, [pc, #216]	@ (8003bec <TIM_Base_SetConfig+0x104>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_Base_SetConfig+0x38>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a35      	ldr	r2, [pc, #212]	@ (8003bf0 <TIM_Base_SetConfig+0x108>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d108      	bne.n	8003b32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a2b      	ldr	r2, [pc, #172]	@ (8003be4 <TIM_Base_SetConfig+0xfc>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d01b      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b40:	d017      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a28      	ldr	r2, [pc, #160]	@ (8003be8 <TIM_Base_SetConfig+0x100>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d013      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a27      	ldr	r2, [pc, #156]	@ (8003bec <TIM_Base_SetConfig+0x104>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00f      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a26      	ldr	r2, [pc, #152]	@ (8003bf0 <TIM_Base_SetConfig+0x108>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00b      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a25      	ldr	r2, [pc, #148]	@ (8003bf4 <TIM_Base_SetConfig+0x10c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d007      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a24      	ldr	r2, [pc, #144]	@ (8003bf8 <TIM_Base_SetConfig+0x110>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d003      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a23      	ldr	r2, [pc, #140]	@ (8003bfc <TIM_Base_SetConfig+0x114>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d108      	bne.n	8003b84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a0e      	ldr	r2, [pc, #56]	@ (8003be4 <TIM_Base_SetConfig+0xfc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d103      	bne.n	8003bb8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d105      	bne.n	8003bd6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f023 0201 	bic.w	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	611a      	str	r2, [r3, #16]
  }
}
 8003bd6:	bf00      	nop
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40010000 	.word	0x40010000
 8003be8:	40000400 	.word	0x40000400
 8003bec:	40000800 	.word	0x40000800
 8003bf0:	40000c00 	.word	0x40000c00
 8003bf4:	40014000 	.word	0x40014000
 8003bf8:	40014400 	.word	0x40014400
 8003bfc:	40014800 	.word	0x40014800

08003c00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f023 0201 	bic.w	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0303 	bic.w	r3, r3, #3
 8003c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f023 0302 	bic.w	r3, r3, #2
 8003c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a1c      	ldr	r2, [pc, #112]	@ (8003cc8 <TIM_OC1_SetConfig+0xc8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d10c      	bne.n	8003c76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f023 0308 	bic.w	r3, r3, #8
 8003c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f023 0304 	bic.w	r3, r3, #4
 8003c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a13      	ldr	r2, [pc, #76]	@ (8003cc8 <TIM_OC1_SetConfig+0xc8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d111      	bne.n	8003ca2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	621a      	str	r2, [r3, #32]
}
 8003cbc:	bf00      	nop
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	40010000 	.word	0x40010000

08003ccc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f023 0210 	bic.w	r2, r3, #16
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f023 0320 	bic.w	r3, r3, #32
 8003d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a1e      	ldr	r2, [pc, #120]	@ (8003da0 <TIM_OC2_SetConfig+0xd4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d10d      	bne.n	8003d48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a15      	ldr	r2, [pc, #84]	@ (8003da0 <TIM_OC2_SetConfig+0xd4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d113      	bne.n	8003d78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40010000 	.word	0x40010000

08003da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0303 	bic.w	r3, r3, #3
 8003dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8003e74 <TIM_OC3_SetConfig+0xd0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d10d      	bne.n	8003e1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	021b      	lsls	r3, r3, #8
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a14      	ldr	r2, [pc, #80]	@ (8003e74 <TIM_OC3_SetConfig+0xd0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d113      	bne.n	8003e4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	621a      	str	r2, [r3, #32]
}
 8003e68:	bf00      	nop
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	40010000 	.word	0x40010000

08003e78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	031b      	lsls	r3, r3, #12
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a10      	ldr	r2, [pc, #64]	@ (8003f14 <TIM_OC4_SetConfig+0x9c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d109      	bne.n	8003eec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ede:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	019b      	lsls	r3, r3, #6
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	621a      	str	r2, [r3, #32]
}
 8003f06:	bf00      	nop
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	40010000 	.word	0x40010000

08003f18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	f023 0201 	bic.w	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f023 030a 	bic.w	r3, r3, #10
 8003f54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	621a      	str	r2, [r3, #32]
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b087      	sub	sp, #28
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f023 0210 	bic.w	r2, r3, #16
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003fa0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	031b      	lsls	r3, r3, #12
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003fb2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	621a      	str	r2, [r3, #32]
}
 8003fca:	bf00      	nop
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b085      	sub	sp, #20
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f043 0307 	orr.w	r3, r3, #7
 8003ff8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	609a      	str	r2, [r3, #8]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004026:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	021a      	lsls	r2, r3, #8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	431a      	orrs	r2, r3
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4313      	orrs	r3, r2
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	609a      	str	r2, [r3, #8]
}
 8004040:	bf00      	nop
 8004042:	371c      	adds	r7, #28
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	2201      	movs	r2, #1
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a1a      	ldr	r2, [r3, #32]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	43db      	mvns	r3, r3
 800406e:	401a      	ands	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a1a      	ldr	r2, [r3, #32]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f003 031f 	and.w	r3, r3, #31
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	fa01 f303 	lsl.w	r3, r1, r3
 8004084:	431a      	orrs	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	621a      	str	r2, [r3, #32]
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e050      	b.n	8004152 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2202      	movs	r2, #2
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4313      	orrs	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004160 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d018      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040fc:	d013      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a18      	ldr	r2, [pc, #96]	@ (8004164 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00e      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a16      	ldr	r2, [pc, #88]	@ (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d009      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a15      	ldr	r2, [pc, #84]	@ (800416c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d004      	beq.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a13      	ldr	r2, [pc, #76]	@ (8004170 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d10c      	bne.n	8004140 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800412c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	4313      	orrs	r3, r2
 8004136:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40010000 	.word	0x40010000
 8004164:	40000400 	.word	0x40000400
 8004168:	40000800 	.word	0x40000800
 800416c:	40000c00 	.word	0x40000c00
 8004170:	40014000 	.word	0x40014000

08004174 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e042      	b.n	8004234 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fd f9aa 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2224      	movs	r2, #36	@ 0x24
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 fdbd 	bl	8004d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695a      	ldr	r2, [r3, #20]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004204:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004214:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08a      	sub	sp, #40	@ 0x28
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	4613      	mov	r3, r2
 800424a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b20      	cmp	r3, #32
 800425a:	d175      	bne.n	8004348 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <HAL_UART_Transmit+0x2c>
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e06e      	b.n	800434a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2221      	movs	r2, #33	@ 0x21
 8004276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800427a:	f7fd fb93 	bl	80019a4 <HAL_GetTick>
 800427e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	88fa      	ldrh	r2, [r7, #6]
 8004284:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	88fa      	ldrh	r2, [r7, #6]
 800428a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004294:	d108      	bne.n	80042a8 <HAL_UART_Transmit+0x6c>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d104      	bne.n	80042a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800429e:	2300      	movs	r3, #0
 80042a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	e003      	b.n	80042b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042b0:	e02e      	b.n	8004310 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2200      	movs	r2, #0
 80042ba:	2180      	movs	r1, #128	@ 0x80
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 fb1f 	bl	8004900 <UART_WaitOnFlagUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d005      	beq.n	80042d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e03a      	b.n	800434a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10b      	bne.n	80042f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	3302      	adds	r3, #2
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	e007      	b.n	8004302 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	781a      	ldrb	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	3301      	adds	r3, #1
 8004300:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004306:	b29b      	uxth	r3, r3
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1cb      	bne.n	80042b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2200      	movs	r2, #0
 8004322:	2140      	movs	r1, #64	@ 0x40
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f000 faeb 	bl	8004900 <UART_WaitOnFlagUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e006      	b.n	800434a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004344:	2300      	movs	r3, #0
 8004346:	e000      	b.n	800434a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004348:	2302      	movs	r3, #2
  }
}
 800434a:	4618      	mov	r0, r3
 800434c:	3720      	adds	r7, #32
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	4613      	mov	r3, r2
 800435e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b20      	cmp	r3, #32
 800436a:	d112      	bne.n	8004392 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_UART_Receive_IT+0x26>
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e00b      	b.n	8004394 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	461a      	mov	r2, r3
 8004386:	68b9      	ldr	r1, [r7, #8]
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fb12 	bl	80049b2 <UART_Start_Receive_IT>
 800438e:	4603      	mov	r3, r0
 8004390:	e000      	b.n	8004394 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004392:	2302      	movs	r3, #2
  }
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b0ba      	sub	sp, #232	@ 0xe8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80043da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10f      	bne.n	8004402 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d009      	beq.n	8004402 <HAL_UART_IRQHandler+0x66>
 80043ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043f2:	f003 0320 	and.w	r3, r3, #32
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fbf2 	bl	8004be4 <UART_Receive_IT>
      return;
 8004400:	e25b      	b.n	80048ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004402:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 80de 	beq.w	80045c8 <HAL_UART_IRQHandler+0x22c>
 800440c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d106      	bne.n	8004426 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800441c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 80d1 	beq.w	80045c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00b      	beq.n	800444a <HAL_UART_IRQHandler+0xae>
 8004432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004442:	f043 0201 	orr.w	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800444a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <HAL_UART_IRQHandler+0xd2>
 8004456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004466:	f043 0202 	orr.w	r2, r3, #2
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800446e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00b      	beq.n	8004492 <HAL_UART_IRQHandler+0xf6>
 800447a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d005      	beq.n	8004492 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448a:	f043 0204 	orr.w	r2, r3, #4
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d011      	beq.n	80044c2 <HAL_UART_IRQHandler+0x126>
 800449e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d105      	bne.n	80044b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ba:	f043 0208 	orr.w	r2, r3, #8
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 81f2 	beq.w	80048b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_UART_IRQHandler+0x14e>
 80044d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fb7d 	bl	8004be4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f4:	2b40      	cmp	r3, #64	@ 0x40
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d103      	bne.n	8004516 <HAL_UART_IRQHandler+0x17a>
 800450e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004512:	2b00      	cmp	r3, #0
 8004514:	d04f      	beq.n	80045b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fa85 	bl	8004a26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004526:	2b40      	cmp	r3, #64	@ 0x40
 8004528:	d141      	bne.n	80045ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3314      	adds	r3, #20
 8004530:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004534:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004540:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004544:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004548:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3314      	adds	r3, #20
 8004552:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004556:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800455a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004562:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800456e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1d9      	bne.n	800452a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457a:	2b00      	cmp	r3, #0
 800457c:	d013      	beq.n	80045a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004582:	4a7e      	ldr	r2, [pc, #504]	@ (800477c <HAL_UART_IRQHandler+0x3e0>)
 8004584:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800458a:	4618      	mov	r0, r3
 800458c:	f7fd fbbb 	bl	8001d06 <HAL_DMA_Abort_IT>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d016      	beq.n	80045c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800459a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80045a0:	4610      	mov	r0, r2
 80045a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a4:	e00e      	b.n	80045c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f994 	bl	80048d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ac:	e00a      	b.n	80045c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f990 	bl	80048d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b4:	e006      	b.n	80045c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f98c 	bl	80048d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80045c2:	e175      	b.n	80048b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c4:	bf00      	nop
    return;
 80045c6:	e173      	b.n	80048b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	f040 814f 	bne.w	8004870 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80045d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 8148 	beq.w	8004870 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80045e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 8141 	beq.w	8004870 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045ee:	2300      	movs	r3, #0
 80045f0:	60bb      	str	r3, [r7, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60bb      	str	r3, [r7, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460e:	2b40      	cmp	r3, #64	@ 0x40
 8004610:	f040 80b6 	bne.w	8004780 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004620:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8145 	beq.w	80048b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800462e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004632:	429a      	cmp	r2, r3
 8004634:	f080 813e 	bcs.w	80048b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800463e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800464a:	f000 8088 	beq.w	800475e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	330c      	adds	r3, #12
 8004654:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800465c:	e853 3f00 	ldrex	r3, [r3]
 8004660:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004664:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004668:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800466c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	330c      	adds	r3, #12
 8004676:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800467a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800467e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004682:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004686:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800468a:	e841 2300 	strex	r3, r2, [r1]
 800468e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004692:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1d9      	bne.n	800464e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3314      	adds	r3, #20
 80046a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80046aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3314      	adds	r3, #20
 80046ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80046be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80046c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80046c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80046ca:	e841 2300 	strex	r3, r2, [r1]
 80046ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80046d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1e1      	bne.n	800469a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3314      	adds	r3, #20
 80046dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80046e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3314      	adds	r3, #20
 80046f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80046fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004700:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004702:	e841 2300 	strex	r3, r2, [r1]
 8004706:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004708:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1e3      	bne.n	80046d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	330c      	adds	r3, #12
 8004722:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004726:	e853 3f00 	ldrex	r3, [r3]
 800472a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800472c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800472e:	f023 0310 	bic.w	r3, r3, #16
 8004732:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	330c      	adds	r3, #12
 800473c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004740:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004742:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004744:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004746:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004748:	e841 2300 	strex	r3, r2, [r1]
 800474c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800474e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e3      	bne.n	800471c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004758:	4618      	mov	r0, r3
 800475a:	f7fd fa64 	bl	8001c26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2202      	movs	r2, #2
 8004762:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800476c:	b29b      	uxth	r3, r3
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	b29b      	uxth	r3, r3
 8004772:	4619      	mov	r1, r3
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f8b7 	bl	80048e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800477a:	e09b      	b.n	80048b4 <HAL_UART_IRQHandler+0x518>
 800477c:	08004aed 	.word	0x08004aed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004788:	b29b      	uxth	r3, r3
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 808e 	beq.w	80048b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800479c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 8089 	beq.w	80048b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	330c      	adds	r3, #12
 80047ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	330c      	adds	r3, #12
 80047c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80047ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80047cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e3      	bne.n	80047a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3314      	adds	r3, #20
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	623b      	str	r3, [r7, #32]
   return(result);
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	f023 0301 	bic.w	r3, r3, #1
 80047f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3314      	adds	r3, #20
 80047fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004802:	633a      	str	r2, [r7, #48]	@ 0x30
 8004804:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004808:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e3      	bne.n	80047de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	330c      	adds	r3, #12
 800482a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	e853 3f00 	ldrex	r3, [r3]
 8004832:	60fb      	str	r3, [r7, #12]
   return(result);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0310 	bic.w	r3, r3, #16
 800483a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	330c      	adds	r3, #12
 8004844:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004848:	61fa      	str	r2, [r7, #28]
 800484a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484c:	69b9      	ldr	r1, [r7, #24]
 800484e:	69fa      	ldr	r2, [r7, #28]
 8004850:	e841 2300 	strex	r3, r2, [r1]
 8004854:	617b      	str	r3, [r7, #20]
   return(result);
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1e3      	bne.n	8004824 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004862:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004866:	4619      	mov	r1, r3
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f83d 	bl	80048e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800486e:	e023      	b.n	80048b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004878:	2b00      	cmp	r3, #0
 800487a:	d009      	beq.n	8004890 <HAL_UART_IRQHandler+0x4f4>
 800487c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f943 	bl	8004b14 <UART_Transmit_IT>
    return;
 800488e:	e014      	b.n	80048ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00e      	beq.n	80048ba <HAL_UART_IRQHandler+0x51e>
 800489c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f983 	bl	8004bb4 <UART_EndTransmit_IT>
    return;
 80048ae:	e004      	b.n	80048ba <HAL_UART_IRQHandler+0x51e>
    return;
 80048b0:	bf00      	nop
 80048b2:	e002      	b.n	80048ba <HAL_UART_IRQHandler+0x51e>
      return;
 80048b4:	bf00      	nop
 80048b6:	e000      	b.n	80048ba <HAL_UART_IRQHandler+0x51e>
      return;
 80048b8:	bf00      	nop
  }
}
 80048ba:	37e8      	adds	r7, #232	@ 0xe8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	4613      	mov	r3, r2
 800490e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004910:	e03b      	b.n	800498a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004918:	d037      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800491a:	f7fd f843 	bl	80019a4 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	6a3a      	ldr	r2, [r7, #32]
 8004926:	429a      	cmp	r2, r3
 8004928:	d302      	bcc.n	8004930 <UART_WaitOnFlagUntilTimeout+0x30>
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e03a      	b.n	80049aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	d023      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b80      	cmp	r3, #128	@ 0x80
 8004946:	d020      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b40      	cmp	r3, #64	@ 0x40
 800494c:	d01d      	beq.n	800498a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b08      	cmp	r3, #8
 800495a:	d116      	bne.n	800498a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f857 	bl	8004a26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2208      	movs	r2, #8
 800497c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e00f      	b.n	80049aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4013      	ands	r3, r2
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	429a      	cmp	r2, r3
 8004998:	bf0c      	ite	eq
 800499a:	2301      	moveq	r3, #1
 800499c:	2300      	movne	r3, #0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	461a      	mov	r2, r3
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d0b4      	beq.n	8004912 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	4613      	mov	r3, r2
 80049be:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	88fa      	ldrh	r2, [r7, #6]
 80049ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	88fa      	ldrh	r2, [r7, #6]
 80049d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2222      	movs	r2, #34	@ 0x22
 80049dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d007      	beq.n	80049f8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049f6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0220 	orr.w	r2, r2, #32
 8004a16:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b095      	sub	sp, #84	@ 0x54
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	330c      	adds	r3, #12
 8004a34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	330c      	adds	r3, #12
 8004a4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e5      	bne.n	8004a2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3314      	adds	r3, #20
 8004a68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3314      	adds	r3, #20
 8004a80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e5      	bne.n	8004a62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d119      	bne.n	8004ad2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	330c      	adds	r3, #12
 8004aa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	e853 3f00 	ldrex	r3, [r3]
 8004aac:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f023 0310 	bic.w	r3, r3, #16
 8004ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	330c      	adds	r3, #12
 8004abc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004abe:	61ba      	str	r2, [r7, #24]
 8004ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac2:	6979      	ldr	r1, [r7, #20]
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	e841 2300 	strex	r3, r2, [r1]
 8004aca:	613b      	str	r3, [r7, #16]
   return(result);
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1e5      	bne.n	8004a9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ae0:	bf00      	nop
 8004ae2:	3754      	adds	r7, #84	@ 0x54
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f7ff fee4 	bl	80048d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b0c:	bf00      	nop
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b21      	cmp	r3, #33	@ 0x21
 8004b26:	d13e      	bne.n	8004ba6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b30:	d114      	bne.n	8004b5c <UART_Transmit_IT+0x48>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d110      	bne.n	8004b5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	1c9a      	adds	r2, r3, #2
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	621a      	str	r2, [r3, #32]
 8004b5a:	e008      	b.n	8004b6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	1c59      	adds	r1, r3, #1
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6211      	str	r1, [r2, #32]
 8004b66:	781a      	ldrb	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10f      	bne.n	8004ba2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ba0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e000      	b.n	8004ba8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ba6:	2302      	movs	r3, #2
  }
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff fe73 	bl	80048c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08c      	sub	sp, #48	@ 0x30
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b22      	cmp	r3, #34	@ 0x22
 8004bf6:	f040 80ae 	bne.w	8004d56 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c02:	d117      	bne.n	8004c34 <UART_Receive_IT+0x50>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d113      	bne.n	8004c34 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c14:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2c:	1c9a      	adds	r2, r3, #2
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c32:	e026      	b.n	8004c82 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c46:	d007      	beq.n	8004c58 <UART_Receive_IT+0x74>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10a      	bne.n	8004c66 <UART_Receive_IT+0x82>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d106      	bne.n	8004c66 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c62:	701a      	strb	r2, [r3, #0]
 8004c64:	e008      	b.n	8004c78 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c76:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d15d      	bne.n	8004d52 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0220 	bic.w	r2, r2, #32
 8004ca4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004cb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695a      	ldr	r2, [r3, #20]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 0201 	bic.w	r2, r2, #1
 8004cc4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d135      	bne.n	8004d48 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	330c      	adds	r3, #12
 8004ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	e853 3f00 	ldrex	r3, [r3]
 8004cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f023 0310 	bic.w	r3, r3, #16
 8004cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	330c      	adds	r3, #12
 8004d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d02:	623a      	str	r2, [r7, #32]
 8004d04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	69f9      	ldr	r1, [r7, #28]
 8004d08:	6a3a      	ldr	r2, [r7, #32]
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e5      	bne.n	8004ce2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	2b10      	cmp	r3, #16
 8004d22:	d10a      	bne.n	8004d3a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d24:	2300      	movs	r3, #0
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff fdd1 	bl	80048e8 <HAL_UARTEx_RxEventCallback>
 8004d46:	e002      	b.n	8004d4e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7fc fa11 	bl	8001170 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e002      	b.n	8004d58 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	e000      	b.n	8004d58 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004d56:	2302      	movs	r3, #2
  }
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3730      	adds	r7, #48	@ 0x30
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d64:	b0c0      	sub	sp, #256	@ 0x100
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7c:	68d9      	ldr	r1, [r3, #12]
 8004d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	ea40 0301 	orr.w	r3, r0, r1
 8004d88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	431a      	orrs	r2, r3
 8004d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004db8:	f021 010c 	bic.w	r1, r1, #12
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004dc6:	430b      	orrs	r3, r1
 8004dc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dda:	6999      	ldr	r1, [r3, #24]
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	ea40 0301 	orr.w	r3, r0, r1
 8004de6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	4b8f      	ldr	r3, [pc, #572]	@ (800502c <UART_SetConfig+0x2cc>)
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d005      	beq.n	8004e00 <UART_SetConfig+0xa0>
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4b8d      	ldr	r3, [pc, #564]	@ (8005030 <UART_SetConfig+0x2d0>)
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d104      	bne.n	8004e0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e00:	f7fe fa64 	bl	80032cc <HAL_RCC_GetPCLK2Freq>
 8004e04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e08:	e003      	b.n	8004e12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e0a:	f7fe fa4b 	bl	80032a4 <HAL_RCC_GetPCLK1Freq>
 8004e0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e1c:	f040 810c 	bne.w	8005038 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e24:	2200      	movs	r2, #0
 8004e26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e32:	4622      	mov	r2, r4
 8004e34:	462b      	mov	r3, r5
 8004e36:	1891      	adds	r1, r2, r2
 8004e38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e3a:	415b      	adcs	r3, r3
 8004e3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e42:	4621      	mov	r1, r4
 8004e44:	eb12 0801 	adds.w	r8, r2, r1
 8004e48:	4629      	mov	r1, r5
 8004e4a:	eb43 0901 	adc.w	r9, r3, r1
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e62:	4690      	mov	r8, r2
 8004e64:	4699      	mov	r9, r3
 8004e66:	4623      	mov	r3, r4
 8004e68:	eb18 0303 	adds.w	r3, r8, r3
 8004e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e70:	462b      	mov	r3, r5
 8004e72:	eb49 0303 	adc.w	r3, r9, r3
 8004e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e8e:	460b      	mov	r3, r1
 8004e90:	18db      	adds	r3, r3, r3
 8004e92:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e94:	4613      	mov	r3, r2
 8004e96:	eb42 0303 	adc.w	r3, r2, r3
 8004e9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ea0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ea4:	f7fb fa04 	bl	80002b0 <__aeabi_uldivmod>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4b61      	ldr	r3, [pc, #388]	@ (8005034 <UART_SetConfig+0x2d4>)
 8004eae:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	011c      	lsls	r4, r3, #4
 8004eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ec0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ec4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ec8:	4642      	mov	r2, r8
 8004eca:	464b      	mov	r3, r9
 8004ecc:	1891      	adds	r1, r2, r2
 8004ece:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ed0:	415b      	adcs	r3, r3
 8004ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ed4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ed8:	4641      	mov	r1, r8
 8004eda:	eb12 0a01 	adds.w	sl, r2, r1
 8004ede:	4649      	mov	r1, r9
 8004ee0:	eb43 0b01 	adc.w	fp, r3, r1
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ef0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ef4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ef8:	4692      	mov	sl, r2
 8004efa:	469b      	mov	fp, r3
 8004efc:	4643      	mov	r3, r8
 8004efe:	eb1a 0303 	adds.w	r3, sl, r3
 8004f02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f06:	464b      	mov	r3, r9
 8004f08:	eb4b 0303 	adc.w	r3, fp, r3
 8004f0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f24:	460b      	mov	r3, r1
 8004f26:	18db      	adds	r3, r3, r3
 8004f28:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	eb42 0303 	adc.w	r3, r2, r3
 8004f30:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f3a:	f7fb f9b9 	bl	80002b0 <__aeabi_uldivmod>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	4611      	mov	r1, r2
 8004f44:	4b3b      	ldr	r3, [pc, #236]	@ (8005034 <UART_SetConfig+0x2d4>)
 8004f46:	fba3 2301 	umull	r2, r3, r3, r1
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	2264      	movs	r2, #100	@ 0x64
 8004f4e:	fb02 f303 	mul.w	r3, r2, r3
 8004f52:	1acb      	subs	r3, r1, r3
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f5a:	4b36      	ldr	r3, [pc, #216]	@ (8005034 <UART_SetConfig+0x2d4>)
 8004f5c:	fba3 2302 	umull	r2, r3, r3, r2
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f68:	441c      	add	r4, r3
 8004f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	464b      	mov	r3, r9
 8004f80:	1891      	adds	r1, r2, r2
 8004f82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f84:	415b      	adcs	r3, r3
 8004f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f8c:	4641      	mov	r1, r8
 8004f8e:	1851      	adds	r1, r2, r1
 8004f90:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f92:	4649      	mov	r1, r9
 8004f94:	414b      	adcs	r3, r1
 8004f96:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004fa4:	4659      	mov	r1, fp
 8004fa6:	00cb      	lsls	r3, r1, #3
 8004fa8:	4651      	mov	r1, sl
 8004faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fae:	4651      	mov	r1, sl
 8004fb0:	00ca      	lsls	r2, r1, #3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	4642      	mov	r2, r8
 8004fba:	189b      	adds	r3, r3, r2
 8004fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fc0:	464b      	mov	r3, r9
 8004fc2:	460a      	mov	r2, r1
 8004fc4:	eb42 0303 	adc.w	r3, r2, r3
 8004fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004fd8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004fdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	18db      	adds	r3, r3, r3
 8004fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	eb42 0303 	adc.w	r3, r2, r3
 8004fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ff2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ff6:	f7fb f95b 	bl	80002b0 <__aeabi_uldivmod>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8005034 <UART_SetConfig+0x2d4>)
 8005000:	fba3 1302 	umull	r1, r3, r3, r2
 8005004:	095b      	lsrs	r3, r3, #5
 8005006:	2164      	movs	r1, #100	@ 0x64
 8005008:	fb01 f303 	mul.w	r3, r1, r3
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	3332      	adds	r3, #50	@ 0x32
 8005012:	4a08      	ldr	r2, [pc, #32]	@ (8005034 <UART_SetConfig+0x2d4>)
 8005014:	fba2 2303 	umull	r2, r3, r2, r3
 8005018:	095b      	lsrs	r3, r3, #5
 800501a:	f003 0207 	and.w	r2, r3, #7
 800501e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4422      	add	r2, r4
 8005026:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005028:	e106      	b.n	8005238 <UART_SetConfig+0x4d8>
 800502a:	bf00      	nop
 800502c:	40011000 	.word	0x40011000
 8005030:	40011400 	.word	0x40011400
 8005034:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800503c:	2200      	movs	r2, #0
 800503e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005042:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005046:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800504a:	4642      	mov	r2, r8
 800504c:	464b      	mov	r3, r9
 800504e:	1891      	adds	r1, r2, r2
 8005050:	6239      	str	r1, [r7, #32]
 8005052:	415b      	adcs	r3, r3
 8005054:	627b      	str	r3, [r7, #36]	@ 0x24
 8005056:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800505a:	4641      	mov	r1, r8
 800505c:	1854      	adds	r4, r2, r1
 800505e:	4649      	mov	r1, r9
 8005060:	eb43 0501 	adc.w	r5, r3, r1
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	00eb      	lsls	r3, r5, #3
 800506e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005072:	00e2      	lsls	r2, r4, #3
 8005074:	4614      	mov	r4, r2
 8005076:	461d      	mov	r5, r3
 8005078:	4643      	mov	r3, r8
 800507a:	18e3      	adds	r3, r4, r3
 800507c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005080:	464b      	mov	r3, r9
 8005082:	eb45 0303 	adc.w	r3, r5, r3
 8005086:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005096:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	f04f 0300 	mov.w	r3, #0
 80050a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80050a6:	4629      	mov	r1, r5
 80050a8:	008b      	lsls	r3, r1, #2
 80050aa:	4621      	mov	r1, r4
 80050ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050b0:	4621      	mov	r1, r4
 80050b2:	008a      	lsls	r2, r1, #2
 80050b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80050b8:	f7fb f8fa 	bl	80002b0 <__aeabi_uldivmod>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4b60      	ldr	r3, [pc, #384]	@ (8005244 <UART_SetConfig+0x4e4>)
 80050c2:	fba3 2302 	umull	r2, r3, r3, r2
 80050c6:	095b      	lsrs	r3, r3, #5
 80050c8:	011c      	lsls	r4, r3, #4
 80050ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ce:	2200      	movs	r2, #0
 80050d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80050d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80050dc:	4642      	mov	r2, r8
 80050de:	464b      	mov	r3, r9
 80050e0:	1891      	adds	r1, r2, r2
 80050e2:	61b9      	str	r1, [r7, #24]
 80050e4:	415b      	adcs	r3, r3
 80050e6:	61fb      	str	r3, [r7, #28]
 80050e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050ec:	4641      	mov	r1, r8
 80050ee:	1851      	adds	r1, r2, r1
 80050f0:	6139      	str	r1, [r7, #16]
 80050f2:	4649      	mov	r1, r9
 80050f4:	414b      	adcs	r3, r1
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005104:	4659      	mov	r1, fp
 8005106:	00cb      	lsls	r3, r1, #3
 8005108:	4651      	mov	r1, sl
 800510a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800510e:	4651      	mov	r1, sl
 8005110:	00ca      	lsls	r2, r1, #3
 8005112:	4610      	mov	r0, r2
 8005114:	4619      	mov	r1, r3
 8005116:	4603      	mov	r3, r0
 8005118:	4642      	mov	r2, r8
 800511a:	189b      	adds	r3, r3, r2
 800511c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005120:	464b      	mov	r3, r9
 8005122:	460a      	mov	r2, r1
 8005124:	eb42 0303 	adc.w	r3, r2, r3
 8005128:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800512c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005136:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005144:	4649      	mov	r1, r9
 8005146:	008b      	lsls	r3, r1, #2
 8005148:	4641      	mov	r1, r8
 800514a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800514e:	4641      	mov	r1, r8
 8005150:	008a      	lsls	r2, r1, #2
 8005152:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005156:	f7fb f8ab 	bl	80002b0 <__aeabi_uldivmod>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	4611      	mov	r1, r2
 8005160:	4b38      	ldr	r3, [pc, #224]	@ (8005244 <UART_SetConfig+0x4e4>)
 8005162:	fba3 2301 	umull	r2, r3, r3, r1
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	2264      	movs	r2, #100	@ 0x64
 800516a:	fb02 f303 	mul.w	r3, r2, r3
 800516e:	1acb      	subs	r3, r1, r3
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	3332      	adds	r3, #50	@ 0x32
 8005174:	4a33      	ldr	r2, [pc, #204]	@ (8005244 <UART_SetConfig+0x4e4>)
 8005176:	fba2 2303 	umull	r2, r3, r2, r3
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005180:	441c      	add	r4, r3
 8005182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005186:	2200      	movs	r2, #0
 8005188:	673b      	str	r3, [r7, #112]	@ 0x70
 800518a:	677a      	str	r2, [r7, #116]	@ 0x74
 800518c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005190:	4642      	mov	r2, r8
 8005192:	464b      	mov	r3, r9
 8005194:	1891      	adds	r1, r2, r2
 8005196:	60b9      	str	r1, [r7, #8]
 8005198:	415b      	adcs	r3, r3
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051a0:	4641      	mov	r1, r8
 80051a2:	1851      	adds	r1, r2, r1
 80051a4:	6039      	str	r1, [r7, #0]
 80051a6:	4649      	mov	r1, r9
 80051a8:	414b      	adcs	r3, r1
 80051aa:	607b      	str	r3, [r7, #4]
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051b8:	4659      	mov	r1, fp
 80051ba:	00cb      	lsls	r3, r1, #3
 80051bc:	4651      	mov	r1, sl
 80051be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051c2:	4651      	mov	r1, sl
 80051c4:	00ca      	lsls	r2, r1, #3
 80051c6:	4610      	mov	r0, r2
 80051c8:	4619      	mov	r1, r3
 80051ca:	4603      	mov	r3, r0
 80051cc:	4642      	mov	r2, r8
 80051ce:	189b      	adds	r3, r3, r2
 80051d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051d2:	464b      	mov	r3, r9
 80051d4:	460a      	mov	r2, r1
 80051d6:	eb42 0303 	adc.w	r3, r2, r3
 80051da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80051e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80051f4:	4649      	mov	r1, r9
 80051f6:	008b      	lsls	r3, r1, #2
 80051f8:	4641      	mov	r1, r8
 80051fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051fe:	4641      	mov	r1, r8
 8005200:	008a      	lsls	r2, r1, #2
 8005202:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005206:	f7fb f853 	bl	80002b0 <__aeabi_uldivmod>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4b0d      	ldr	r3, [pc, #52]	@ (8005244 <UART_SetConfig+0x4e4>)
 8005210:	fba3 1302 	umull	r1, r3, r3, r2
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	2164      	movs	r1, #100	@ 0x64
 8005218:	fb01 f303 	mul.w	r3, r1, r3
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	3332      	adds	r3, #50	@ 0x32
 8005222:	4a08      	ldr	r2, [pc, #32]	@ (8005244 <UART_SetConfig+0x4e4>)
 8005224:	fba2 2303 	umull	r2, r3, r2, r3
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	f003 020f 	and.w	r2, r3, #15
 800522e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4422      	add	r2, r4
 8005236:	609a      	str	r2, [r3, #8]
}
 8005238:	bf00      	nop
 800523a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800523e:	46bd      	mov	sp, r7
 8005240:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005244:	51eb851f 	.word	0x51eb851f

08005248 <std>:
 8005248:	2300      	movs	r3, #0
 800524a:	b510      	push	{r4, lr}
 800524c:	4604      	mov	r4, r0
 800524e:	e9c0 3300 	strd	r3, r3, [r0]
 8005252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005256:	6083      	str	r3, [r0, #8]
 8005258:	8181      	strh	r1, [r0, #12]
 800525a:	6643      	str	r3, [r0, #100]	@ 0x64
 800525c:	81c2      	strh	r2, [r0, #14]
 800525e:	6183      	str	r3, [r0, #24]
 8005260:	4619      	mov	r1, r3
 8005262:	2208      	movs	r2, #8
 8005264:	305c      	adds	r0, #92	@ 0x5c
 8005266:	f000 fa19 	bl	800569c <memset>
 800526a:	4b0d      	ldr	r3, [pc, #52]	@ (80052a0 <std+0x58>)
 800526c:	6263      	str	r3, [r4, #36]	@ 0x24
 800526e:	4b0d      	ldr	r3, [pc, #52]	@ (80052a4 <std+0x5c>)
 8005270:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005272:	4b0d      	ldr	r3, [pc, #52]	@ (80052a8 <std+0x60>)
 8005274:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005276:	4b0d      	ldr	r3, [pc, #52]	@ (80052ac <std+0x64>)
 8005278:	6323      	str	r3, [r4, #48]	@ 0x30
 800527a:	4b0d      	ldr	r3, [pc, #52]	@ (80052b0 <std+0x68>)
 800527c:	6224      	str	r4, [r4, #32]
 800527e:	429c      	cmp	r4, r3
 8005280:	d006      	beq.n	8005290 <std+0x48>
 8005282:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005286:	4294      	cmp	r4, r2
 8005288:	d002      	beq.n	8005290 <std+0x48>
 800528a:	33d0      	adds	r3, #208	@ 0xd0
 800528c:	429c      	cmp	r4, r3
 800528e:	d105      	bne.n	800529c <std+0x54>
 8005290:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005298:	f000 bad4 	b.w	8005844 <__retarget_lock_init_recursive>
 800529c:	bd10      	pop	{r4, pc}
 800529e:	bf00      	nop
 80052a0:	080054ed 	.word	0x080054ed
 80052a4:	0800550f 	.word	0x0800550f
 80052a8:	08005547 	.word	0x08005547
 80052ac:	0800556b 	.word	0x0800556b
 80052b0:	2000028c 	.word	0x2000028c

080052b4 <stdio_exit_handler>:
 80052b4:	4a02      	ldr	r2, [pc, #8]	@ (80052c0 <stdio_exit_handler+0xc>)
 80052b6:	4903      	ldr	r1, [pc, #12]	@ (80052c4 <stdio_exit_handler+0x10>)
 80052b8:	4803      	ldr	r0, [pc, #12]	@ (80052c8 <stdio_exit_handler+0x14>)
 80052ba:	f000 b869 	b.w	8005390 <_fwalk_sglue>
 80052be:	bf00      	nop
 80052c0:	2000001c 	.word	0x2000001c
 80052c4:	080063f1 	.word	0x080063f1
 80052c8:	2000002c 	.word	0x2000002c

080052cc <cleanup_stdio>:
 80052cc:	6841      	ldr	r1, [r0, #4]
 80052ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005300 <cleanup_stdio+0x34>)
 80052d0:	4299      	cmp	r1, r3
 80052d2:	b510      	push	{r4, lr}
 80052d4:	4604      	mov	r4, r0
 80052d6:	d001      	beq.n	80052dc <cleanup_stdio+0x10>
 80052d8:	f001 f88a 	bl	80063f0 <_fflush_r>
 80052dc:	68a1      	ldr	r1, [r4, #8]
 80052de:	4b09      	ldr	r3, [pc, #36]	@ (8005304 <cleanup_stdio+0x38>)
 80052e0:	4299      	cmp	r1, r3
 80052e2:	d002      	beq.n	80052ea <cleanup_stdio+0x1e>
 80052e4:	4620      	mov	r0, r4
 80052e6:	f001 f883 	bl	80063f0 <_fflush_r>
 80052ea:	68e1      	ldr	r1, [r4, #12]
 80052ec:	4b06      	ldr	r3, [pc, #24]	@ (8005308 <cleanup_stdio+0x3c>)
 80052ee:	4299      	cmp	r1, r3
 80052f0:	d004      	beq.n	80052fc <cleanup_stdio+0x30>
 80052f2:	4620      	mov	r0, r4
 80052f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052f8:	f001 b87a 	b.w	80063f0 <_fflush_r>
 80052fc:	bd10      	pop	{r4, pc}
 80052fe:	bf00      	nop
 8005300:	2000028c 	.word	0x2000028c
 8005304:	200002f4 	.word	0x200002f4
 8005308:	2000035c 	.word	0x2000035c

0800530c <global_stdio_init.part.0>:
 800530c:	b510      	push	{r4, lr}
 800530e:	4b0b      	ldr	r3, [pc, #44]	@ (800533c <global_stdio_init.part.0+0x30>)
 8005310:	4c0b      	ldr	r4, [pc, #44]	@ (8005340 <global_stdio_init.part.0+0x34>)
 8005312:	4a0c      	ldr	r2, [pc, #48]	@ (8005344 <global_stdio_init.part.0+0x38>)
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	4620      	mov	r0, r4
 8005318:	2200      	movs	r2, #0
 800531a:	2104      	movs	r1, #4
 800531c:	f7ff ff94 	bl	8005248 <std>
 8005320:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005324:	2201      	movs	r2, #1
 8005326:	2109      	movs	r1, #9
 8005328:	f7ff ff8e 	bl	8005248 <std>
 800532c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005330:	2202      	movs	r2, #2
 8005332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005336:	2112      	movs	r1, #18
 8005338:	f7ff bf86 	b.w	8005248 <std>
 800533c:	200003c4 	.word	0x200003c4
 8005340:	2000028c 	.word	0x2000028c
 8005344:	080052b5 	.word	0x080052b5

08005348 <__sfp_lock_acquire>:
 8005348:	4801      	ldr	r0, [pc, #4]	@ (8005350 <__sfp_lock_acquire+0x8>)
 800534a:	f000 ba7c 	b.w	8005846 <__retarget_lock_acquire_recursive>
 800534e:	bf00      	nop
 8005350:	200003cd 	.word	0x200003cd

08005354 <__sfp_lock_release>:
 8005354:	4801      	ldr	r0, [pc, #4]	@ (800535c <__sfp_lock_release+0x8>)
 8005356:	f000 ba77 	b.w	8005848 <__retarget_lock_release_recursive>
 800535a:	bf00      	nop
 800535c:	200003cd 	.word	0x200003cd

08005360 <__sinit>:
 8005360:	b510      	push	{r4, lr}
 8005362:	4604      	mov	r4, r0
 8005364:	f7ff fff0 	bl	8005348 <__sfp_lock_acquire>
 8005368:	6a23      	ldr	r3, [r4, #32]
 800536a:	b11b      	cbz	r3, 8005374 <__sinit+0x14>
 800536c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005370:	f7ff bff0 	b.w	8005354 <__sfp_lock_release>
 8005374:	4b04      	ldr	r3, [pc, #16]	@ (8005388 <__sinit+0x28>)
 8005376:	6223      	str	r3, [r4, #32]
 8005378:	4b04      	ldr	r3, [pc, #16]	@ (800538c <__sinit+0x2c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1f5      	bne.n	800536c <__sinit+0xc>
 8005380:	f7ff ffc4 	bl	800530c <global_stdio_init.part.0>
 8005384:	e7f2      	b.n	800536c <__sinit+0xc>
 8005386:	bf00      	nop
 8005388:	080052cd 	.word	0x080052cd
 800538c:	200003c4 	.word	0x200003c4

08005390 <_fwalk_sglue>:
 8005390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005394:	4607      	mov	r7, r0
 8005396:	4688      	mov	r8, r1
 8005398:	4614      	mov	r4, r2
 800539a:	2600      	movs	r6, #0
 800539c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053a0:	f1b9 0901 	subs.w	r9, r9, #1
 80053a4:	d505      	bpl.n	80053b2 <_fwalk_sglue+0x22>
 80053a6:	6824      	ldr	r4, [r4, #0]
 80053a8:	2c00      	cmp	r4, #0
 80053aa:	d1f7      	bne.n	800539c <_fwalk_sglue+0xc>
 80053ac:	4630      	mov	r0, r6
 80053ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053b2:	89ab      	ldrh	r3, [r5, #12]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d907      	bls.n	80053c8 <_fwalk_sglue+0x38>
 80053b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053bc:	3301      	adds	r3, #1
 80053be:	d003      	beq.n	80053c8 <_fwalk_sglue+0x38>
 80053c0:	4629      	mov	r1, r5
 80053c2:	4638      	mov	r0, r7
 80053c4:	47c0      	blx	r8
 80053c6:	4306      	orrs	r6, r0
 80053c8:	3568      	adds	r5, #104	@ 0x68
 80053ca:	e7e9      	b.n	80053a0 <_fwalk_sglue+0x10>

080053cc <iprintf>:
 80053cc:	b40f      	push	{r0, r1, r2, r3}
 80053ce:	b507      	push	{r0, r1, r2, lr}
 80053d0:	4906      	ldr	r1, [pc, #24]	@ (80053ec <iprintf+0x20>)
 80053d2:	ab04      	add	r3, sp, #16
 80053d4:	6808      	ldr	r0, [r1, #0]
 80053d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80053da:	6881      	ldr	r1, [r0, #8]
 80053dc:	9301      	str	r3, [sp, #4]
 80053de:	f000 fcdd 	bl	8005d9c <_vfiprintf_r>
 80053e2:	b003      	add	sp, #12
 80053e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053e8:	b004      	add	sp, #16
 80053ea:	4770      	bx	lr
 80053ec:	20000028 	.word	0x20000028

080053f0 <_puts_r>:
 80053f0:	6a03      	ldr	r3, [r0, #32]
 80053f2:	b570      	push	{r4, r5, r6, lr}
 80053f4:	6884      	ldr	r4, [r0, #8]
 80053f6:	4605      	mov	r5, r0
 80053f8:	460e      	mov	r6, r1
 80053fa:	b90b      	cbnz	r3, 8005400 <_puts_r+0x10>
 80053fc:	f7ff ffb0 	bl	8005360 <__sinit>
 8005400:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005402:	07db      	lsls	r3, r3, #31
 8005404:	d405      	bmi.n	8005412 <_puts_r+0x22>
 8005406:	89a3      	ldrh	r3, [r4, #12]
 8005408:	0598      	lsls	r0, r3, #22
 800540a:	d402      	bmi.n	8005412 <_puts_r+0x22>
 800540c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800540e:	f000 fa1a 	bl	8005846 <__retarget_lock_acquire_recursive>
 8005412:	89a3      	ldrh	r3, [r4, #12]
 8005414:	0719      	lsls	r1, r3, #28
 8005416:	d502      	bpl.n	800541e <_puts_r+0x2e>
 8005418:	6923      	ldr	r3, [r4, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d135      	bne.n	800548a <_puts_r+0x9a>
 800541e:	4621      	mov	r1, r4
 8005420:	4628      	mov	r0, r5
 8005422:	f000 f8e5 	bl	80055f0 <__swsetup_r>
 8005426:	b380      	cbz	r0, 800548a <_puts_r+0x9a>
 8005428:	f04f 35ff 	mov.w	r5, #4294967295
 800542c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800542e:	07da      	lsls	r2, r3, #31
 8005430:	d405      	bmi.n	800543e <_puts_r+0x4e>
 8005432:	89a3      	ldrh	r3, [r4, #12]
 8005434:	059b      	lsls	r3, r3, #22
 8005436:	d402      	bmi.n	800543e <_puts_r+0x4e>
 8005438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800543a:	f000 fa05 	bl	8005848 <__retarget_lock_release_recursive>
 800543e:	4628      	mov	r0, r5
 8005440:	bd70      	pop	{r4, r5, r6, pc}
 8005442:	2b00      	cmp	r3, #0
 8005444:	da04      	bge.n	8005450 <_puts_r+0x60>
 8005446:	69a2      	ldr	r2, [r4, #24]
 8005448:	429a      	cmp	r2, r3
 800544a:	dc17      	bgt.n	800547c <_puts_r+0x8c>
 800544c:	290a      	cmp	r1, #10
 800544e:	d015      	beq.n	800547c <_puts_r+0x8c>
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	6022      	str	r2, [r4, #0]
 8005456:	7019      	strb	r1, [r3, #0]
 8005458:	68a3      	ldr	r3, [r4, #8]
 800545a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800545e:	3b01      	subs	r3, #1
 8005460:	60a3      	str	r3, [r4, #8]
 8005462:	2900      	cmp	r1, #0
 8005464:	d1ed      	bne.n	8005442 <_puts_r+0x52>
 8005466:	2b00      	cmp	r3, #0
 8005468:	da11      	bge.n	800548e <_puts_r+0x9e>
 800546a:	4622      	mov	r2, r4
 800546c:	210a      	movs	r1, #10
 800546e:	4628      	mov	r0, r5
 8005470:	f000 f87f 	bl	8005572 <__swbuf_r>
 8005474:	3001      	adds	r0, #1
 8005476:	d0d7      	beq.n	8005428 <_puts_r+0x38>
 8005478:	250a      	movs	r5, #10
 800547a:	e7d7      	b.n	800542c <_puts_r+0x3c>
 800547c:	4622      	mov	r2, r4
 800547e:	4628      	mov	r0, r5
 8005480:	f000 f877 	bl	8005572 <__swbuf_r>
 8005484:	3001      	adds	r0, #1
 8005486:	d1e7      	bne.n	8005458 <_puts_r+0x68>
 8005488:	e7ce      	b.n	8005428 <_puts_r+0x38>
 800548a:	3e01      	subs	r6, #1
 800548c:	e7e4      	b.n	8005458 <_puts_r+0x68>
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	6022      	str	r2, [r4, #0]
 8005494:	220a      	movs	r2, #10
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	e7ee      	b.n	8005478 <_puts_r+0x88>
	...

0800549c <puts>:
 800549c:	4b02      	ldr	r3, [pc, #8]	@ (80054a8 <puts+0xc>)
 800549e:	4601      	mov	r1, r0
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	f7ff bfa5 	b.w	80053f0 <_puts_r>
 80054a6:	bf00      	nop
 80054a8:	20000028 	.word	0x20000028

080054ac <siprintf>:
 80054ac:	b40e      	push	{r1, r2, r3}
 80054ae:	b500      	push	{lr}
 80054b0:	b09c      	sub	sp, #112	@ 0x70
 80054b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80054b4:	9002      	str	r0, [sp, #8]
 80054b6:	9006      	str	r0, [sp, #24]
 80054b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80054bc:	4809      	ldr	r0, [pc, #36]	@ (80054e4 <siprintf+0x38>)
 80054be:	9107      	str	r1, [sp, #28]
 80054c0:	9104      	str	r1, [sp, #16]
 80054c2:	4909      	ldr	r1, [pc, #36]	@ (80054e8 <siprintf+0x3c>)
 80054c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80054c8:	9105      	str	r1, [sp, #20]
 80054ca:	6800      	ldr	r0, [r0, #0]
 80054cc:	9301      	str	r3, [sp, #4]
 80054ce:	a902      	add	r1, sp, #8
 80054d0:	f000 fb3e 	bl	8005b50 <_svfiprintf_r>
 80054d4:	9b02      	ldr	r3, [sp, #8]
 80054d6:	2200      	movs	r2, #0
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	b01c      	add	sp, #112	@ 0x70
 80054dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80054e0:	b003      	add	sp, #12
 80054e2:	4770      	bx	lr
 80054e4:	20000028 	.word	0x20000028
 80054e8:	ffff0208 	.word	0xffff0208

080054ec <__sread>:
 80054ec:	b510      	push	{r4, lr}
 80054ee:	460c      	mov	r4, r1
 80054f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f4:	f000 f958 	bl	80057a8 <_read_r>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	bfab      	itete	ge
 80054fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80054fe:	89a3      	ldrhlt	r3, [r4, #12]
 8005500:	181b      	addge	r3, r3, r0
 8005502:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005506:	bfac      	ite	ge
 8005508:	6563      	strge	r3, [r4, #84]	@ 0x54
 800550a:	81a3      	strhlt	r3, [r4, #12]
 800550c:	bd10      	pop	{r4, pc}

0800550e <__swrite>:
 800550e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005512:	461f      	mov	r7, r3
 8005514:	898b      	ldrh	r3, [r1, #12]
 8005516:	05db      	lsls	r3, r3, #23
 8005518:	4605      	mov	r5, r0
 800551a:	460c      	mov	r4, r1
 800551c:	4616      	mov	r6, r2
 800551e:	d505      	bpl.n	800552c <__swrite+0x1e>
 8005520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005524:	2302      	movs	r3, #2
 8005526:	2200      	movs	r2, #0
 8005528:	f000 f92c 	bl	8005784 <_lseek_r>
 800552c:	89a3      	ldrh	r3, [r4, #12]
 800552e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005532:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005536:	81a3      	strh	r3, [r4, #12]
 8005538:	4632      	mov	r2, r6
 800553a:	463b      	mov	r3, r7
 800553c:	4628      	mov	r0, r5
 800553e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005542:	f000 b943 	b.w	80057cc <_write_r>

08005546 <__sseek>:
 8005546:	b510      	push	{r4, lr}
 8005548:	460c      	mov	r4, r1
 800554a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800554e:	f000 f919 	bl	8005784 <_lseek_r>
 8005552:	1c43      	adds	r3, r0, #1
 8005554:	89a3      	ldrh	r3, [r4, #12]
 8005556:	bf15      	itete	ne
 8005558:	6560      	strne	r0, [r4, #84]	@ 0x54
 800555a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800555e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005562:	81a3      	strheq	r3, [r4, #12]
 8005564:	bf18      	it	ne
 8005566:	81a3      	strhne	r3, [r4, #12]
 8005568:	bd10      	pop	{r4, pc}

0800556a <__sclose>:
 800556a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800556e:	f000 b8f9 	b.w	8005764 <_close_r>

08005572 <__swbuf_r>:
 8005572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005574:	460e      	mov	r6, r1
 8005576:	4614      	mov	r4, r2
 8005578:	4605      	mov	r5, r0
 800557a:	b118      	cbz	r0, 8005584 <__swbuf_r+0x12>
 800557c:	6a03      	ldr	r3, [r0, #32]
 800557e:	b90b      	cbnz	r3, 8005584 <__swbuf_r+0x12>
 8005580:	f7ff feee 	bl	8005360 <__sinit>
 8005584:	69a3      	ldr	r3, [r4, #24]
 8005586:	60a3      	str	r3, [r4, #8]
 8005588:	89a3      	ldrh	r3, [r4, #12]
 800558a:	071a      	lsls	r2, r3, #28
 800558c:	d501      	bpl.n	8005592 <__swbuf_r+0x20>
 800558e:	6923      	ldr	r3, [r4, #16]
 8005590:	b943      	cbnz	r3, 80055a4 <__swbuf_r+0x32>
 8005592:	4621      	mov	r1, r4
 8005594:	4628      	mov	r0, r5
 8005596:	f000 f82b 	bl	80055f0 <__swsetup_r>
 800559a:	b118      	cbz	r0, 80055a4 <__swbuf_r+0x32>
 800559c:	f04f 37ff 	mov.w	r7, #4294967295
 80055a0:	4638      	mov	r0, r7
 80055a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	6922      	ldr	r2, [r4, #16]
 80055a8:	1a98      	subs	r0, r3, r2
 80055aa:	6963      	ldr	r3, [r4, #20]
 80055ac:	b2f6      	uxtb	r6, r6
 80055ae:	4283      	cmp	r3, r0
 80055b0:	4637      	mov	r7, r6
 80055b2:	dc05      	bgt.n	80055c0 <__swbuf_r+0x4e>
 80055b4:	4621      	mov	r1, r4
 80055b6:	4628      	mov	r0, r5
 80055b8:	f000 ff1a 	bl	80063f0 <_fflush_r>
 80055bc:	2800      	cmp	r0, #0
 80055be:	d1ed      	bne.n	800559c <__swbuf_r+0x2a>
 80055c0:	68a3      	ldr	r3, [r4, #8]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	60a3      	str	r3, [r4, #8]
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	6022      	str	r2, [r4, #0]
 80055cc:	701e      	strb	r6, [r3, #0]
 80055ce:	6962      	ldr	r2, [r4, #20]
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d004      	beq.n	80055e0 <__swbuf_r+0x6e>
 80055d6:	89a3      	ldrh	r3, [r4, #12]
 80055d8:	07db      	lsls	r3, r3, #31
 80055da:	d5e1      	bpl.n	80055a0 <__swbuf_r+0x2e>
 80055dc:	2e0a      	cmp	r6, #10
 80055de:	d1df      	bne.n	80055a0 <__swbuf_r+0x2e>
 80055e0:	4621      	mov	r1, r4
 80055e2:	4628      	mov	r0, r5
 80055e4:	f000 ff04 	bl	80063f0 <_fflush_r>
 80055e8:	2800      	cmp	r0, #0
 80055ea:	d0d9      	beq.n	80055a0 <__swbuf_r+0x2e>
 80055ec:	e7d6      	b.n	800559c <__swbuf_r+0x2a>
	...

080055f0 <__swsetup_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4b29      	ldr	r3, [pc, #164]	@ (8005698 <__swsetup_r+0xa8>)
 80055f4:	4605      	mov	r5, r0
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	460c      	mov	r4, r1
 80055fa:	b118      	cbz	r0, 8005604 <__swsetup_r+0x14>
 80055fc:	6a03      	ldr	r3, [r0, #32]
 80055fe:	b90b      	cbnz	r3, 8005604 <__swsetup_r+0x14>
 8005600:	f7ff feae 	bl	8005360 <__sinit>
 8005604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005608:	0719      	lsls	r1, r3, #28
 800560a:	d422      	bmi.n	8005652 <__swsetup_r+0x62>
 800560c:	06da      	lsls	r2, r3, #27
 800560e:	d407      	bmi.n	8005620 <__swsetup_r+0x30>
 8005610:	2209      	movs	r2, #9
 8005612:	602a      	str	r2, [r5, #0]
 8005614:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005618:	81a3      	strh	r3, [r4, #12]
 800561a:	f04f 30ff 	mov.w	r0, #4294967295
 800561e:	e033      	b.n	8005688 <__swsetup_r+0x98>
 8005620:	0758      	lsls	r0, r3, #29
 8005622:	d512      	bpl.n	800564a <__swsetup_r+0x5a>
 8005624:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005626:	b141      	cbz	r1, 800563a <__swsetup_r+0x4a>
 8005628:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800562c:	4299      	cmp	r1, r3
 800562e:	d002      	beq.n	8005636 <__swsetup_r+0x46>
 8005630:	4628      	mov	r0, r5
 8005632:	f000 f931 	bl	8005898 <_free_r>
 8005636:	2300      	movs	r3, #0
 8005638:	6363      	str	r3, [r4, #52]	@ 0x34
 800563a:	89a3      	ldrh	r3, [r4, #12]
 800563c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005640:	81a3      	strh	r3, [r4, #12]
 8005642:	2300      	movs	r3, #0
 8005644:	6063      	str	r3, [r4, #4]
 8005646:	6923      	ldr	r3, [r4, #16]
 8005648:	6023      	str	r3, [r4, #0]
 800564a:	89a3      	ldrh	r3, [r4, #12]
 800564c:	f043 0308 	orr.w	r3, r3, #8
 8005650:	81a3      	strh	r3, [r4, #12]
 8005652:	6923      	ldr	r3, [r4, #16]
 8005654:	b94b      	cbnz	r3, 800566a <__swsetup_r+0x7a>
 8005656:	89a3      	ldrh	r3, [r4, #12]
 8005658:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800565c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005660:	d003      	beq.n	800566a <__swsetup_r+0x7a>
 8005662:	4621      	mov	r1, r4
 8005664:	4628      	mov	r0, r5
 8005666:	f000 ff23 	bl	80064b0 <__smakebuf_r>
 800566a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800566e:	f013 0201 	ands.w	r2, r3, #1
 8005672:	d00a      	beq.n	800568a <__swsetup_r+0x9a>
 8005674:	2200      	movs	r2, #0
 8005676:	60a2      	str	r2, [r4, #8]
 8005678:	6962      	ldr	r2, [r4, #20]
 800567a:	4252      	negs	r2, r2
 800567c:	61a2      	str	r2, [r4, #24]
 800567e:	6922      	ldr	r2, [r4, #16]
 8005680:	b942      	cbnz	r2, 8005694 <__swsetup_r+0xa4>
 8005682:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005686:	d1c5      	bne.n	8005614 <__swsetup_r+0x24>
 8005688:	bd38      	pop	{r3, r4, r5, pc}
 800568a:	0799      	lsls	r1, r3, #30
 800568c:	bf58      	it	pl
 800568e:	6962      	ldrpl	r2, [r4, #20]
 8005690:	60a2      	str	r2, [r4, #8]
 8005692:	e7f4      	b.n	800567e <__swsetup_r+0x8e>
 8005694:	2000      	movs	r0, #0
 8005696:	e7f7      	b.n	8005688 <__swsetup_r+0x98>
 8005698:	20000028 	.word	0x20000028

0800569c <memset>:
 800569c:	4402      	add	r2, r0
 800569e:	4603      	mov	r3, r0
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d100      	bne.n	80056a6 <memset+0xa>
 80056a4:	4770      	bx	lr
 80056a6:	f803 1b01 	strb.w	r1, [r3], #1
 80056aa:	e7f9      	b.n	80056a0 <memset+0x4>

080056ac <strtok>:
 80056ac:	4b16      	ldr	r3, [pc, #88]	@ (8005708 <strtok+0x5c>)
 80056ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b2:	681f      	ldr	r7, [r3, #0]
 80056b4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80056b6:	4605      	mov	r5, r0
 80056b8:	460e      	mov	r6, r1
 80056ba:	b9ec      	cbnz	r4, 80056f8 <strtok+0x4c>
 80056bc:	2050      	movs	r0, #80	@ 0x50
 80056be:	f000 f935 	bl	800592c <malloc>
 80056c2:	4602      	mov	r2, r0
 80056c4:	6478      	str	r0, [r7, #68]	@ 0x44
 80056c6:	b920      	cbnz	r0, 80056d2 <strtok+0x26>
 80056c8:	4b10      	ldr	r3, [pc, #64]	@ (800570c <strtok+0x60>)
 80056ca:	4811      	ldr	r0, [pc, #68]	@ (8005710 <strtok+0x64>)
 80056cc:	215b      	movs	r1, #91	@ 0x5b
 80056ce:	f000 f8c5 	bl	800585c <__assert_func>
 80056d2:	e9c0 4400 	strd	r4, r4, [r0]
 80056d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80056da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80056de:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80056e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80056e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80056ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80056ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80056f2:	6184      	str	r4, [r0, #24]
 80056f4:	7704      	strb	r4, [r0, #28]
 80056f6:	6244      	str	r4, [r0, #36]	@ 0x24
 80056f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056fa:	4631      	mov	r1, r6
 80056fc:	4628      	mov	r0, r5
 80056fe:	2301      	movs	r3, #1
 8005700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005704:	f000 b806 	b.w	8005714 <__strtok_r>
 8005708:	20000028 	.word	0x20000028
 800570c:	080067b4 	.word	0x080067b4
 8005710:	080067cb 	.word	0x080067cb

08005714 <__strtok_r>:
 8005714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005716:	4604      	mov	r4, r0
 8005718:	b908      	cbnz	r0, 800571e <__strtok_r+0xa>
 800571a:	6814      	ldr	r4, [r2, #0]
 800571c:	b144      	cbz	r4, 8005730 <__strtok_r+0x1c>
 800571e:	4620      	mov	r0, r4
 8005720:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005724:	460f      	mov	r7, r1
 8005726:	f817 6b01 	ldrb.w	r6, [r7], #1
 800572a:	b91e      	cbnz	r6, 8005734 <__strtok_r+0x20>
 800572c:	b965      	cbnz	r5, 8005748 <__strtok_r+0x34>
 800572e:	6015      	str	r5, [r2, #0]
 8005730:	2000      	movs	r0, #0
 8005732:	e005      	b.n	8005740 <__strtok_r+0x2c>
 8005734:	42b5      	cmp	r5, r6
 8005736:	d1f6      	bne.n	8005726 <__strtok_r+0x12>
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1f0      	bne.n	800571e <__strtok_r+0xa>
 800573c:	6014      	str	r4, [r2, #0]
 800573e:	7003      	strb	r3, [r0, #0]
 8005740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005742:	461c      	mov	r4, r3
 8005744:	e00c      	b.n	8005760 <__strtok_r+0x4c>
 8005746:	b915      	cbnz	r5, 800574e <__strtok_r+0x3a>
 8005748:	f814 3b01 	ldrb.w	r3, [r4], #1
 800574c:	460e      	mov	r6, r1
 800574e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005752:	42ab      	cmp	r3, r5
 8005754:	d1f7      	bne.n	8005746 <__strtok_r+0x32>
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0f3      	beq.n	8005742 <__strtok_r+0x2e>
 800575a:	2300      	movs	r3, #0
 800575c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005760:	6014      	str	r4, [r2, #0]
 8005762:	e7ed      	b.n	8005740 <__strtok_r+0x2c>

08005764 <_close_r>:
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	4d06      	ldr	r5, [pc, #24]	@ (8005780 <_close_r+0x1c>)
 8005768:	2300      	movs	r3, #0
 800576a:	4604      	mov	r4, r0
 800576c:	4608      	mov	r0, r1
 800576e:	602b      	str	r3, [r5, #0]
 8005770:	f7fc f80c 	bl	800178c <_close>
 8005774:	1c43      	adds	r3, r0, #1
 8005776:	d102      	bne.n	800577e <_close_r+0x1a>
 8005778:	682b      	ldr	r3, [r5, #0]
 800577a:	b103      	cbz	r3, 800577e <_close_r+0x1a>
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	bd38      	pop	{r3, r4, r5, pc}
 8005780:	200003c8 	.word	0x200003c8

08005784 <_lseek_r>:
 8005784:	b538      	push	{r3, r4, r5, lr}
 8005786:	4d07      	ldr	r5, [pc, #28]	@ (80057a4 <_lseek_r+0x20>)
 8005788:	4604      	mov	r4, r0
 800578a:	4608      	mov	r0, r1
 800578c:	4611      	mov	r1, r2
 800578e:	2200      	movs	r2, #0
 8005790:	602a      	str	r2, [r5, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	f7fc f821 	bl	80017da <_lseek>
 8005798:	1c43      	adds	r3, r0, #1
 800579a:	d102      	bne.n	80057a2 <_lseek_r+0x1e>
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	b103      	cbz	r3, 80057a2 <_lseek_r+0x1e>
 80057a0:	6023      	str	r3, [r4, #0]
 80057a2:	bd38      	pop	{r3, r4, r5, pc}
 80057a4:	200003c8 	.word	0x200003c8

080057a8 <_read_r>:
 80057a8:	b538      	push	{r3, r4, r5, lr}
 80057aa:	4d07      	ldr	r5, [pc, #28]	@ (80057c8 <_read_r+0x20>)
 80057ac:	4604      	mov	r4, r0
 80057ae:	4608      	mov	r0, r1
 80057b0:	4611      	mov	r1, r2
 80057b2:	2200      	movs	r2, #0
 80057b4:	602a      	str	r2, [r5, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f7fb ffaf 	bl	800171a <_read>
 80057bc:	1c43      	adds	r3, r0, #1
 80057be:	d102      	bne.n	80057c6 <_read_r+0x1e>
 80057c0:	682b      	ldr	r3, [r5, #0]
 80057c2:	b103      	cbz	r3, 80057c6 <_read_r+0x1e>
 80057c4:	6023      	str	r3, [r4, #0]
 80057c6:	bd38      	pop	{r3, r4, r5, pc}
 80057c8:	200003c8 	.word	0x200003c8

080057cc <_write_r>:
 80057cc:	b538      	push	{r3, r4, r5, lr}
 80057ce:	4d07      	ldr	r5, [pc, #28]	@ (80057ec <_write_r+0x20>)
 80057d0:	4604      	mov	r4, r0
 80057d2:	4608      	mov	r0, r1
 80057d4:	4611      	mov	r1, r2
 80057d6:	2200      	movs	r2, #0
 80057d8:	602a      	str	r2, [r5, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	f7fb ffba 	bl	8001754 <_write>
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	d102      	bne.n	80057ea <_write_r+0x1e>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	b103      	cbz	r3, 80057ea <_write_r+0x1e>
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	bd38      	pop	{r3, r4, r5, pc}
 80057ec:	200003c8 	.word	0x200003c8

080057f0 <__errno>:
 80057f0:	4b01      	ldr	r3, [pc, #4]	@ (80057f8 <__errno+0x8>)
 80057f2:	6818      	ldr	r0, [r3, #0]
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	20000028 	.word	0x20000028

080057fc <__libc_init_array>:
 80057fc:	b570      	push	{r4, r5, r6, lr}
 80057fe:	4d0d      	ldr	r5, [pc, #52]	@ (8005834 <__libc_init_array+0x38>)
 8005800:	4c0d      	ldr	r4, [pc, #52]	@ (8005838 <__libc_init_array+0x3c>)
 8005802:	1b64      	subs	r4, r4, r5
 8005804:	10a4      	asrs	r4, r4, #2
 8005806:	2600      	movs	r6, #0
 8005808:	42a6      	cmp	r6, r4
 800580a:	d109      	bne.n	8005820 <__libc_init_array+0x24>
 800580c:	4d0b      	ldr	r5, [pc, #44]	@ (800583c <__libc_init_array+0x40>)
 800580e:	4c0c      	ldr	r4, [pc, #48]	@ (8005840 <__libc_init_array+0x44>)
 8005810:	f000 ff66 	bl	80066e0 <_init>
 8005814:	1b64      	subs	r4, r4, r5
 8005816:	10a4      	asrs	r4, r4, #2
 8005818:	2600      	movs	r6, #0
 800581a:	42a6      	cmp	r6, r4
 800581c:	d105      	bne.n	800582a <__libc_init_array+0x2e>
 800581e:	bd70      	pop	{r4, r5, r6, pc}
 8005820:	f855 3b04 	ldr.w	r3, [r5], #4
 8005824:	4798      	blx	r3
 8005826:	3601      	adds	r6, #1
 8005828:	e7ee      	b.n	8005808 <__libc_init_array+0xc>
 800582a:	f855 3b04 	ldr.w	r3, [r5], #4
 800582e:	4798      	blx	r3
 8005830:	3601      	adds	r6, #1
 8005832:	e7f2      	b.n	800581a <__libc_init_array+0x1e>
 8005834:	0800689c 	.word	0x0800689c
 8005838:	0800689c 	.word	0x0800689c
 800583c:	0800689c 	.word	0x0800689c
 8005840:	080068a0 	.word	0x080068a0

08005844 <__retarget_lock_init_recursive>:
 8005844:	4770      	bx	lr

08005846 <__retarget_lock_acquire_recursive>:
 8005846:	4770      	bx	lr

08005848 <__retarget_lock_release_recursive>:
 8005848:	4770      	bx	lr

0800584a <strcpy>:
 800584a:	4603      	mov	r3, r0
 800584c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005850:	f803 2b01 	strb.w	r2, [r3], #1
 8005854:	2a00      	cmp	r2, #0
 8005856:	d1f9      	bne.n	800584c <strcpy+0x2>
 8005858:	4770      	bx	lr
	...

0800585c <__assert_func>:
 800585c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800585e:	4614      	mov	r4, r2
 8005860:	461a      	mov	r2, r3
 8005862:	4b09      	ldr	r3, [pc, #36]	@ (8005888 <__assert_func+0x2c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4605      	mov	r5, r0
 8005868:	68d8      	ldr	r0, [r3, #12]
 800586a:	b954      	cbnz	r4, 8005882 <__assert_func+0x26>
 800586c:	4b07      	ldr	r3, [pc, #28]	@ (800588c <__assert_func+0x30>)
 800586e:	461c      	mov	r4, r3
 8005870:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005874:	9100      	str	r1, [sp, #0]
 8005876:	462b      	mov	r3, r5
 8005878:	4905      	ldr	r1, [pc, #20]	@ (8005890 <__assert_func+0x34>)
 800587a:	f000 fde1 	bl	8006440 <fiprintf>
 800587e:	f000 fead 	bl	80065dc <abort>
 8005882:	4b04      	ldr	r3, [pc, #16]	@ (8005894 <__assert_func+0x38>)
 8005884:	e7f4      	b.n	8005870 <__assert_func+0x14>
 8005886:	bf00      	nop
 8005888:	20000028 	.word	0x20000028
 800588c:	08006860 	.word	0x08006860
 8005890:	08006832 	.word	0x08006832
 8005894:	08006825 	.word	0x08006825

08005898 <_free_r>:
 8005898:	b538      	push	{r3, r4, r5, lr}
 800589a:	4605      	mov	r5, r0
 800589c:	2900      	cmp	r1, #0
 800589e:	d041      	beq.n	8005924 <_free_r+0x8c>
 80058a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058a4:	1f0c      	subs	r4, r1, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	bfb8      	it	lt
 80058aa:	18e4      	addlt	r4, r4, r3
 80058ac:	f000 f8e8 	bl	8005a80 <__malloc_lock>
 80058b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005928 <_free_r+0x90>)
 80058b2:	6813      	ldr	r3, [r2, #0]
 80058b4:	b933      	cbnz	r3, 80058c4 <_free_r+0x2c>
 80058b6:	6063      	str	r3, [r4, #4]
 80058b8:	6014      	str	r4, [r2, #0]
 80058ba:	4628      	mov	r0, r5
 80058bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058c0:	f000 b8e4 	b.w	8005a8c <__malloc_unlock>
 80058c4:	42a3      	cmp	r3, r4
 80058c6:	d908      	bls.n	80058da <_free_r+0x42>
 80058c8:	6820      	ldr	r0, [r4, #0]
 80058ca:	1821      	adds	r1, r4, r0
 80058cc:	428b      	cmp	r3, r1
 80058ce:	bf01      	itttt	eq
 80058d0:	6819      	ldreq	r1, [r3, #0]
 80058d2:	685b      	ldreq	r3, [r3, #4]
 80058d4:	1809      	addeq	r1, r1, r0
 80058d6:	6021      	streq	r1, [r4, #0]
 80058d8:	e7ed      	b.n	80058b6 <_free_r+0x1e>
 80058da:	461a      	mov	r2, r3
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	b10b      	cbz	r3, 80058e4 <_free_r+0x4c>
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d9fa      	bls.n	80058da <_free_r+0x42>
 80058e4:	6811      	ldr	r1, [r2, #0]
 80058e6:	1850      	adds	r0, r2, r1
 80058e8:	42a0      	cmp	r0, r4
 80058ea:	d10b      	bne.n	8005904 <_free_r+0x6c>
 80058ec:	6820      	ldr	r0, [r4, #0]
 80058ee:	4401      	add	r1, r0
 80058f0:	1850      	adds	r0, r2, r1
 80058f2:	4283      	cmp	r3, r0
 80058f4:	6011      	str	r1, [r2, #0]
 80058f6:	d1e0      	bne.n	80058ba <_free_r+0x22>
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	6053      	str	r3, [r2, #4]
 80058fe:	4408      	add	r0, r1
 8005900:	6010      	str	r0, [r2, #0]
 8005902:	e7da      	b.n	80058ba <_free_r+0x22>
 8005904:	d902      	bls.n	800590c <_free_r+0x74>
 8005906:	230c      	movs	r3, #12
 8005908:	602b      	str	r3, [r5, #0]
 800590a:	e7d6      	b.n	80058ba <_free_r+0x22>
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	1821      	adds	r1, r4, r0
 8005910:	428b      	cmp	r3, r1
 8005912:	bf04      	itt	eq
 8005914:	6819      	ldreq	r1, [r3, #0]
 8005916:	685b      	ldreq	r3, [r3, #4]
 8005918:	6063      	str	r3, [r4, #4]
 800591a:	bf04      	itt	eq
 800591c:	1809      	addeq	r1, r1, r0
 800591e:	6021      	streq	r1, [r4, #0]
 8005920:	6054      	str	r4, [r2, #4]
 8005922:	e7ca      	b.n	80058ba <_free_r+0x22>
 8005924:	bd38      	pop	{r3, r4, r5, pc}
 8005926:	bf00      	nop
 8005928:	200003d4 	.word	0x200003d4

0800592c <malloc>:
 800592c:	4b02      	ldr	r3, [pc, #8]	@ (8005938 <malloc+0xc>)
 800592e:	4601      	mov	r1, r0
 8005930:	6818      	ldr	r0, [r3, #0]
 8005932:	f000 b825 	b.w	8005980 <_malloc_r>
 8005936:	bf00      	nop
 8005938:	20000028 	.word	0x20000028

0800593c <sbrk_aligned>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	4e0f      	ldr	r6, [pc, #60]	@ (800597c <sbrk_aligned+0x40>)
 8005940:	460c      	mov	r4, r1
 8005942:	6831      	ldr	r1, [r6, #0]
 8005944:	4605      	mov	r5, r0
 8005946:	b911      	cbnz	r1, 800594e <sbrk_aligned+0x12>
 8005948:	f000 fe2a 	bl	80065a0 <_sbrk_r>
 800594c:	6030      	str	r0, [r6, #0]
 800594e:	4621      	mov	r1, r4
 8005950:	4628      	mov	r0, r5
 8005952:	f000 fe25 	bl	80065a0 <_sbrk_r>
 8005956:	1c43      	adds	r3, r0, #1
 8005958:	d103      	bne.n	8005962 <sbrk_aligned+0x26>
 800595a:	f04f 34ff 	mov.w	r4, #4294967295
 800595e:	4620      	mov	r0, r4
 8005960:	bd70      	pop	{r4, r5, r6, pc}
 8005962:	1cc4      	adds	r4, r0, #3
 8005964:	f024 0403 	bic.w	r4, r4, #3
 8005968:	42a0      	cmp	r0, r4
 800596a:	d0f8      	beq.n	800595e <sbrk_aligned+0x22>
 800596c:	1a21      	subs	r1, r4, r0
 800596e:	4628      	mov	r0, r5
 8005970:	f000 fe16 	bl	80065a0 <_sbrk_r>
 8005974:	3001      	adds	r0, #1
 8005976:	d1f2      	bne.n	800595e <sbrk_aligned+0x22>
 8005978:	e7ef      	b.n	800595a <sbrk_aligned+0x1e>
 800597a:	bf00      	nop
 800597c:	200003d0 	.word	0x200003d0

08005980 <_malloc_r>:
 8005980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005984:	1ccd      	adds	r5, r1, #3
 8005986:	f025 0503 	bic.w	r5, r5, #3
 800598a:	3508      	adds	r5, #8
 800598c:	2d0c      	cmp	r5, #12
 800598e:	bf38      	it	cc
 8005990:	250c      	movcc	r5, #12
 8005992:	2d00      	cmp	r5, #0
 8005994:	4606      	mov	r6, r0
 8005996:	db01      	blt.n	800599c <_malloc_r+0x1c>
 8005998:	42a9      	cmp	r1, r5
 800599a:	d904      	bls.n	80059a6 <_malloc_r+0x26>
 800599c:	230c      	movs	r3, #12
 800599e:	6033      	str	r3, [r6, #0]
 80059a0:	2000      	movs	r0, #0
 80059a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a7c <_malloc_r+0xfc>
 80059aa:	f000 f869 	bl	8005a80 <__malloc_lock>
 80059ae:	f8d8 3000 	ldr.w	r3, [r8]
 80059b2:	461c      	mov	r4, r3
 80059b4:	bb44      	cbnz	r4, 8005a08 <_malloc_r+0x88>
 80059b6:	4629      	mov	r1, r5
 80059b8:	4630      	mov	r0, r6
 80059ba:	f7ff ffbf 	bl	800593c <sbrk_aligned>
 80059be:	1c43      	adds	r3, r0, #1
 80059c0:	4604      	mov	r4, r0
 80059c2:	d158      	bne.n	8005a76 <_malloc_r+0xf6>
 80059c4:	f8d8 4000 	ldr.w	r4, [r8]
 80059c8:	4627      	mov	r7, r4
 80059ca:	2f00      	cmp	r7, #0
 80059cc:	d143      	bne.n	8005a56 <_malloc_r+0xd6>
 80059ce:	2c00      	cmp	r4, #0
 80059d0:	d04b      	beq.n	8005a6a <_malloc_r+0xea>
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	4639      	mov	r1, r7
 80059d6:	4630      	mov	r0, r6
 80059d8:	eb04 0903 	add.w	r9, r4, r3
 80059dc:	f000 fde0 	bl	80065a0 <_sbrk_r>
 80059e0:	4581      	cmp	r9, r0
 80059e2:	d142      	bne.n	8005a6a <_malloc_r+0xea>
 80059e4:	6821      	ldr	r1, [r4, #0]
 80059e6:	1a6d      	subs	r5, r5, r1
 80059e8:	4629      	mov	r1, r5
 80059ea:	4630      	mov	r0, r6
 80059ec:	f7ff ffa6 	bl	800593c <sbrk_aligned>
 80059f0:	3001      	adds	r0, #1
 80059f2:	d03a      	beq.n	8005a6a <_malloc_r+0xea>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	442b      	add	r3, r5
 80059f8:	6023      	str	r3, [r4, #0]
 80059fa:	f8d8 3000 	ldr.w	r3, [r8]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	bb62      	cbnz	r2, 8005a5c <_malloc_r+0xdc>
 8005a02:	f8c8 7000 	str.w	r7, [r8]
 8005a06:	e00f      	b.n	8005a28 <_malloc_r+0xa8>
 8005a08:	6822      	ldr	r2, [r4, #0]
 8005a0a:	1b52      	subs	r2, r2, r5
 8005a0c:	d420      	bmi.n	8005a50 <_malloc_r+0xd0>
 8005a0e:	2a0b      	cmp	r2, #11
 8005a10:	d917      	bls.n	8005a42 <_malloc_r+0xc2>
 8005a12:	1961      	adds	r1, r4, r5
 8005a14:	42a3      	cmp	r3, r4
 8005a16:	6025      	str	r5, [r4, #0]
 8005a18:	bf18      	it	ne
 8005a1a:	6059      	strne	r1, [r3, #4]
 8005a1c:	6863      	ldr	r3, [r4, #4]
 8005a1e:	bf08      	it	eq
 8005a20:	f8c8 1000 	streq.w	r1, [r8]
 8005a24:	5162      	str	r2, [r4, r5]
 8005a26:	604b      	str	r3, [r1, #4]
 8005a28:	4630      	mov	r0, r6
 8005a2a:	f000 f82f 	bl	8005a8c <__malloc_unlock>
 8005a2e:	f104 000b 	add.w	r0, r4, #11
 8005a32:	1d23      	adds	r3, r4, #4
 8005a34:	f020 0007 	bic.w	r0, r0, #7
 8005a38:	1ac2      	subs	r2, r0, r3
 8005a3a:	bf1c      	itt	ne
 8005a3c:	1a1b      	subne	r3, r3, r0
 8005a3e:	50a3      	strne	r3, [r4, r2]
 8005a40:	e7af      	b.n	80059a2 <_malloc_r+0x22>
 8005a42:	6862      	ldr	r2, [r4, #4]
 8005a44:	42a3      	cmp	r3, r4
 8005a46:	bf0c      	ite	eq
 8005a48:	f8c8 2000 	streq.w	r2, [r8]
 8005a4c:	605a      	strne	r2, [r3, #4]
 8005a4e:	e7eb      	b.n	8005a28 <_malloc_r+0xa8>
 8005a50:	4623      	mov	r3, r4
 8005a52:	6864      	ldr	r4, [r4, #4]
 8005a54:	e7ae      	b.n	80059b4 <_malloc_r+0x34>
 8005a56:	463c      	mov	r4, r7
 8005a58:	687f      	ldr	r7, [r7, #4]
 8005a5a:	e7b6      	b.n	80059ca <_malloc_r+0x4a>
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	42a3      	cmp	r3, r4
 8005a62:	d1fb      	bne.n	8005a5c <_malloc_r+0xdc>
 8005a64:	2300      	movs	r3, #0
 8005a66:	6053      	str	r3, [r2, #4]
 8005a68:	e7de      	b.n	8005a28 <_malloc_r+0xa8>
 8005a6a:	230c      	movs	r3, #12
 8005a6c:	6033      	str	r3, [r6, #0]
 8005a6e:	4630      	mov	r0, r6
 8005a70:	f000 f80c 	bl	8005a8c <__malloc_unlock>
 8005a74:	e794      	b.n	80059a0 <_malloc_r+0x20>
 8005a76:	6005      	str	r5, [r0, #0]
 8005a78:	e7d6      	b.n	8005a28 <_malloc_r+0xa8>
 8005a7a:	bf00      	nop
 8005a7c:	200003d4 	.word	0x200003d4

08005a80 <__malloc_lock>:
 8005a80:	4801      	ldr	r0, [pc, #4]	@ (8005a88 <__malloc_lock+0x8>)
 8005a82:	f7ff bee0 	b.w	8005846 <__retarget_lock_acquire_recursive>
 8005a86:	bf00      	nop
 8005a88:	200003cc 	.word	0x200003cc

08005a8c <__malloc_unlock>:
 8005a8c:	4801      	ldr	r0, [pc, #4]	@ (8005a94 <__malloc_unlock+0x8>)
 8005a8e:	f7ff bedb 	b.w	8005848 <__retarget_lock_release_recursive>
 8005a92:	bf00      	nop
 8005a94:	200003cc 	.word	0x200003cc

08005a98 <__ssputs_r>:
 8005a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a9c:	688e      	ldr	r6, [r1, #8]
 8005a9e:	461f      	mov	r7, r3
 8005aa0:	42be      	cmp	r6, r7
 8005aa2:	680b      	ldr	r3, [r1, #0]
 8005aa4:	4682      	mov	sl, r0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	4690      	mov	r8, r2
 8005aaa:	d82d      	bhi.n	8005b08 <__ssputs_r+0x70>
 8005aac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ab0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ab4:	d026      	beq.n	8005b04 <__ssputs_r+0x6c>
 8005ab6:	6965      	ldr	r5, [r4, #20]
 8005ab8:	6909      	ldr	r1, [r1, #16]
 8005aba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005abe:	eba3 0901 	sub.w	r9, r3, r1
 8005ac2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ac6:	1c7b      	adds	r3, r7, #1
 8005ac8:	444b      	add	r3, r9
 8005aca:	106d      	asrs	r5, r5, #1
 8005acc:	429d      	cmp	r5, r3
 8005ace:	bf38      	it	cc
 8005ad0:	461d      	movcc	r5, r3
 8005ad2:	0553      	lsls	r3, r2, #21
 8005ad4:	d527      	bpl.n	8005b26 <__ssputs_r+0x8e>
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	f7ff ff52 	bl	8005980 <_malloc_r>
 8005adc:	4606      	mov	r6, r0
 8005ade:	b360      	cbz	r0, 8005b3a <__ssputs_r+0xa2>
 8005ae0:	6921      	ldr	r1, [r4, #16]
 8005ae2:	464a      	mov	r2, r9
 8005ae4:	f000 fd6c 	bl	80065c0 <memcpy>
 8005ae8:	89a3      	ldrh	r3, [r4, #12]
 8005aea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005af2:	81a3      	strh	r3, [r4, #12]
 8005af4:	6126      	str	r6, [r4, #16]
 8005af6:	6165      	str	r5, [r4, #20]
 8005af8:	444e      	add	r6, r9
 8005afa:	eba5 0509 	sub.w	r5, r5, r9
 8005afe:	6026      	str	r6, [r4, #0]
 8005b00:	60a5      	str	r5, [r4, #8]
 8005b02:	463e      	mov	r6, r7
 8005b04:	42be      	cmp	r6, r7
 8005b06:	d900      	bls.n	8005b0a <__ssputs_r+0x72>
 8005b08:	463e      	mov	r6, r7
 8005b0a:	6820      	ldr	r0, [r4, #0]
 8005b0c:	4632      	mov	r2, r6
 8005b0e:	4641      	mov	r1, r8
 8005b10:	f000 fd0a 	bl	8006528 <memmove>
 8005b14:	68a3      	ldr	r3, [r4, #8]
 8005b16:	1b9b      	subs	r3, r3, r6
 8005b18:	60a3      	str	r3, [r4, #8]
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	4433      	add	r3, r6
 8005b1e:	6023      	str	r3, [r4, #0]
 8005b20:	2000      	movs	r0, #0
 8005b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b26:	462a      	mov	r2, r5
 8005b28:	f000 fd5f 	bl	80065ea <_realloc_r>
 8005b2c:	4606      	mov	r6, r0
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d1e0      	bne.n	8005af4 <__ssputs_r+0x5c>
 8005b32:	6921      	ldr	r1, [r4, #16]
 8005b34:	4650      	mov	r0, sl
 8005b36:	f7ff feaf 	bl	8005898 <_free_r>
 8005b3a:	230c      	movs	r3, #12
 8005b3c:	f8ca 3000 	str.w	r3, [sl]
 8005b40:	89a3      	ldrh	r3, [r4, #12]
 8005b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b46:	81a3      	strh	r3, [r4, #12]
 8005b48:	f04f 30ff 	mov.w	r0, #4294967295
 8005b4c:	e7e9      	b.n	8005b22 <__ssputs_r+0x8a>
	...

08005b50 <_svfiprintf_r>:
 8005b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b54:	4698      	mov	r8, r3
 8005b56:	898b      	ldrh	r3, [r1, #12]
 8005b58:	061b      	lsls	r3, r3, #24
 8005b5a:	b09d      	sub	sp, #116	@ 0x74
 8005b5c:	4607      	mov	r7, r0
 8005b5e:	460d      	mov	r5, r1
 8005b60:	4614      	mov	r4, r2
 8005b62:	d510      	bpl.n	8005b86 <_svfiprintf_r+0x36>
 8005b64:	690b      	ldr	r3, [r1, #16]
 8005b66:	b973      	cbnz	r3, 8005b86 <_svfiprintf_r+0x36>
 8005b68:	2140      	movs	r1, #64	@ 0x40
 8005b6a:	f7ff ff09 	bl	8005980 <_malloc_r>
 8005b6e:	6028      	str	r0, [r5, #0]
 8005b70:	6128      	str	r0, [r5, #16]
 8005b72:	b930      	cbnz	r0, 8005b82 <_svfiprintf_r+0x32>
 8005b74:	230c      	movs	r3, #12
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7c:	b01d      	add	sp, #116	@ 0x74
 8005b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b82:	2340      	movs	r3, #64	@ 0x40
 8005b84:	616b      	str	r3, [r5, #20]
 8005b86:	2300      	movs	r3, #0
 8005b88:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b8a:	2320      	movs	r3, #32
 8005b8c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b90:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b94:	2330      	movs	r3, #48	@ 0x30
 8005b96:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d34 <_svfiprintf_r+0x1e4>
 8005b9a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b9e:	f04f 0901 	mov.w	r9, #1
 8005ba2:	4623      	mov	r3, r4
 8005ba4:	469a      	mov	sl, r3
 8005ba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005baa:	b10a      	cbz	r2, 8005bb0 <_svfiprintf_r+0x60>
 8005bac:	2a25      	cmp	r2, #37	@ 0x25
 8005bae:	d1f9      	bne.n	8005ba4 <_svfiprintf_r+0x54>
 8005bb0:	ebba 0b04 	subs.w	fp, sl, r4
 8005bb4:	d00b      	beq.n	8005bce <_svfiprintf_r+0x7e>
 8005bb6:	465b      	mov	r3, fp
 8005bb8:	4622      	mov	r2, r4
 8005bba:	4629      	mov	r1, r5
 8005bbc:	4638      	mov	r0, r7
 8005bbe:	f7ff ff6b 	bl	8005a98 <__ssputs_r>
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	f000 80a7 	beq.w	8005d16 <_svfiprintf_r+0x1c6>
 8005bc8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bca:	445a      	add	r2, fp
 8005bcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bce:	f89a 3000 	ldrb.w	r3, [sl]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 809f 	beq.w	8005d16 <_svfiprintf_r+0x1c6>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f04f 32ff 	mov.w	r2, #4294967295
 8005bde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005be2:	f10a 0a01 	add.w	sl, sl, #1
 8005be6:	9304      	str	r3, [sp, #16]
 8005be8:	9307      	str	r3, [sp, #28]
 8005bea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bee:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bf0:	4654      	mov	r4, sl
 8005bf2:	2205      	movs	r2, #5
 8005bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf8:	484e      	ldr	r0, [pc, #312]	@ (8005d34 <_svfiprintf_r+0x1e4>)
 8005bfa:	f7fa fb09 	bl	8000210 <memchr>
 8005bfe:	9a04      	ldr	r2, [sp, #16]
 8005c00:	b9d8      	cbnz	r0, 8005c3a <_svfiprintf_r+0xea>
 8005c02:	06d0      	lsls	r0, r2, #27
 8005c04:	bf44      	itt	mi
 8005c06:	2320      	movmi	r3, #32
 8005c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c0c:	0711      	lsls	r1, r2, #28
 8005c0e:	bf44      	itt	mi
 8005c10:	232b      	movmi	r3, #43	@ 0x2b
 8005c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c16:	f89a 3000 	ldrb.w	r3, [sl]
 8005c1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c1c:	d015      	beq.n	8005c4a <_svfiprintf_r+0xfa>
 8005c1e:	9a07      	ldr	r2, [sp, #28]
 8005c20:	4654      	mov	r4, sl
 8005c22:	2000      	movs	r0, #0
 8005c24:	f04f 0c0a 	mov.w	ip, #10
 8005c28:	4621      	mov	r1, r4
 8005c2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c2e:	3b30      	subs	r3, #48	@ 0x30
 8005c30:	2b09      	cmp	r3, #9
 8005c32:	d94b      	bls.n	8005ccc <_svfiprintf_r+0x17c>
 8005c34:	b1b0      	cbz	r0, 8005c64 <_svfiprintf_r+0x114>
 8005c36:	9207      	str	r2, [sp, #28]
 8005c38:	e014      	b.n	8005c64 <_svfiprintf_r+0x114>
 8005c3a:	eba0 0308 	sub.w	r3, r0, r8
 8005c3e:	fa09 f303 	lsl.w	r3, r9, r3
 8005c42:	4313      	orrs	r3, r2
 8005c44:	9304      	str	r3, [sp, #16]
 8005c46:	46a2      	mov	sl, r4
 8005c48:	e7d2      	b.n	8005bf0 <_svfiprintf_r+0xa0>
 8005c4a:	9b03      	ldr	r3, [sp, #12]
 8005c4c:	1d19      	adds	r1, r3, #4
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	9103      	str	r1, [sp, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	bfbb      	ittet	lt
 8005c56:	425b      	neglt	r3, r3
 8005c58:	f042 0202 	orrlt.w	r2, r2, #2
 8005c5c:	9307      	strge	r3, [sp, #28]
 8005c5e:	9307      	strlt	r3, [sp, #28]
 8005c60:	bfb8      	it	lt
 8005c62:	9204      	strlt	r2, [sp, #16]
 8005c64:	7823      	ldrb	r3, [r4, #0]
 8005c66:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c68:	d10a      	bne.n	8005c80 <_svfiprintf_r+0x130>
 8005c6a:	7863      	ldrb	r3, [r4, #1]
 8005c6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c6e:	d132      	bne.n	8005cd6 <_svfiprintf_r+0x186>
 8005c70:	9b03      	ldr	r3, [sp, #12]
 8005c72:	1d1a      	adds	r2, r3, #4
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	9203      	str	r2, [sp, #12]
 8005c78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c7c:	3402      	adds	r4, #2
 8005c7e:	9305      	str	r3, [sp, #20]
 8005c80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d44 <_svfiprintf_r+0x1f4>
 8005c84:	7821      	ldrb	r1, [r4, #0]
 8005c86:	2203      	movs	r2, #3
 8005c88:	4650      	mov	r0, sl
 8005c8a:	f7fa fac1 	bl	8000210 <memchr>
 8005c8e:	b138      	cbz	r0, 8005ca0 <_svfiprintf_r+0x150>
 8005c90:	9b04      	ldr	r3, [sp, #16]
 8005c92:	eba0 000a 	sub.w	r0, r0, sl
 8005c96:	2240      	movs	r2, #64	@ 0x40
 8005c98:	4082      	lsls	r2, r0
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	3401      	adds	r4, #1
 8005c9e:	9304      	str	r3, [sp, #16]
 8005ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca4:	4824      	ldr	r0, [pc, #144]	@ (8005d38 <_svfiprintf_r+0x1e8>)
 8005ca6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005caa:	2206      	movs	r2, #6
 8005cac:	f7fa fab0 	bl	8000210 <memchr>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	d036      	beq.n	8005d22 <_svfiprintf_r+0x1d2>
 8005cb4:	4b21      	ldr	r3, [pc, #132]	@ (8005d3c <_svfiprintf_r+0x1ec>)
 8005cb6:	bb1b      	cbnz	r3, 8005d00 <_svfiprintf_r+0x1b0>
 8005cb8:	9b03      	ldr	r3, [sp, #12]
 8005cba:	3307      	adds	r3, #7
 8005cbc:	f023 0307 	bic.w	r3, r3, #7
 8005cc0:	3308      	adds	r3, #8
 8005cc2:	9303      	str	r3, [sp, #12]
 8005cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cc6:	4433      	add	r3, r6
 8005cc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cca:	e76a      	b.n	8005ba2 <_svfiprintf_r+0x52>
 8005ccc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	2001      	movs	r0, #1
 8005cd4:	e7a8      	b.n	8005c28 <_svfiprintf_r+0xd8>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	3401      	adds	r4, #1
 8005cda:	9305      	str	r3, [sp, #20]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	f04f 0c0a 	mov.w	ip, #10
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ce8:	3a30      	subs	r2, #48	@ 0x30
 8005cea:	2a09      	cmp	r2, #9
 8005cec:	d903      	bls.n	8005cf6 <_svfiprintf_r+0x1a6>
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0c6      	beq.n	8005c80 <_svfiprintf_r+0x130>
 8005cf2:	9105      	str	r1, [sp, #20]
 8005cf4:	e7c4      	b.n	8005c80 <_svfiprintf_r+0x130>
 8005cf6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e7f0      	b.n	8005ce2 <_svfiprintf_r+0x192>
 8005d00:	ab03      	add	r3, sp, #12
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	462a      	mov	r2, r5
 8005d06:	4b0e      	ldr	r3, [pc, #56]	@ (8005d40 <_svfiprintf_r+0x1f0>)
 8005d08:	a904      	add	r1, sp, #16
 8005d0a:	4638      	mov	r0, r7
 8005d0c:	f3af 8000 	nop.w
 8005d10:	1c42      	adds	r2, r0, #1
 8005d12:	4606      	mov	r6, r0
 8005d14:	d1d6      	bne.n	8005cc4 <_svfiprintf_r+0x174>
 8005d16:	89ab      	ldrh	r3, [r5, #12]
 8005d18:	065b      	lsls	r3, r3, #25
 8005d1a:	f53f af2d 	bmi.w	8005b78 <_svfiprintf_r+0x28>
 8005d1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d20:	e72c      	b.n	8005b7c <_svfiprintf_r+0x2c>
 8005d22:	ab03      	add	r3, sp, #12
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	462a      	mov	r2, r5
 8005d28:	4b05      	ldr	r3, [pc, #20]	@ (8005d40 <_svfiprintf_r+0x1f0>)
 8005d2a:	a904      	add	r1, sp, #16
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	f000 f9bb 	bl	80060a8 <_printf_i>
 8005d32:	e7ed      	b.n	8005d10 <_svfiprintf_r+0x1c0>
 8005d34:	08006861 	.word	0x08006861
 8005d38:	0800686b 	.word	0x0800686b
 8005d3c:	00000000 	.word	0x00000000
 8005d40:	08005a99 	.word	0x08005a99
 8005d44:	08006867 	.word	0x08006867

08005d48 <__sfputc_r>:
 8005d48:	6893      	ldr	r3, [r2, #8]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	b410      	push	{r4}
 8005d50:	6093      	str	r3, [r2, #8]
 8005d52:	da08      	bge.n	8005d66 <__sfputc_r+0x1e>
 8005d54:	6994      	ldr	r4, [r2, #24]
 8005d56:	42a3      	cmp	r3, r4
 8005d58:	db01      	blt.n	8005d5e <__sfputc_r+0x16>
 8005d5a:	290a      	cmp	r1, #10
 8005d5c:	d103      	bne.n	8005d66 <__sfputc_r+0x1e>
 8005d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d62:	f7ff bc06 	b.w	8005572 <__swbuf_r>
 8005d66:	6813      	ldr	r3, [r2, #0]
 8005d68:	1c58      	adds	r0, r3, #1
 8005d6a:	6010      	str	r0, [r2, #0]
 8005d6c:	7019      	strb	r1, [r3, #0]
 8005d6e:	4608      	mov	r0, r1
 8005d70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <__sfputs_r>:
 8005d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d78:	4606      	mov	r6, r0
 8005d7a:	460f      	mov	r7, r1
 8005d7c:	4614      	mov	r4, r2
 8005d7e:	18d5      	adds	r5, r2, r3
 8005d80:	42ac      	cmp	r4, r5
 8005d82:	d101      	bne.n	8005d88 <__sfputs_r+0x12>
 8005d84:	2000      	movs	r0, #0
 8005d86:	e007      	b.n	8005d98 <__sfputs_r+0x22>
 8005d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d8c:	463a      	mov	r2, r7
 8005d8e:	4630      	mov	r0, r6
 8005d90:	f7ff ffda 	bl	8005d48 <__sfputc_r>
 8005d94:	1c43      	adds	r3, r0, #1
 8005d96:	d1f3      	bne.n	8005d80 <__sfputs_r+0xa>
 8005d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d9c <_vfiprintf_r>:
 8005d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da0:	460d      	mov	r5, r1
 8005da2:	b09d      	sub	sp, #116	@ 0x74
 8005da4:	4614      	mov	r4, r2
 8005da6:	4698      	mov	r8, r3
 8005da8:	4606      	mov	r6, r0
 8005daa:	b118      	cbz	r0, 8005db4 <_vfiprintf_r+0x18>
 8005dac:	6a03      	ldr	r3, [r0, #32]
 8005dae:	b90b      	cbnz	r3, 8005db4 <_vfiprintf_r+0x18>
 8005db0:	f7ff fad6 	bl	8005360 <__sinit>
 8005db4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005db6:	07d9      	lsls	r1, r3, #31
 8005db8:	d405      	bmi.n	8005dc6 <_vfiprintf_r+0x2a>
 8005dba:	89ab      	ldrh	r3, [r5, #12]
 8005dbc:	059a      	lsls	r2, r3, #22
 8005dbe:	d402      	bmi.n	8005dc6 <_vfiprintf_r+0x2a>
 8005dc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dc2:	f7ff fd40 	bl	8005846 <__retarget_lock_acquire_recursive>
 8005dc6:	89ab      	ldrh	r3, [r5, #12]
 8005dc8:	071b      	lsls	r3, r3, #28
 8005dca:	d501      	bpl.n	8005dd0 <_vfiprintf_r+0x34>
 8005dcc:	692b      	ldr	r3, [r5, #16]
 8005dce:	b99b      	cbnz	r3, 8005df8 <_vfiprintf_r+0x5c>
 8005dd0:	4629      	mov	r1, r5
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	f7ff fc0c 	bl	80055f0 <__swsetup_r>
 8005dd8:	b170      	cbz	r0, 8005df8 <_vfiprintf_r+0x5c>
 8005dda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ddc:	07dc      	lsls	r4, r3, #31
 8005dde:	d504      	bpl.n	8005dea <_vfiprintf_r+0x4e>
 8005de0:	f04f 30ff 	mov.w	r0, #4294967295
 8005de4:	b01d      	add	sp, #116	@ 0x74
 8005de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dea:	89ab      	ldrh	r3, [r5, #12]
 8005dec:	0598      	lsls	r0, r3, #22
 8005dee:	d4f7      	bmi.n	8005de0 <_vfiprintf_r+0x44>
 8005df0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005df2:	f7ff fd29 	bl	8005848 <__retarget_lock_release_recursive>
 8005df6:	e7f3      	b.n	8005de0 <_vfiprintf_r+0x44>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dfc:	2320      	movs	r3, #32
 8005dfe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e02:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e06:	2330      	movs	r3, #48	@ 0x30
 8005e08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005fb8 <_vfiprintf_r+0x21c>
 8005e0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e10:	f04f 0901 	mov.w	r9, #1
 8005e14:	4623      	mov	r3, r4
 8005e16:	469a      	mov	sl, r3
 8005e18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e1c:	b10a      	cbz	r2, 8005e22 <_vfiprintf_r+0x86>
 8005e1e:	2a25      	cmp	r2, #37	@ 0x25
 8005e20:	d1f9      	bne.n	8005e16 <_vfiprintf_r+0x7a>
 8005e22:	ebba 0b04 	subs.w	fp, sl, r4
 8005e26:	d00b      	beq.n	8005e40 <_vfiprintf_r+0xa4>
 8005e28:	465b      	mov	r3, fp
 8005e2a:	4622      	mov	r2, r4
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	4630      	mov	r0, r6
 8005e30:	f7ff ffa1 	bl	8005d76 <__sfputs_r>
 8005e34:	3001      	adds	r0, #1
 8005e36:	f000 80a7 	beq.w	8005f88 <_vfiprintf_r+0x1ec>
 8005e3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e3c:	445a      	add	r2, fp
 8005e3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e40:	f89a 3000 	ldrb.w	r3, [sl]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 809f 	beq.w	8005f88 <_vfiprintf_r+0x1ec>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e54:	f10a 0a01 	add.w	sl, sl, #1
 8005e58:	9304      	str	r3, [sp, #16]
 8005e5a:	9307      	str	r3, [sp, #28]
 8005e5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e60:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e62:	4654      	mov	r4, sl
 8005e64:	2205      	movs	r2, #5
 8005e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e6a:	4853      	ldr	r0, [pc, #332]	@ (8005fb8 <_vfiprintf_r+0x21c>)
 8005e6c:	f7fa f9d0 	bl	8000210 <memchr>
 8005e70:	9a04      	ldr	r2, [sp, #16]
 8005e72:	b9d8      	cbnz	r0, 8005eac <_vfiprintf_r+0x110>
 8005e74:	06d1      	lsls	r1, r2, #27
 8005e76:	bf44      	itt	mi
 8005e78:	2320      	movmi	r3, #32
 8005e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e7e:	0713      	lsls	r3, r2, #28
 8005e80:	bf44      	itt	mi
 8005e82:	232b      	movmi	r3, #43	@ 0x2b
 8005e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e88:	f89a 3000 	ldrb.w	r3, [sl]
 8005e8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e8e:	d015      	beq.n	8005ebc <_vfiprintf_r+0x120>
 8005e90:	9a07      	ldr	r2, [sp, #28]
 8005e92:	4654      	mov	r4, sl
 8005e94:	2000      	movs	r0, #0
 8005e96:	f04f 0c0a 	mov.w	ip, #10
 8005e9a:	4621      	mov	r1, r4
 8005e9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ea0:	3b30      	subs	r3, #48	@ 0x30
 8005ea2:	2b09      	cmp	r3, #9
 8005ea4:	d94b      	bls.n	8005f3e <_vfiprintf_r+0x1a2>
 8005ea6:	b1b0      	cbz	r0, 8005ed6 <_vfiprintf_r+0x13a>
 8005ea8:	9207      	str	r2, [sp, #28]
 8005eaa:	e014      	b.n	8005ed6 <_vfiprintf_r+0x13a>
 8005eac:	eba0 0308 	sub.w	r3, r0, r8
 8005eb0:	fa09 f303 	lsl.w	r3, r9, r3
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	9304      	str	r3, [sp, #16]
 8005eb8:	46a2      	mov	sl, r4
 8005eba:	e7d2      	b.n	8005e62 <_vfiprintf_r+0xc6>
 8005ebc:	9b03      	ldr	r3, [sp, #12]
 8005ebe:	1d19      	adds	r1, r3, #4
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	9103      	str	r1, [sp, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	bfbb      	ittet	lt
 8005ec8:	425b      	neglt	r3, r3
 8005eca:	f042 0202 	orrlt.w	r2, r2, #2
 8005ece:	9307      	strge	r3, [sp, #28]
 8005ed0:	9307      	strlt	r3, [sp, #28]
 8005ed2:	bfb8      	it	lt
 8005ed4:	9204      	strlt	r2, [sp, #16]
 8005ed6:	7823      	ldrb	r3, [r4, #0]
 8005ed8:	2b2e      	cmp	r3, #46	@ 0x2e
 8005eda:	d10a      	bne.n	8005ef2 <_vfiprintf_r+0x156>
 8005edc:	7863      	ldrb	r3, [r4, #1]
 8005ede:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ee0:	d132      	bne.n	8005f48 <_vfiprintf_r+0x1ac>
 8005ee2:	9b03      	ldr	r3, [sp, #12]
 8005ee4:	1d1a      	adds	r2, r3, #4
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	9203      	str	r2, [sp, #12]
 8005eea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005eee:	3402      	adds	r4, #2
 8005ef0:	9305      	str	r3, [sp, #20]
 8005ef2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005fc8 <_vfiprintf_r+0x22c>
 8005ef6:	7821      	ldrb	r1, [r4, #0]
 8005ef8:	2203      	movs	r2, #3
 8005efa:	4650      	mov	r0, sl
 8005efc:	f7fa f988 	bl	8000210 <memchr>
 8005f00:	b138      	cbz	r0, 8005f12 <_vfiprintf_r+0x176>
 8005f02:	9b04      	ldr	r3, [sp, #16]
 8005f04:	eba0 000a 	sub.w	r0, r0, sl
 8005f08:	2240      	movs	r2, #64	@ 0x40
 8005f0a:	4082      	lsls	r2, r0
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	3401      	adds	r4, #1
 8005f10:	9304      	str	r3, [sp, #16]
 8005f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f16:	4829      	ldr	r0, [pc, #164]	@ (8005fbc <_vfiprintf_r+0x220>)
 8005f18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f1c:	2206      	movs	r2, #6
 8005f1e:	f7fa f977 	bl	8000210 <memchr>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d03f      	beq.n	8005fa6 <_vfiprintf_r+0x20a>
 8005f26:	4b26      	ldr	r3, [pc, #152]	@ (8005fc0 <_vfiprintf_r+0x224>)
 8005f28:	bb1b      	cbnz	r3, 8005f72 <_vfiprintf_r+0x1d6>
 8005f2a:	9b03      	ldr	r3, [sp, #12]
 8005f2c:	3307      	adds	r3, #7
 8005f2e:	f023 0307 	bic.w	r3, r3, #7
 8005f32:	3308      	adds	r3, #8
 8005f34:	9303      	str	r3, [sp, #12]
 8005f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f38:	443b      	add	r3, r7
 8005f3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f3c:	e76a      	b.n	8005e14 <_vfiprintf_r+0x78>
 8005f3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f42:	460c      	mov	r4, r1
 8005f44:	2001      	movs	r0, #1
 8005f46:	e7a8      	b.n	8005e9a <_vfiprintf_r+0xfe>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	3401      	adds	r4, #1
 8005f4c:	9305      	str	r3, [sp, #20]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	f04f 0c0a 	mov.w	ip, #10
 8005f54:	4620      	mov	r0, r4
 8005f56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f5a:	3a30      	subs	r2, #48	@ 0x30
 8005f5c:	2a09      	cmp	r2, #9
 8005f5e:	d903      	bls.n	8005f68 <_vfiprintf_r+0x1cc>
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0c6      	beq.n	8005ef2 <_vfiprintf_r+0x156>
 8005f64:	9105      	str	r1, [sp, #20]
 8005f66:	e7c4      	b.n	8005ef2 <_vfiprintf_r+0x156>
 8005f68:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e7f0      	b.n	8005f54 <_vfiprintf_r+0x1b8>
 8005f72:	ab03      	add	r3, sp, #12
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	462a      	mov	r2, r5
 8005f78:	4b12      	ldr	r3, [pc, #72]	@ (8005fc4 <_vfiprintf_r+0x228>)
 8005f7a:	a904      	add	r1, sp, #16
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	f3af 8000 	nop.w
 8005f82:	4607      	mov	r7, r0
 8005f84:	1c78      	adds	r0, r7, #1
 8005f86:	d1d6      	bne.n	8005f36 <_vfiprintf_r+0x19a>
 8005f88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f8a:	07d9      	lsls	r1, r3, #31
 8005f8c:	d405      	bmi.n	8005f9a <_vfiprintf_r+0x1fe>
 8005f8e:	89ab      	ldrh	r3, [r5, #12]
 8005f90:	059a      	lsls	r2, r3, #22
 8005f92:	d402      	bmi.n	8005f9a <_vfiprintf_r+0x1fe>
 8005f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f96:	f7ff fc57 	bl	8005848 <__retarget_lock_release_recursive>
 8005f9a:	89ab      	ldrh	r3, [r5, #12]
 8005f9c:	065b      	lsls	r3, r3, #25
 8005f9e:	f53f af1f 	bmi.w	8005de0 <_vfiprintf_r+0x44>
 8005fa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fa4:	e71e      	b.n	8005de4 <_vfiprintf_r+0x48>
 8005fa6:	ab03      	add	r3, sp, #12
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	462a      	mov	r2, r5
 8005fac:	4b05      	ldr	r3, [pc, #20]	@ (8005fc4 <_vfiprintf_r+0x228>)
 8005fae:	a904      	add	r1, sp, #16
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	f000 f879 	bl	80060a8 <_printf_i>
 8005fb6:	e7e4      	b.n	8005f82 <_vfiprintf_r+0x1e6>
 8005fb8:	08006861 	.word	0x08006861
 8005fbc:	0800686b 	.word	0x0800686b
 8005fc0:	00000000 	.word	0x00000000
 8005fc4:	08005d77 	.word	0x08005d77
 8005fc8:	08006867 	.word	0x08006867

08005fcc <_printf_common>:
 8005fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd0:	4616      	mov	r6, r2
 8005fd2:	4698      	mov	r8, r3
 8005fd4:	688a      	ldr	r2, [r1, #8]
 8005fd6:	690b      	ldr	r3, [r1, #16]
 8005fd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	bfb8      	it	lt
 8005fe0:	4613      	movlt	r3, r2
 8005fe2:	6033      	str	r3, [r6, #0]
 8005fe4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fe8:	4607      	mov	r7, r0
 8005fea:	460c      	mov	r4, r1
 8005fec:	b10a      	cbz	r2, 8005ff2 <_printf_common+0x26>
 8005fee:	3301      	adds	r3, #1
 8005ff0:	6033      	str	r3, [r6, #0]
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	0699      	lsls	r1, r3, #26
 8005ff6:	bf42      	ittt	mi
 8005ff8:	6833      	ldrmi	r3, [r6, #0]
 8005ffa:	3302      	addmi	r3, #2
 8005ffc:	6033      	strmi	r3, [r6, #0]
 8005ffe:	6825      	ldr	r5, [r4, #0]
 8006000:	f015 0506 	ands.w	r5, r5, #6
 8006004:	d106      	bne.n	8006014 <_printf_common+0x48>
 8006006:	f104 0a19 	add.w	sl, r4, #25
 800600a:	68e3      	ldr	r3, [r4, #12]
 800600c:	6832      	ldr	r2, [r6, #0]
 800600e:	1a9b      	subs	r3, r3, r2
 8006010:	42ab      	cmp	r3, r5
 8006012:	dc26      	bgt.n	8006062 <_printf_common+0x96>
 8006014:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006018:	6822      	ldr	r2, [r4, #0]
 800601a:	3b00      	subs	r3, #0
 800601c:	bf18      	it	ne
 800601e:	2301      	movne	r3, #1
 8006020:	0692      	lsls	r2, r2, #26
 8006022:	d42b      	bmi.n	800607c <_printf_common+0xb0>
 8006024:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006028:	4641      	mov	r1, r8
 800602a:	4638      	mov	r0, r7
 800602c:	47c8      	blx	r9
 800602e:	3001      	adds	r0, #1
 8006030:	d01e      	beq.n	8006070 <_printf_common+0xa4>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	6922      	ldr	r2, [r4, #16]
 8006036:	f003 0306 	and.w	r3, r3, #6
 800603a:	2b04      	cmp	r3, #4
 800603c:	bf02      	ittt	eq
 800603e:	68e5      	ldreq	r5, [r4, #12]
 8006040:	6833      	ldreq	r3, [r6, #0]
 8006042:	1aed      	subeq	r5, r5, r3
 8006044:	68a3      	ldr	r3, [r4, #8]
 8006046:	bf0c      	ite	eq
 8006048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800604c:	2500      	movne	r5, #0
 800604e:	4293      	cmp	r3, r2
 8006050:	bfc4      	itt	gt
 8006052:	1a9b      	subgt	r3, r3, r2
 8006054:	18ed      	addgt	r5, r5, r3
 8006056:	2600      	movs	r6, #0
 8006058:	341a      	adds	r4, #26
 800605a:	42b5      	cmp	r5, r6
 800605c:	d11a      	bne.n	8006094 <_printf_common+0xc8>
 800605e:	2000      	movs	r0, #0
 8006060:	e008      	b.n	8006074 <_printf_common+0xa8>
 8006062:	2301      	movs	r3, #1
 8006064:	4652      	mov	r2, sl
 8006066:	4641      	mov	r1, r8
 8006068:	4638      	mov	r0, r7
 800606a:	47c8      	blx	r9
 800606c:	3001      	adds	r0, #1
 800606e:	d103      	bne.n	8006078 <_printf_common+0xac>
 8006070:	f04f 30ff 	mov.w	r0, #4294967295
 8006074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006078:	3501      	adds	r5, #1
 800607a:	e7c6      	b.n	800600a <_printf_common+0x3e>
 800607c:	18e1      	adds	r1, r4, r3
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	2030      	movs	r0, #48	@ 0x30
 8006082:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006086:	4422      	add	r2, r4
 8006088:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800608c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006090:	3302      	adds	r3, #2
 8006092:	e7c7      	b.n	8006024 <_printf_common+0x58>
 8006094:	2301      	movs	r3, #1
 8006096:	4622      	mov	r2, r4
 8006098:	4641      	mov	r1, r8
 800609a:	4638      	mov	r0, r7
 800609c:	47c8      	blx	r9
 800609e:	3001      	adds	r0, #1
 80060a0:	d0e6      	beq.n	8006070 <_printf_common+0xa4>
 80060a2:	3601      	adds	r6, #1
 80060a4:	e7d9      	b.n	800605a <_printf_common+0x8e>
	...

080060a8 <_printf_i>:
 80060a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060ac:	7e0f      	ldrb	r7, [r1, #24]
 80060ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060b0:	2f78      	cmp	r7, #120	@ 0x78
 80060b2:	4691      	mov	r9, r2
 80060b4:	4680      	mov	r8, r0
 80060b6:	460c      	mov	r4, r1
 80060b8:	469a      	mov	sl, r3
 80060ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060be:	d807      	bhi.n	80060d0 <_printf_i+0x28>
 80060c0:	2f62      	cmp	r7, #98	@ 0x62
 80060c2:	d80a      	bhi.n	80060da <_printf_i+0x32>
 80060c4:	2f00      	cmp	r7, #0
 80060c6:	f000 80d2 	beq.w	800626e <_printf_i+0x1c6>
 80060ca:	2f58      	cmp	r7, #88	@ 0x58
 80060cc:	f000 80b9 	beq.w	8006242 <_printf_i+0x19a>
 80060d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060d8:	e03a      	b.n	8006150 <_printf_i+0xa8>
 80060da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060de:	2b15      	cmp	r3, #21
 80060e0:	d8f6      	bhi.n	80060d0 <_printf_i+0x28>
 80060e2:	a101      	add	r1, pc, #4	@ (adr r1, 80060e8 <_printf_i+0x40>)
 80060e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060e8:	08006141 	.word	0x08006141
 80060ec:	08006155 	.word	0x08006155
 80060f0:	080060d1 	.word	0x080060d1
 80060f4:	080060d1 	.word	0x080060d1
 80060f8:	080060d1 	.word	0x080060d1
 80060fc:	080060d1 	.word	0x080060d1
 8006100:	08006155 	.word	0x08006155
 8006104:	080060d1 	.word	0x080060d1
 8006108:	080060d1 	.word	0x080060d1
 800610c:	080060d1 	.word	0x080060d1
 8006110:	080060d1 	.word	0x080060d1
 8006114:	08006255 	.word	0x08006255
 8006118:	0800617f 	.word	0x0800617f
 800611c:	0800620f 	.word	0x0800620f
 8006120:	080060d1 	.word	0x080060d1
 8006124:	080060d1 	.word	0x080060d1
 8006128:	08006277 	.word	0x08006277
 800612c:	080060d1 	.word	0x080060d1
 8006130:	0800617f 	.word	0x0800617f
 8006134:	080060d1 	.word	0x080060d1
 8006138:	080060d1 	.word	0x080060d1
 800613c:	08006217 	.word	0x08006217
 8006140:	6833      	ldr	r3, [r6, #0]
 8006142:	1d1a      	adds	r2, r3, #4
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6032      	str	r2, [r6, #0]
 8006148:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800614c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006150:	2301      	movs	r3, #1
 8006152:	e09d      	b.n	8006290 <_printf_i+0x1e8>
 8006154:	6833      	ldr	r3, [r6, #0]
 8006156:	6820      	ldr	r0, [r4, #0]
 8006158:	1d19      	adds	r1, r3, #4
 800615a:	6031      	str	r1, [r6, #0]
 800615c:	0606      	lsls	r6, r0, #24
 800615e:	d501      	bpl.n	8006164 <_printf_i+0xbc>
 8006160:	681d      	ldr	r5, [r3, #0]
 8006162:	e003      	b.n	800616c <_printf_i+0xc4>
 8006164:	0645      	lsls	r5, r0, #25
 8006166:	d5fb      	bpl.n	8006160 <_printf_i+0xb8>
 8006168:	f9b3 5000 	ldrsh.w	r5, [r3]
 800616c:	2d00      	cmp	r5, #0
 800616e:	da03      	bge.n	8006178 <_printf_i+0xd0>
 8006170:	232d      	movs	r3, #45	@ 0x2d
 8006172:	426d      	negs	r5, r5
 8006174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006178:	4859      	ldr	r0, [pc, #356]	@ (80062e0 <_printf_i+0x238>)
 800617a:	230a      	movs	r3, #10
 800617c:	e011      	b.n	80061a2 <_printf_i+0xfa>
 800617e:	6821      	ldr	r1, [r4, #0]
 8006180:	6833      	ldr	r3, [r6, #0]
 8006182:	0608      	lsls	r0, r1, #24
 8006184:	f853 5b04 	ldr.w	r5, [r3], #4
 8006188:	d402      	bmi.n	8006190 <_printf_i+0xe8>
 800618a:	0649      	lsls	r1, r1, #25
 800618c:	bf48      	it	mi
 800618e:	b2ad      	uxthmi	r5, r5
 8006190:	2f6f      	cmp	r7, #111	@ 0x6f
 8006192:	4853      	ldr	r0, [pc, #332]	@ (80062e0 <_printf_i+0x238>)
 8006194:	6033      	str	r3, [r6, #0]
 8006196:	bf14      	ite	ne
 8006198:	230a      	movne	r3, #10
 800619a:	2308      	moveq	r3, #8
 800619c:	2100      	movs	r1, #0
 800619e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061a2:	6866      	ldr	r6, [r4, #4]
 80061a4:	60a6      	str	r6, [r4, #8]
 80061a6:	2e00      	cmp	r6, #0
 80061a8:	bfa2      	ittt	ge
 80061aa:	6821      	ldrge	r1, [r4, #0]
 80061ac:	f021 0104 	bicge.w	r1, r1, #4
 80061b0:	6021      	strge	r1, [r4, #0]
 80061b2:	b90d      	cbnz	r5, 80061b8 <_printf_i+0x110>
 80061b4:	2e00      	cmp	r6, #0
 80061b6:	d04b      	beq.n	8006250 <_printf_i+0x1a8>
 80061b8:	4616      	mov	r6, r2
 80061ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80061be:	fb03 5711 	mls	r7, r3, r1, r5
 80061c2:	5dc7      	ldrb	r7, [r0, r7]
 80061c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061c8:	462f      	mov	r7, r5
 80061ca:	42bb      	cmp	r3, r7
 80061cc:	460d      	mov	r5, r1
 80061ce:	d9f4      	bls.n	80061ba <_printf_i+0x112>
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d10b      	bne.n	80061ec <_printf_i+0x144>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	07df      	lsls	r7, r3, #31
 80061d8:	d508      	bpl.n	80061ec <_printf_i+0x144>
 80061da:	6923      	ldr	r3, [r4, #16]
 80061dc:	6861      	ldr	r1, [r4, #4]
 80061de:	4299      	cmp	r1, r3
 80061e0:	bfde      	ittt	le
 80061e2:	2330      	movle	r3, #48	@ 0x30
 80061e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061ec:	1b92      	subs	r2, r2, r6
 80061ee:	6122      	str	r2, [r4, #16]
 80061f0:	f8cd a000 	str.w	sl, [sp]
 80061f4:	464b      	mov	r3, r9
 80061f6:	aa03      	add	r2, sp, #12
 80061f8:	4621      	mov	r1, r4
 80061fa:	4640      	mov	r0, r8
 80061fc:	f7ff fee6 	bl	8005fcc <_printf_common>
 8006200:	3001      	adds	r0, #1
 8006202:	d14a      	bne.n	800629a <_printf_i+0x1f2>
 8006204:	f04f 30ff 	mov.w	r0, #4294967295
 8006208:	b004      	add	sp, #16
 800620a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	f043 0320 	orr.w	r3, r3, #32
 8006214:	6023      	str	r3, [r4, #0]
 8006216:	4833      	ldr	r0, [pc, #204]	@ (80062e4 <_printf_i+0x23c>)
 8006218:	2778      	movs	r7, #120	@ 0x78
 800621a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	6831      	ldr	r1, [r6, #0]
 8006222:	061f      	lsls	r7, r3, #24
 8006224:	f851 5b04 	ldr.w	r5, [r1], #4
 8006228:	d402      	bmi.n	8006230 <_printf_i+0x188>
 800622a:	065f      	lsls	r7, r3, #25
 800622c:	bf48      	it	mi
 800622e:	b2ad      	uxthmi	r5, r5
 8006230:	6031      	str	r1, [r6, #0]
 8006232:	07d9      	lsls	r1, r3, #31
 8006234:	bf44      	itt	mi
 8006236:	f043 0320 	orrmi.w	r3, r3, #32
 800623a:	6023      	strmi	r3, [r4, #0]
 800623c:	b11d      	cbz	r5, 8006246 <_printf_i+0x19e>
 800623e:	2310      	movs	r3, #16
 8006240:	e7ac      	b.n	800619c <_printf_i+0xf4>
 8006242:	4827      	ldr	r0, [pc, #156]	@ (80062e0 <_printf_i+0x238>)
 8006244:	e7e9      	b.n	800621a <_printf_i+0x172>
 8006246:	6823      	ldr	r3, [r4, #0]
 8006248:	f023 0320 	bic.w	r3, r3, #32
 800624c:	6023      	str	r3, [r4, #0]
 800624e:	e7f6      	b.n	800623e <_printf_i+0x196>
 8006250:	4616      	mov	r6, r2
 8006252:	e7bd      	b.n	80061d0 <_printf_i+0x128>
 8006254:	6833      	ldr	r3, [r6, #0]
 8006256:	6825      	ldr	r5, [r4, #0]
 8006258:	6961      	ldr	r1, [r4, #20]
 800625a:	1d18      	adds	r0, r3, #4
 800625c:	6030      	str	r0, [r6, #0]
 800625e:	062e      	lsls	r6, r5, #24
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	d501      	bpl.n	8006268 <_printf_i+0x1c0>
 8006264:	6019      	str	r1, [r3, #0]
 8006266:	e002      	b.n	800626e <_printf_i+0x1c6>
 8006268:	0668      	lsls	r0, r5, #25
 800626a:	d5fb      	bpl.n	8006264 <_printf_i+0x1bc>
 800626c:	8019      	strh	r1, [r3, #0]
 800626e:	2300      	movs	r3, #0
 8006270:	6123      	str	r3, [r4, #16]
 8006272:	4616      	mov	r6, r2
 8006274:	e7bc      	b.n	80061f0 <_printf_i+0x148>
 8006276:	6833      	ldr	r3, [r6, #0]
 8006278:	1d1a      	adds	r2, r3, #4
 800627a:	6032      	str	r2, [r6, #0]
 800627c:	681e      	ldr	r6, [r3, #0]
 800627e:	6862      	ldr	r2, [r4, #4]
 8006280:	2100      	movs	r1, #0
 8006282:	4630      	mov	r0, r6
 8006284:	f7f9 ffc4 	bl	8000210 <memchr>
 8006288:	b108      	cbz	r0, 800628e <_printf_i+0x1e6>
 800628a:	1b80      	subs	r0, r0, r6
 800628c:	6060      	str	r0, [r4, #4]
 800628e:	6863      	ldr	r3, [r4, #4]
 8006290:	6123      	str	r3, [r4, #16]
 8006292:	2300      	movs	r3, #0
 8006294:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006298:	e7aa      	b.n	80061f0 <_printf_i+0x148>
 800629a:	6923      	ldr	r3, [r4, #16]
 800629c:	4632      	mov	r2, r6
 800629e:	4649      	mov	r1, r9
 80062a0:	4640      	mov	r0, r8
 80062a2:	47d0      	blx	sl
 80062a4:	3001      	adds	r0, #1
 80062a6:	d0ad      	beq.n	8006204 <_printf_i+0x15c>
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	079b      	lsls	r3, r3, #30
 80062ac:	d413      	bmi.n	80062d6 <_printf_i+0x22e>
 80062ae:	68e0      	ldr	r0, [r4, #12]
 80062b0:	9b03      	ldr	r3, [sp, #12]
 80062b2:	4298      	cmp	r0, r3
 80062b4:	bfb8      	it	lt
 80062b6:	4618      	movlt	r0, r3
 80062b8:	e7a6      	b.n	8006208 <_printf_i+0x160>
 80062ba:	2301      	movs	r3, #1
 80062bc:	4632      	mov	r2, r6
 80062be:	4649      	mov	r1, r9
 80062c0:	4640      	mov	r0, r8
 80062c2:	47d0      	blx	sl
 80062c4:	3001      	adds	r0, #1
 80062c6:	d09d      	beq.n	8006204 <_printf_i+0x15c>
 80062c8:	3501      	adds	r5, #1
 80062ca:	68e3      	ldr	r3, [r4, #12]
 80062cc:	9903      	ldr	r1, [sp, #12]
 80062ce:	1a5b      	subs	r3, r3, r1
 80062d0:	42ab      	cmp	r3, r5
 80062d2:	dcf2      	bgt.n	80062ba <_printf_i+0x212>
 80062d4:	e7eb      	b.n	80062ae <_printf_i+0x206>
 80062d6:	2500      	movs	r5, #0
 80062d8:	f104 0619 	add.w	r6, r4, #25
 80062dc:	e7f5      	b.n	80062ca <_printf_i+0x222>
 80062de:	bf00      	nop
 80062e0:	08006872 	.word	0x08006872
 80062e4:	08006883 	.word	0x08006883

080062e8 <__sflush_r>:
 80062e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062f0:	0716      	lsls	r6, r2, #28
 80062f2:	4605      	mov	r5, r0
 80062f4:	460c      	mov	r4, r1
 80062f6:	d454      	bmi.n	80063a2 <__sflush_r+0xba>
 80062f8:	684b      	ldr	r3, [r1, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	dc02      	bgt.n	8006304 <__sflush_r+0x1c>
 80062fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006300:	2b00      	cmp	r3, #0
 8006302:	dd48      	ble.n	8006396 <__sflush_r+0xae>
 8006304:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006306:	2e00      	cmp	r6, #0
 8006308:	d045      	beq.n	8006396 <__sflush_r+0xae>
 800630a:	2300      	movs	r3, #0
 800630c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006310:	682f      	ldr	r7, [r5, #0]
 8006312:	6a21      	ldr	r1, [r4, #32]
 8006314:	602b      	str	r3, [r5, #0]
 8006316:	d030      	beq.n	800637a <__sflush_r+0x92>
 8006318:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	0759      	lsls	r1, r3, #29
 800631e:	d505      	bpl.n	800632c <__sflush_r+0x44>
 8006320:	6863      	ldr	r3, [r4, #4]
 8006322:	1ad2      	subs	r2, r2, r3
 8006324:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006326:	b10b      	cbz	r3, 800632c <__sflush_r+0x44>
 8006328:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800632a:	1ad2      	subs	r2, r2, r3
 800632c:	2300      	movs	r3, #0
 800632e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006330:	6a21      	ldr	r1, [r4, #32]
 8006332:	4628      	mov	r0, r5
 8006334:	47b0      	blx	r6
 8006336:	1c43      	adds	r3, r0, #1
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	d106      	bne.n	800634a <__sflush_r+0x62>
 800633c:	6829      	ldr	r1, [r5, #0]
 800633e:	291d      	cmp	r1, #29
 8006340:	d82b      	bhi.n	800639a <__sflush_r+0xb2>
 8006342:	4a2a      	ldr	r2, [pc, #168]	@ (80063ec <__sflush_r+0x104>)
 8006344:	410a      	asrs	r2, r1
 8006346:	07d6      	lsls	r6, r2, #31
 8006348:	d427      	bmi.n	800639a <__sflush_r+0xb2>
 800634a:	2200      	movs	r2, #0
 800634c:	6062      	str	r2, [r4, #4]
 800634e:	04d9      	lsls	r1, r3, #19
 8006350:	6922      	ldr	r2, [r4, #16]
 8006352:	6022      	str	r2, [r4, #0]
 8006354:	d504      	bpl.n	8006360 <__sflush_r+0x78>
 8006356:	1c42      	adds	r2, r0, #1
 8006358:	d101      	bne.n	800635e <__sflush_r+0x76>
 800635a:	682b      	ldr	r3, [r5, #0]
 800635c:	b903      	cbnz	r3, 8006360 <__sflush_r+0x78>
 800635e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006360:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006362:	602f      	str	r7, [r5, #0]
 8006364:	b1b9      	cbz	r1, 8006396 <__sflush_r+0xae>
 8006366:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800636a:	4299      	cmp	r1, r3
 800636c:	d002      	beq.n	8006374 <__sflush_r+0x8c>
 800636e:	4628      	mov	r0, r5
 8006370:	f7ff fa92 	bl	8005898 <_free_r>
 8006374:	2300      	movs	r3, #0
 8006376:	6363      	str	r3, [r4, #52]	@ 0x34
 8006378:	e00d      	b.n	8006396 <__sflush_r+0xae>
 800637a:	2301      	movs	r3, #1
 800637c:	4628      	mov	r0, r5
 800637e:	47b0      	blx	r6
 8006380:	4602      	mov	r2, r0
 8006382:	1c50      	adds	r0, r2, #1
 8006384:	d1c9      	bne.n	800631a <__sflush_r+0x32>
 8006386:	682b      	ldr	r3, [r5, #0]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0c6      	beq.n	800631a <__sflush_r+0x32>
 800638c:	2b1d      	cmp	r3, #29
 800638e:	d001      	beq.n	8006394 <__sflush_r+0xac>
 8006390:	2b16      	cmp	r3, #22
 8006392:	d11e      	bne.n	80063d2 <__sflush_r+0xea>
 8006394:	602f      	str	r7, [r5, #0]
 8006396:	2000      	movs	r0, #0
 8006398:	e022      	b.n	80063e0 <__sflush_r+0xf8>
 800639a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800639e:	b21b      	sxth	r3, r3
 80063a0:	e01b      	b.n	80063da <__sflush_r+0xf2>
 80063a2:	690f      	ldr	r7, [r1, #16]
 80063a4:	2f00      	cmp	r7, #0
 80063a6:	d0f6      	beq.n	8006396 <__sflush_r+0xae>
 80063a8:	0793      	lsls	r3, r2, #30
 80063aa:	680e      	ldr	r6, [r1, #0]
 80063ac:	bf08      	it	eq
 80063ae:	694b      	ldreq	r3, [r1, #20]
 80063b0:	600f      	str	r7, [r1, #0]
 80063b2:	bf18      	it	ne
 80063b4:	2300      	movne	r3, #0
 80063b6:	eba6 0807 	sub.w	r8, r6, r7
 80063ba:	608b      	str	r3, [r1, #8]
 80063bc:	f1b8 0f00 	cmp.w	r8, #0
 80063c0:	dde9      	ble.n	8006396 <__sflush_r+0xae>
 80063c2:	6a21      	ldr	r1, [r4, #32]
 80063c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063c6:	4643      	mov	r3, r8
 80063c8:	463a      	mov	r2, r7
 80063ca:	4628      	mov	r0, r5
 80063cc:	47b0      	blx	r6
 80063ce:	2800      	cmp	r0, #0
 80063d0:	dc08      	bgt.n	80063e4 <__sflush_r+0xfc>
 80063d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063da:	81a3      	strh	r3, [r4, #12]
 80063dc:	f04f 30ff 	mov.w	r0, #4294967295
 80063e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063e4:	4407      	add	r7, r0
 80063e6:	eba8 0800 	sub.w	r8, r8, r0
 80063ea:	e7e7      	b.n	80063bc <__sflush_r+0xd4>
 80063ec:	dfbffffe 	.word	0xdfbffffe

080063f0 <_fflush_r>:
 80063f0:	b538      	push	{r3, r4, r5, lr}
 80063f2:	690b      	ldr	r3, [r1, #16]
 80063f4:	4605      	mov	r5, r0
 80063f6:	460c      	mov	r4, r1
 80063f8:	b913      	cbnz	r3, 8006400 <_fflush_r+0x10>
 80063fa:	2500      	movs	r5, #0
 80063fc:	4628      	mov	r0, r5
 80063fe:	bd38      	pop	{r3, r4, r5, pc}
 8006400:	b118      	cbz	r0, 800640a <_fflush_r+0x1a>
 8006402:	6a03      	ldr	r3, [r0, #32]
 8006404:	b90b      	cbnz	r3, 800640a <_fflush_r+0x1a>
 8006406:	f7fe ffab 	bl	8005360 <__sinit>
 800640a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0f3      	beq.n	80063fa <_fflush_r+0xa>
 8006412:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006414:	07d0      	lsls	r0, r2, #31
 8006416:	d404      	bmi.n	8006422 <_fflush_r+0x32>
 8006418:	0599      	lsls	r1, r3, #22
 800641a:	d402      	bmi.n	8006422 <_fflush_r+0x32>
 800641c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800641e:	f7ff fa12 	bl	8005846 <__retarget_lock_acquire_recursive>
 8006422:	4628      	mov	r0, r5
 8006424:	4621      	mov	r1, r4
 8006426:	f7ff ff5f 	bl	80062e8 <__sflush_r>
 800642a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800642c:	07da      	lsls	r2, r3, #31
 800642e:	4605      	mov	r5, r0
 8006430:	d4e4      	bmi.n	80063fc <_fflush_r+0xc>
 8006432:	89a3      	ldrh	r3, [r4, #12]
 8006434:	059b      	lsls	r3, r3, #22
 8006436:	d4e1      	bmi.n	80063fc <_fflush_r+0xc>
 8006438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800643a:	f7ff fa05 	bl	8005848 <__retarget_lock_release_recursive>
 800643e:	e7dd      	b.n	80063fc <_fflush_r+0xc>

08006440 <fiprintf>:
 8006440:	b40e      	push	{r1, r2, r3}
 8006442:	b503      	push	{r0, r1, lr}
 8006444:	4601      	mov	r1, r0
 8006446:	ab03      	add	r3, sp, #12
 8006448:	4805      	ldr	r0, [pc, #20]	@ (8006460 <fiprintf+0x20>)
 800644a:	f853 2b04 	ldr.w	r2, [r3], #4
 800644e:	6800      	ldr	r0, [r0, #0]
 8006450:	9301      	str	r3, [sp, #4]
 8006452:	f7ff fca3 	bl	8005d9c <_vfiprintf_r>
 8006456:	b002      	add	sp, #8
 8006458:	f85d eb04 	ldr.w	lr, [sp], #4
 800645c:	b003      	add	sp, #12
 800645e:	4770      	bx	lr
 8006460:	20000028 	.word	0x20000028

08006464 <__swhatbuf_r>:
 8006464:	b570      	push	{r4, r5, r6, lr}
 8006466:	460c      	mov	r4, r1
 8006468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800646c:	2900      	cmp	r1, #0
 800646e:	b096      	sub	sp, #88	@ 0x58
 8006470:	4615      	mov	r5, r2
 8006472:	461e      	mov	r6, r3
 8006474:	da0d      	bge.n	8006492 <__swhatbuf_r+0x2e>
 8006476:	89a3      	ldrh	r3, [r4, #12]
 8006478:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800647c:	f04f 0100 	mov.w	r1, #0
 8006480:	bf14      	ite	ne
 8006482:	2340      	movne	r3, #64	@ 0x40
 8006484:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006488:	2000      	movs	r0, #0
 800648a:	6031      	str	r1, [r6, #0]
 800648c:	602b      	str	r3, [r5, #0]
 800648e:	b016      	add	sp, #88	@ 0x58
 8006490:	bd70      	pop	{r4, r5, r6, pc}
 8006492:	466a      	mov	r2, sp
 8006494:	f000 f862 	bl	800655c <_fstat_r>
 8006498:	2800      	cmp	r0, #0
 800649a:	dbec      	blt.n	8006476 <__swhatbuf_r+0x12>
 800649c:	9901      	ldr	r1, [sp, #4]
 800649e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80064a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80064a6:	4259      	negs	r1, r3
 80064a8:	4159      	adcs	r1, r3
 80064aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064ae:	e7eb      	b.n	8006488 <__swhatbuf_r+0x24>

080064b0 <__smakebuf_r>:
 80064b0:	898b      	ldrh	r3, [r1, #12]
 80064b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064b4:	079d      	lsls	r5, r3, #30
 80064b6:	4606      	mov	r6, r0
 80064b8:	460c      	mov	r4, r1
 80064ba:	d507      	bpl.n	80064cc <__smakebuf_r+0x1c>
 80064bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	6123      	str	r3, [r4, #16]
 80064c4:	2301      	movs	r3, #1
 80064c6:	6163      	str	r3, [r4, #20]
 80064c8:	b003      	add	sp, #12
 80064ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064cc:	ab01      	add	r3, sp, #4
 80064ce:	466a      	mov	r2, sp
 80064d0:	f7ff ffc8 	bl	8006464 <__swhatbuf_r>
 80064d4:	9f00      	ldr	r7, [sp, #0]
 80064d6:	4605      	mov	r5, r0
 80064d8:	4639      	mov	r1, r7
 80064da:	4630      	mov	r0, r6
 80064dc:	f7ff fa50 	bl	8005980 <_malloc_r>
 80064e0:	b948      	cbnz	r0, 80064f6 <__smakebuf_r+0x46>
 80064e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064e6:	059a      	lsls	r2, r3, #22
 80064e8:	d4ee      	bmi.n	80064c8 <__smakebuf_r+0x18>
 80064ea:	f023 0303 	bic.w	r3, r3, #3
 80064ee:	f043 0302 	orr.w	r3, r3, #2
 80064f2:	81a3      	strh	r3, [r4, #12]
 80064f4:	e7e2      	b.n	80064bc <__smakebuf_r+0xc>
 80064f6:	89a3      	ldrh	r3, [r4, #12]
 80064f8:	6020      	str	r0, [r4, #0]
 80064fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064fe:	81a3      	strh	r3, [r4, #12]
 8006500:	9b01      	ldr	r3, [sp, #4]
 8006502:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006506:	b15b      	cbz	r3, 8006520 <__smakebuf_r+0x70>
 8006508:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800650c:	4630      	mov	r0, r6
 800650e:	f000 f837 	bl	8006580 <_isatty_r>
 8006512:	b128      	cbz	r0, 8006520 <__smakebuf_r+0x70>
 8006514:	89a3      	ldrh	r3, [r4, #12]
 8006516:	f023 0303 	bic.w	r3, r3, #3
 800651a:	f043 0301 	orr.w	r3, r3, #1
 800651e:	81a3      	strh	r3, [r4, #12]
 8006520:	89a3      	ldrh	r3, [r4, #12]
 8006522:	431d      	orrs	r5, r3
 8006524:	81a5      	strh	r5, [r4, #12]
 8006526:	e7cf      	b.n	80064c8 <__smakebuf_r+0x18>

08006528 <memmove>:
 8006528:	4288      	cmp	r0, r1
 800652a:	b510      	push	{r4, lr}
 800652c:	eb01 0402 	add.w	r4, r1, r2
 8006530:	d902      	bls.n	8006538 <memmove+0x10>
 8006532:	4284      	cmp	r4, r0
 8006534:	4623      	mov	r3, r4
 8006536:	d807      	bhi.n	8006548 <memmove+0x20>
 8006538:	1e43      	subs	r3, r0, #1
 800653a:	42a1      	cmp	r1, r4
 800653c:	d008      	beq.n	8006550 <memmove+0x28>
 800653e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006542:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006546:	e7f8      	b.n	800653a <memmove+0x12>
 8006548:	4402      	add	r2, r0
 800654a:	4601      	mov	r1, r0
 800654c:	428a      	cmp	r2, r1
 800654e:	d100      	bne.n	8006552 <memmove+0x2a>
 8006550:	bd10      	pop	{r4, pc}
 8006552:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006556:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800655a:	e7f7      	b.n	800654c <memmove+0x24>

0800655c <_fstat_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	4d07      	ldr	r5, [pc, #28]	@ (800657c <_fstat_r+0x20>)
 8006560:	2300      	movs	r3, #0
 8006562:	4604      	mov	r4, r0
 8006564:	4608      	mov	r0, r1
 8006566:	4611      	mov	r1, r2
 8006568:	602b      	str	r3, [r5, #0]
 800656a:	f7fb f91b 	bl	80017a4 <_fstat>
 800656e:	1c43      	adds	r3, r0, #1
 8006570:	d102      	bne.n	8006578 <_fstat_r+0x1c>
 8006572:	682b      	ldr	r3, [r5, #0]
 8006574:	b103      	cbz	r3, 8006578 <_fstat_r+0x1c>
 8006576:	6023      	str	r3, [r4, #0]
 8006578:	bd38      	pop	{r3, r4, r5, pc}
 800657a:	bf00      	nop
 800657c:	200003c8 	.word	0x200003c8

08006580 <_isatty_r>:
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	4d06      	ldr	r5, [pc, #24]	@ (800659c <_isatty_r+0x1c>)
 8006584:	2300      	movs	r3, #0
 8006586:	4604      	mov	r4, r0
 8006588:	4608      	mov	r0, r1
 800658a:	602b      	str	r3, [r5, #0]
 800658c:	f7fb f91a 	bl	80017c4 <_isatty>
 8006590:	1c43      	adds	r3, r0, #1
 8006592:	d102      	bne.n	800659a <_isatty_r+0x1a>
 8006594:	682b      	ldr	r3, [r5, #0]
 8006596:	b103      	cbz	r3, 800659a <_isatty_r+0x1a>
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	bd38      	pop	{r3, r4, r5, pc}
 800659c:	200003c8 	.word	0x200003c8

080065a0 <_sbrk_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4d06      	ldr	r5, [pc, #24]	@ (80065bc <_sbrk_r+0x1c>)
 80065a4:	2300      	movs	r3, #0
 80065a6:	4604      	mov	r4, r0
 80065a8:	4608      	mov	r0, r1
 80065aa:	602b      	str	r3, [r5, #0]
 80065ac:	f7fb f922 	bl	80017f4 <_sbrk>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_sbrk_r+0x1a>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_sbrk_r+0x1a>
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	200003c8 	.word	0x200003c8

080065c0 <memcpy>:
 80065c0:	440a      	add	r2, r1
 80065c2:	4291      	cmp	r1, r2
 80065c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80065c8:	d100      	bne.n	80065cc <memcpy+0xc>
 80065ca:	4770      	bx	lr
 80065cc:	b510      	push	{r4, lr}
 80065ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065d6:	4291      	cmp	r1, r2
 80065d8:	d1f9      	bne.n	80065ce <memcpy+0xe>
 80065da:	bd10      	pop	{r4, pc}

080065dc <abort>:
 80065dc:	b508      	push	{r3, lr}
 80065de:	2006      	movs	r0, #6
 80065e0:	f000 f85a 	bl	8006698 <raise>
 80065e4:	2001      	movs	r0, #1
 80065e6:	f7fb f88d 	bl	8001704 <_exit>

080065ea <_realloc_r>:
 80065ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ee:	4680      	mov	r8, r0
 80065f0:	4615      	mov	r5, r2
 80065f2:	460c      	mov	r4, r1
 80065f4:	b921      	cbnz	r1, 8006600 <_realloc_r+0x16>
 80065f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065fa:	4611      	mov	r1, r2
 80065fc:	f7ff b9c0 	b.w	8005980 <_malloc_r>
 8006600:	b92a      	cbnz	r2, 800660e <_realloc_r+0x24>
 8006602:	f7ff f949 	bl	8005898 <_free_r>
 8006606:	2400      	movs	r4, #0
 8006608:	4620      	mov	r0, r4
 800660a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800660e:	f000 f85f 	bl	80066d0 <_malloc_usable_size_r>
 8006612:	4285      	cmp	r5, r0
 8006614:	4606      	mov	r6, r0
 8006616:	d802      	bhi.n	800661e <_realloc_r+0x34>
 8006618:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800661c:	d8f4      	bhi.n	8006608 <_realloc_r+0x1e>
 800661e:	4629      	mov	r1, r5
 8006620:	4640      	mov	r0, r8
 8006622:	f7ff f9ad 	bl	8005980 <_malloc_r>
 8006626:	4607      	mov	r7, r0
 8006628:	2800      	cmp	r0, #0
 800662a:	d0ec      	beq.n	8006606 <_realloc_r+0x1c>
 800662c:	42b5      	cmp	r5, r6
 800662e:	462a      	mov	r2, r5
 8006630:	4621      	mov	r1, r4
 8006632:	bf28      	it	cs
 8006634:	4632      	movcs	r2, r6
 8006636:	f7ff ffc3 	bl	80065c0 <memcpy>
 800663a:	4621      	mov	r1, r4
 800663c:	4640      	mov	r0, r8
 800663e:	f7ff f92b 	bl	8005898 <_free_r>
 8006642:	463c      	mov	r4, r7
 8006644:	e7e0      	b.n	8006608 <_realloc_r+0x1e>

08006646 <_raise_r>:
 8006646:	291f      	cmp	r1, #31
 8006648:	b538      	push	{r3, r4, r5, lr}
 800664a:	4605      	mov	r5, r0
 800664c:	460c      	mov	r4, r1
 800664e:	d904      	bls.n	800665a <_raise_r+0x14>
 8006650:	2316      	movs	r3, #22
 8006652:	6003      	str	r3, [r0, #0]
 8006654:	f04f 30ff 	mov.w	r0, #4294967295
 8006658:	bd38      	pop	{r3, r4, r5, pc}
 800665a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800665c:	b112      	cbz	r2, 8006664 <_raise_r+0x1e>
 800665e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006662:	b94b      	cbnz	r3, 8006678 <_raise_r+0x32>
 8006664:	4628      	mov	r0, r5
 8006666:	f000 f831 	bl	80066cc <_getpid_r>
 800666a:	4622      	mov	r2, r4
 800666c:	4601      	mov	r1, r0
 800666e:	4628      	mov	r0, r5
 8006670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006674:	f000 b818 	b.w	80066a8 <_kill_r>
 8006678:	2b01      	cmp	r3, #1
 800667a:	d00a      	beq.n	8006692 <_raise_r+0x4c>
 800667c:	1c59      	adds	r1, r3, #1
 800667e:	d103      	bne.n	8006688 <_raise_r+0x42>
 8006680:	2316      	movs	r3, #22
 8006682:	6003      	str	r3, [r0, #0]
 8006684:	2001      	movs	r0, #1
 8006686:	e7e7      	b.n	8006658 <_raise_r+0x12>
 8006688:	2100      	movs	r1, #0
 800668a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800668e:	4620      	mov	r0, r4
 8006690:	4798      	blx	r3
 8006692:	2000      	movs	r0, #0
 8006694:	e7e0      	b.n	8006658 <_raise_r+0x12>
	...

08006698 <raise>:
 8006698:	4b02      	ldr	r3, [pc, #8]	@ (80066a4 <raise+0xc>)
 800669a:	4601      	mov	r1, r0
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	f7ff bfd2 	b.w	8006646 <_raise_r>
 80066a2:	bf00      	nop
 80066a4:	20000028 	.word	0x20000028

080066a8 <_kill_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4d07      	ldr	r5, [pc, #28]	@ (80066c8 <_kill_r+0x20>)
 80066ac:	2300      	movs	r3, #0
 80066ae:	4604      	mov	r4, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	4611      	mov	r1, r2
 80066b4:	602b      	str	r3, [r5, #0]
 80066b6:	f7fb f815 	bl	80016e4 <_kill>
 80066ba:	1c43      	adds	r3, r0, #1
 80066bc:	d102      	bne.n	80066c4 <_kill_r+0x1c>
 80066be:	682b      	ldr	r3, [r5, #0]
 80066c0:	b103      	cbz	r3, 80066c4 <_kill_r+0x1c>
 80066c2:	6023      	str	r3, [r4, #0]
 80066c4:	bd38      	pop	{r3, r4, r5, pc}
 80066c6:	bf00      	nop
 80066c8:	200003c8 	.word	0x200003c8

080066cc <_getpid_r>:
 80066cc:	f7fb b802 	b.w	80016d4 <_getpid>

080066d0 <_malloc_usable_size_r>:
 80066d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066d4:	1f18      	subs	r0, r3, #4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	bfbc      	itt	lt
 80066da:	580b      	ldrlt	r3, [r1, r0]
 80066dc:	18c0      	addlt	r0, r0, r3
 80066de:	4770      	bx	lr

080066e0 <_init>:
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e2:	bf00      	nop
 80066e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066e6:	bc08      	pop	{r3}
 80066e8:	469e      	mov	lr, r3
 80066ea:	4770      	bx	lr

080066ec <_fini>:
 80066ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ee:	bf00      	nop
 80066f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f2:	bc08      	pop	{r3}
 80066f4:	469e      	mov	lr, r3
 80066f6:	4770      	bx	lr
